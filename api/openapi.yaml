openapi: 3.0.3
info:
  contact:
    name: Cumulocity IoT support
    url: https://cumulocity.com/guides/about-doc/contacting-support/
  description: |
    # REST implementation

    This section describes the aspects common to all REST-based interfaces of Cumulocity IoT. The interfaces are based on the [Hypertext Transfer Protocol 1.1](https://tools.ietf.org/html/rfc2616) using [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure).

    ## HTTP usage

    ### Application management

    Cumulocity IoT uses a so-called "application key" to distinguish requests coming from devices and traffic from applications. If you write an application, pass the following header as part of all requests:

    ```markup
    X-Cumulocity-Application-Key: <APPLICATION_KEY>
    ```

    For example, if you registered your application in the Cumulocity IoT Administration application with the key "myapp", your requests should contain the header:

    ```markup
    X-Cumulocity-Application-Key: myapp
    ```

    This makes your application subscribable and billable. If you implement a device, do not pass the key.

    > **&#9432; Info:** Make sure that you pass the key in **all** requests coming from an application. If you leave out the key,
    > the request will be considered as a device request, and the corresponding device will be marked as "available".

    ### Limited HTTP clients

    If you use an HTTP client that can only perform GET and POST methods in HTTP, you can emulate the other methods through an additional "X-HTTP-METHOD" header. Simply issue a POST request and add the header, specifying the actual REST method to be executed. For example, to emulate the "PUT" (modify) method, you can use:

    ```http
    POST ...
    X-HTTP-METHOD: PUT
    ```

    ### Processing mode

    Every update request (PUT, POST, DELETE) executes with a so-called *processing mode*. The processing modes are as follows:

    |Processing mode|Description|
    |---|---|
    |PERSISTENT (default)|All updates will be send both to the Cumulocity IoT database and to real-time processing.|
    |TRANSIENT|Updates will be sent only to real-time processing. As part of real-time processing, the user can decide case by case through scripts whether updates should be stored to the database or not.|
    |QUIESCENT|The QUIESCENT processing mode behaves like the PERSISTENT processing mode with the exception that no real-time notifications will be sent. Currently, the QUIESCENT processing mode is applicable for measurements, events and managed objects.|
    |CEP| With the CEP processing mode, requests will only be processed by CEP or Apama. Currently, the CEP processing mode is applicable for measurements and events only.|

    To explicitly control the processing mode of an update request, you can use the "X-Cumulocity-Processing-Mode" header with a value of either "PERSISTENT", "TRANSIENT", "QUIESCENT" or "CEP":

    ```markup
    X-Cumulocity-Processing-Mode: PERSISTENT
    ```

    > **&#9432; Info:** Events are always delivered to CEP/Apama for all processing modes. This is independent from real-time notifications.

    ### Authorization

    All requests issued to Cumulocity IoT are subject to authorization. To determine the required permissions, see the "Required role" entries for the individual requests. To learn more about the different permissions and the concept of ownership in Cumulocity IoT, see [Security aspects > Managing roles and assigning permissions](https://cumulocity.com/guides/concepts/security/#managing-roles-and-assigning-permissions)".

    ### Media types

    Each type of data is associated with an own media type. The general format of media types is:

    ```markup
    application/vnd.com.nsn.cumulocity.<TYPE>+json;ver=<VERSION>;charset=UTF-8
    ```

    Each media type contains a parameter `ver` indicating the version of the type. At the time of writing, the latest version is "0.9". As an example, the media type for an error message in the current version is:

    ```markup
    application/vnd.com.nsn.cumulocity.error+json;ver=0.9;charset=UTF-8
    ```

    Media types are used in HTTP "Content-Type" and "Accept" headers. If you specify an "Accept" header in a POST or PUT request, the response will contain the newly created or updated object. If you do not specify the header, the response body will be empty.

    If a media type without the `ver` parameter is given, the oldest available version will be returned by the server. If the "Accept" header contains the same media type in multiple versions, the server will return a representation in the latest supported version.

    Note that media type values should be treated as case insensitive.

    ### Date format

    Data exchanged with Cumulocity IoT in HTTP requests and responses is encoded in [JSON format](http://www.ietf.org/rfc/rfc4627.txt) and [UTF-8](http://en.wikipedia.org/wiki/UTF-8) character encoding. Timestamps and dates are accepted and emitted by Cumulocity IoT in [ISO 8601](http://www.w3.org/TR/NOTE-datetime) format:

    ```markup
    Date: YYYY-MM-DD
    Time: hh:mm:ss±hh:mm
    Timestamp: YYYY-MM-DDThh:mm:ss±hh:mm
    ```

    To avoid ambiguity, all times and timestamps must include timezone information. Please take into account that the plus character "+" must be encoded as "%2B".

    ### Response Codes

    Cumulocity IoT uses conventional HTTP response codes to indicate the success or failure of an API request. Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate a user error. The response provides information on why the request failed (for example, a required parameter was omitted). Codes in the `5xx` range indicate an error with Cumulocity IoT's servers ([these are very rare](https://www.softwareag.cloud/site/sla/cumulocity-iot.html#availability)).

    #### HTTP status code summary

    |Code|Message|Description|
    |:---:|:---|:---|
    |200|OK|Everything worked as expected.|
    |201|Created|A managed object was created.|
    |204|No content|An object was removed.|
    |400|Bad Request|The request was unacceptable, often due to missing a required parameter.|
    |401|Unauthorized|Authentication has failed, or credentials were required but not provided.|
    |403|Forbidden|The authenticated user doesn't have permissions to perform the request.|
    |404|Not Found|The requested resource doesn't exist.|
    |405|Method not allowed|The employed HTTP method cannot be used on this resource (for example, using PUT on a read-only resource).|
    |409|Conflict| The data is correct but it breaks some constraints (for example, application version limit is exceeded). |
    |422|Invalid data| Invalid data was sent on the request and/or a query could not be understood.                             |
    |422|Unprocessable Entity| The requested resource cannot be updated or mandatory fields are missing on the executed operation.      |
    |500<br>503|Server Errors| Something went wrong on Cumulocity IoT's end.                                                            |

    ## REST usage

    ### Interpretation of HTTP verbs

    The semantics described in the [HTTP specification](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9) are used:

    * POST creates a new resource. In the response "Location" header, the URI of the newly created resource is returned.
    * GET retrieves a resource.
    * PUT updates an existing resource with the contents of the request.
    * DELETE removes a resource. The response will be "204 No Content".

    If a PUT request only contains parts of a resource (also known as fragments), only those parts are updated. To remove such a part, use a PUT request with a null value for it:

    ```json
    {
      "resourcePartName": null
    }
    ```

    > **&#9432; Info:** A PUT request cannot update sub-resources that are identified by a separate URI.

    ### URI space and URI templates

    Clients should not make assumptions on the layout of URIs used in requests, but construct URIs from previously returned URIs or URI templates. The [root interface](#tag/Platform-API) provides the entry point for clients.

    URI templates contain placeholders in curly braces (for example, `{type}`), which must be filled by the client to produce a URI. As an example, see the following excerpt from the event API response:

    ```json
    {
      "events": {
          "self": "https://<TENANT_DOMAIN>/event"
      },
      "eventsForSourceAndType": "https://<TENANT_DOMAIN>/event/events?type={type}&source={source}"
    }
    ```

    The client must fill the `{type}` and `{source}` placeholders with the desired type and source devices of the events to be returned. The meaning of these placeholders is documented in the respective interface descriptions.

    ### Interface structure

    In general, Cumulocity IoT REST resources are modeled according to the following pattern:

    * The starting point are API resources, which will provide access to the actual data through URIs and URI templates to collection resources. For example, the above event API resource provides the `events` URI and the `eventsForSourceAndType` URI to access collections of events.
    * Collection resources aggregate member resources and allow creating new member resources in the collection. For example, through the `events` collection resource, new events can be created.
    * Finally, individual resources can be edited.

    #### Query result paging

    Collection resources support paging of data to avoid passing huge data volumes in one block from client to server. GET requests to collections accept two query parameters:

    * `currentPage` defines the slice of data to be returned, starting with 1. By default, the first page is returned.
    * `pageSize` indicates how many entries of the collection should be returned. By default, 5 entries are returned. The upper limit for one page is currently 2,000 documents. Any larger requested page size is trimmed to the upper limit.
    * `withTotalElements` will yield the total number of elements in the statistics object. This is only applicable on [range queries](https://en.wikipedia.org/wiki/Range_query_(database)).
    * `withTotalPages` will yield the total number of pages in the statistics object. This is only applicable on [range queries](https://en.wikipedia.org/wiki/Range_query_(database)).

    For convenience, collection resources provide `next` and `prev` links to retrieve the next and previous pages of the results. The following is an example response for managed object collections (the contents of the array `managedObjects` have been omitted):

    ```json
    {
      "self" : "https://<TENANT_DOMAIN>/inventory/managedObjects?pageSize=5&currentPage=2",
      "managedObjects" : [...],
      "statistics" : {
        "totalPages" : 7,
        "pageSize" : 5,
        "currentPage" : 2,
        "totalElements" : 34
      },
      "prev" : "https://<TENANT_DOMAIN>/inventory/managedObjects?pageSize=5&currentPage=1",
      "next" : "https://<TENANT_DOMAIN>/inventory/managedObjects?pageSize=5&currentPage=3"
    }
    ```

    The `totalPages` and `totalElements` properties can be expensive to compute, hence they are not returned by default for [range queries](https://en.wikipedia.org/wiki/Range_query_(database)). To include any of them in the result, add the query parameters `withTotalPages=true` and/or `withTotalElements=true`.

    > **&#9432; Info:** If inventory roles are applied to a user, a query by the user may return less than `pageSize` results even if there are more results in total.

    #### Query result paging for users with restricted access

    If a user does not have a global role for reading data from the API resource but rather has [inventory roles](https://cumulocity.com/guides/users-guide/administration/#inventory) for reading only particular documents, there are some differences in query result paging:

    * In some circumstances the response may contain less than `pageSize` and `totalElements` elements though there is more data in the database accessible for the user.
    * In some circumstances `next` and `prev` links may appear in the response though there is no more data in the database accessible for the user.
    * The property `currentPage` of the response does not contain the page number but the offset of the next element not yet processed by the querying mechanism.
    * The query parameters `withTotalPages=true` and `withTotalElements=true` have no effect, and the value of the `totalPages` and `totalElements` properties is always null.

    The above behavior results from the fact that the querying mechanism is iterating maximally over 10 * max(pageSize, 100) documents per request, and it stops even though the full page of data accessible for the user could not be collected. When the next page is requested the querying mechanism starts the iteration where it completed the previous time.

    #### Query result by time interval

    Use the following query parameters to obtain data for a specified time interval:

    * `dateFrom` - Start date or date and time.
    * `dateTo` - End date or date and time.

    Example formats:

    ```markup
    dateTo=2019-04-20
    dateTo=2019-04-20T08:30:00.000Z
    ```

    Parameters are optional. Values provided with those parameters are inclusive.

    > **⚠️ Important:** If your servers are not running in UTC (Coordinated Universal Time), any date passed without timezone will be handled as UTC, regardless of the server local timezone. This might lead to a difference regarding the date/time range included in the results.

    ### Root interface

    To discover the URIs to the various interfaces of Cumulocity IoT, it provides a "root" interface.
    This root interface aggregates all the underlying API resources.
    See the [Platform API](#tag/Platform-API) endpoint.
    For more information on the different API resources, consult the respective API sections.

    ## Generic media types

    ### Error

    The error type provides further information on the reason of a failed request.

    Content-Type: application/vnd.com.nsn.cumulocity.error+json

    |Name|Type|Description|
    |---|---|---|
    |error|string|Error type formatted as `<RESOURCE_TYPE>/<ERROR_NAME>`. For example, an object not found in the inventory is reported as `inventory/notFound`.|
    |info|string|URL to an error description on the Internet.|
    |message|string|Short text description of the error|

    ### Paging statistics

    Paging statistics for collection of resources.

    Content-Type: application/vnd.com.nsn.cumulocity.pagingstatistics+json

    |Name|Type|Description|
    |---|---|---|
    |currentPage|integer|The current returned page within the full result set, starting at "1".|
    |pageSize|integer|Maximum number of records contained in this query.|
    |totalElements|integer|The total number of results (elements).|
    |totalPages|integer|The total number of paginated results (pages).|

    > **&#9432; Info:** The `totalPages` and `totalElements` properties are not returned by default in the response. To include any of them, add the query parameters `withTotalPages=true` and/or `withTotalElements=true`. Be aware of [differences in query result paging for users with restricted access](#query-result-paging-for-users-with-restricted-access).

    > **&#9432; Info:** To improve performance, the `totalPages` and `totalElements` statistics are cached for 10 seconds.

    # Device management library

    The device management library has moved.
    Visit the [device management library](https://cumulocity.com/guides/reference/device-management-library/#overview) in the *Reference guide*.

    # Sensor library

    The sensor library has moved.
    Visit the [sensor library](https://cumulocity.com/guides/reference/sensor-library/#overview) in the *Reference guide*.

    # Login options

    When you sign up for an account on the [Cumulocity IoT platform](https://cumulocity.com/), for example, by using a free trial, you will be provided with a dedicated URL address for your tenant. All requests to the platform must be authenticated employing your tenant ID, Cumulocity IoT user (c8yuser for short) and password. Cumulocity IoT offers the following forms of authentication:

    * Basic authentication (Basic)
    * OAI-Secure authentication (OAI-Secure)
    * SSO with authentication code grant (SSO)
    * JSON Web Token authentication (JWT, deprecated)

    You can check your login options with a GET call to the endpoint <kbd><a href="#tag/Login-options">/tenant/loginOptions</a></kbd>.
  license:
    name: Software AG Legal Notices
    url: https://cumulocity.com/guides/about-doc/legal/
  title: Cumulocity IoT
  version: Release 10.15.0
  x-logo:
    url: https://cumulocity.com/guides/images/cumulocity-iot.svg
    backgroundColor: '#F8F8F8'
    altText: Cumulocity IoT
    href: https://cumulocity.com/api
servers:
- description: Cumulocity IoT tenant
  url: https://<TENANT_DOMAIN>
security:
- Basic: []
- OAI-Secure: []
- SSO: []
- JWT: []
tags:
- description: "The alarm API resource returns URIs and URI templates to collections\
    \ of alarms, so that all alarms or alarms of a specified source device and/or\
    \ status can be retrieved."
  name: Alarm API
  x-codegen-ignore: true
- description: |
    The Alarm notification API allows monitoring alarms of specific devices. The basic protocol for receiving notifications is described in [Real-time notifications](#tag/Real-time-notification-API).
    The Real-time notification API enables responsive communication by employing a POST request to:

    ```http
    notification/realtime
    ```

    To receive notifications for the alarms of all devices, the subscription channel needs to contain the managed object ID of the device or an asterisk (*) as placeholder.

    ```json
    "channel": "/alarms/{managedObjectId}"
    ```

    Additionally to the alarm object, the response will contain a `realtimeAction` flag to identify which action resulted in the given object (CREATE or UPDATE).

    **Required role**: ROLE_ALARM_READ

    **Response sample:**

    ```json
    {
      "channel": "/alarms/145075",
      "successful": true,
      "error": "",
      "data": [{
        "realtimeAction": "UPDATE",
        "data": {
          "id": "1",
          "self": "...",
          "source": {
            "145075"
          },
          "type": "c8y_UnavailabilityAlarm",
          "text": "I am an alarm",
          "severity": "MINOR",
          "status": "CLEARED",
          "firstOccurrence": true,
          "count": 1
        }
      }],
      "clientId": "Un1q31d3nt1f13r"
    }
    ```
  name: Alarm notification API
- description: |
    An alarm represents an event that requires manual action, for example, when the temperature of a fridge increases above a particular threshold.

    > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: Alarms
- description: |
    The device control API resource returns URIs and URI templates to collections of operations so that they can be retrieved.

    > **&#9432; Info:** In order to create/retrieve/update an operation for a device, the device must be in the “childDevices” hierarchy of an existing agent. To create an agent in the inventory, you should create a managed object with a fragment `com_cumulocity_model_Agent`.
  name: Device control API
  x-codegen-ignore: true
- description: |
    There are two options to receive real-time notifications for the device control API.
    The basic protocol for receiving notifications is described in [Real-time notifications](#tag/Real-time-notification-API).

    ## Receive operations for an agent

    Real-time notifications permit an agent to almost immediately receive new operations targeted to it. For control-related notifications, use the URL:

    ```http
    /notification/operations
    ```

    The subscription channel needs to contain the managed object ID of the agent that wants to receive its operations:

    ```json
    "channel": "/<AGENT_ID>"
    ```

    For example, to subscribe on notifications about new operations created for the agent with the ID "5", the subscription channel should be the following string:

    ```json
    "channel": "/5"
    ```

    **Required role:** ROLE_DEVICE_CONTROL_READ

    ## Receive operations for a device

    This endpoint will not only result in returning newly created operations but also all updates (including deletion) of the operations for a device. The URL is:

    ```http
    /notification/realtime
    ```

    The subscription channel needs to contain the managed object ID of the device or a `*` as placeholder to receive notifications for all devices:

    ```json
    "channel": "/operations/<DEVICE_ID>""
    ```

    Additionally to the operation object, the response will contain a `realtimeAction` property to identify which action resulted in the given object (CREATE, UPDATE or DELETE). In case of a deletion the data will only contain the ID of the deleted operation.

    **Response sample:**

    ```json
    [
      {
        "channel": "/operations/12345",
        "successful": true,
        "error": "",
        "data": [{
          "realtimeAction": "CREATE",
          "data": {
            "id": "1",
            "deviceId": "12345",
            "self": "https://<TENANT_DOMAIN>/devicecontrol/operation/12345",
            "creationTime": "2011-09-06T12:03:27.927+02:00",
            "status": "PENDING",
            "time": "2011-09-06T12:03:27.845+02:00",
            "description": "Deactivate motion tracking",
            "c8y_MotionTracking": { }
          }
        }],
        "clientId": "Un1q31d3nt1f13r"
      }
    ]
    ```

    **Required role:** ROLE_DEVICE_CONTROL_READ
  name: Device control notification API
- description: |
    API methods to create, retrieve, update and delete operations in Cumulocity IoT.

    > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: Operations
- description: |
    The bulk operations API allows to schedule an operation on a group of devices to be executed at a specified time.
    It is required to specify the delay between the creation of subsequent operations.
    When the bulk operation is created, it has the status ACTIVE.
    When all operations are created, the bulk operation has the status COMPLETED.
    It is also possible to cancel an already created bulk operation by deleting it.

    When you create a bulk operation, you can run it in two modes:

    * If `groupId` is passed, it works the standard way, that means, it takes devices from a group and schedules operations on them.
    * If `failedParentId` is passed, it takes the already processed bulk operation by that ID, and schedules operations on devices for which the previous operations failed.

    Note that passing both `groupId` and `failedParentId` will not work, and a bulk operation works with groups of type `static` and `dynamic`.

    > **&#9432; Info:** The bulk operations API requires different roles than the rest of the device control API: `BULK_OPERATION_READ` and `BULK_OPERATION_ADMIN`.
    >
    > The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: Bulk operations
- description: |
    API methods to create device credentials in Cumulocity IoT.

    Device credentials can be enquired by devices that do not have credentials for accessing a tenant yet.
    Since the device does not have credentials yet, a set of fixed credentials is used for this API.
    The credentials can be obtained by [contacting support](https://cumulocity.com/guides/about-doc/contacting-support/).

    > **⚠️ Important:** Do not use your tenant credentials with this API.

    > **&#9432; Info:** The Accept header should be provided in all POST requests, otherwise an empty response body will be returned.
  name: Device credentials
- description: |
    API methods to create, retrieve, update and delete new device requests in Cumulocity IoT.

    > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: New device requests
- description: |
    In order to send operations via SMS, either the device managed object should contain the fragment:

    ```json
    "c8y_CommunicationMode": {
      "mode": "SMS"
    }
    ```

    or the operation should contain the property:

    ```json
    "deliveryType": "SMS"
    ```
  name: Device control via SMS
- description: |
    The audit API resource returns URIs and URI templates to collections of audit records, so that they can be retrieved by criteria such as “all records from a particular user”, or “all records from a particular application”.

    ### Audited information:

    * Alarm modifications
    * Operation modifications
    * Two-factor authentication login attempts
    * Smart rule modifications
    * Complex Event Processing (CEP) module modifications
    * User and group permissions modifications
    * SSO and OAuth Internal logout and login attempts
  name: Audit API
  x-codegen-ignore: true
- description: |
    An audit log stores events that are security-relevant and should be stored for auditing. For example, an audit log should be generated when a user logs into a gateway.

    An audit log extends an event through:

    * A username of the user that carried out the activity.
    * An application that was used to carry out the activity.
    * The actual activity.
    * A severity.

    > **&#9432; Info:** The Accept header should be provided in all POST requests, otherwise an empty response body will be returned.
  name: Audits
- description: "The event API resource returns URIs and URI templates to collections\
    \ of events, so that all events or events of a specified type and/or source device\
    \ can be retrieved."
  name: Event API
  x-codegen-ignore: true
- description: |
    The Event notification API allows monitoring events of specific devices. The basic protocol for receiving notifications is described in [Real-time notifications](#tag/Real-time-notification-API).
    The Real-time notification API enables responsive communication by employing a POST request to:

    ```http
    notification/realtime
    ```

    To receive notifications for the events of all devices, the subscription channel needs to contain the managed object ID of the device or an asterisk (*) as placeholder.

    ```json
    "channel": "/events/{managedObjectId}"
    ```

    Additionally to the event object, the response will contain a `realtimeAction` flag to identify which action resulted in the given object (CREATE, UPDATE or DELETE). In case of a deletion, the data will only contain the ID of the deleted event.

    **Required role**: ROLE_EVENT_READ

    **Response sample:**

    ```json
    {
      "channel": "/events/145075",
      "successful": true,
      "error": "",
      "data": [{
        "realtimeAction": "CREATE",
        "data": {
          "id": "1",
          "self": "...",
          "source": {
            "145075"
          },
          "text": "An event has been triggered",
          "creationTime": "2019-09-06T12:03:27.927+02:00",
        }
      }],
      "clientId": "Un1q31d3nt1f13r"
    }
    ```
  name: Event notification API
- description: |
    Events are used to pass real-time information through Cumulocity IoT.

    > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: Events
- description: "It is possible to store, retrieve and delete binaries for events.\
    \ Each event can have only one binary attached."
  name: Attachments
- description: The application API resource returns URIs and URI templates to collections
    of applications so that all applications with a particular name and all applications
    owned by particular tenant can be queried.
  name: Application API
  x-codegen-ignore: true
- description: |
    API methods to retrieve and update the current application and to retrieve its subscribers.
    It is the authenticated microservice user's application.
  name: Current application
- description: |
    API methods to retrieve, create, update and delete applications.

    ### Application names

    For each tenant, Cumulocity IoT manages the subscribed applications and provides a number of applications of various types.
    In case you want to subscribe a tenant to an application using an API, you must use the application name in the argument (as name).

    Refer to the tables in [Administration > Managing applications](https://cumulocity.com/guides/10.7.0/users-guide/administration#managing-applications) in the User guide for the respective application name to be used.

    > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: Applications
- description: "API methods to retrieve, create, update and delete application versions."
  name: Application versions
- description: An API method to upload an application binary. It is a deployable microservice
    or web application.
  name: Application binaries
- description: API methods to retrieve the bootstrap user of an application.
  name: Bootstrap user
- description: "The inventory stores all master data related to devices, their configuration\
    \ and their connections. It also contains all related assets (for example, vehicles,\
    \ machines, buildings) and their structure. The inventory API resource returns\
    \ URIs and URI templates to collections of managed objects."
  name: Inventory API
  x-codegen-ignore: true
- description: |
    The Inventory notification API allows monitoring changes in the inventory. The basic protocol for receiving notifications is described in [Real-time notifications](#tag/Real-time-notification-API).
    The Real-time notification API enables responsive communication by employing a POST request to:

    ```http
    notification/realtime
    ```

    To receive notifications for changes in the inventory, the subscription channel needs to contain the managed object ID of the device or an asterisk (*) as placeholder.

    ```json
    "channel": "/managedobjects/{managedObjectId}"
    ```

    Additionally to the managed object, the response will contain a `realtimeAction` flag to identify which action resulted in the given object (CREATE, UPDATE or DELETE). In case of a deletion, the data will only contain the ID of the deleted managed object.

    **Response sample:**

    ```json
    {
      "channel": "/managedobjects/145075",
      "successful": true,
      "error": "",
      "data": [{
        "realtimeAction": "UPDATE",
        "data": {
          "id": "145075",
          "self": "...",
          "creationTime": "2019-09-06T12:03:27.927+02:00",
          "name": "Test device",
          "c8y_IsDevice": {},
        }
      }],
      "clientId": "Un1q31d3nt1f13r"
    }
    ```
  name: Inventory notification API
- description: |
    The inventory stores devices and other assets relevant to your IoT solution. We refer to them as managed objects and such can be “smart objects”, for example, smart electricity meters, home automation gateways or GPS devices.

    > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: Managed objects
- description: |
    Managed objects can perform operations to store, retrieve and delete binaries. One binary can store only one file. Together with the binary, a managed object is created which acts as a metadata information for the binary.

    > **&#9432; Info:** Supports only HTTP 1.1 clients.
    > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: Binaries
- description: |
    Managed objects can contain collections of references to child devices, additions and assets.

    > **&#9432; Info:** The Accept header should be provided in all POST requests, otherwise an empty response body will be returned.
  name: Child operations
- description: "Query expressions are matched against all managed objects using the\
    \ `query` parameter. The following are examples of query expressions:\n\n* Only\
    \ query the database: `query=name eq 'M01'`\n* Filter by name: `query=$filter=name\
    \ eq 'M01'`\n* Order by ID: `query=$orderby=id asc`\n* Filter by name and order\
    \ by ID: `query=$filter=name eq 'M01' $orderby=id`\n\nQuery expressions extend\
    \ the URL. The syntax is similar to the [OData protocol 2.0](https://www.odata.org/documentation/odata-version-2-0/overview/).\
    \   \nRegex features with custom filter queries are not supported.\n\n## Supported\
    \ operations\n\n* `eq` (equal): `City eq 'Redmond'`\n* `gt` (greater than): `Price\
    \ gt 20`\n* `ge` (greater than or equal): `Price ge 10`\n* `lt` (less than): `Price\
    \ lt 20`\n* `le` (less than or equal): `Price le 100`\n* `and` (logical AND):\
    \ `Price le 200 and Price gt 3.5f`\n* `or` (logical OR): `Price le 3.5d or Price\
    \ gt 200`\n* `not` (logical NOT): `not has(c8y_IsDevice)`\n\nDecimal numbers have\
    \ to be specified using a suffix `f` or `d`, otherwise the number is interpreted\
    \ as a string.\n* Valid query: `c8y_Position.lng gt 10 and c8y_Position.lng lt\
    \ 16.5d`\n* Invalid query: `c8y_Position.lng eq 6.6`\n\n> **&#9432; Info:** The\
    \ 'eq' operator can perform comparisons on primitive data types such as string\
    \ or integers as well as build filters on array properties and even array properties\
    \ containing complex objects.\n>\n> An example for array properties:\n>\n> If\
    \ there is the property `customerIds: [\"123\", \"456\", \"789\"]` in a managed\
    \ object, the 'eq' operator can filter the array by defining the filter `customerIds\
    \ eq '123'`. This returns all managed objects which have the ID `123` in the `customerIds`\
    \ arrays.\n>\n> An example for array properties containing complex objects:\n\
    >\n> `{\"customers\":[{\"id\":\"123\",\"name\":\"Customer 1\"},{\"id\":\"456\"\
    ,\"name\":\"Customer 2\"},{\"id\":\"789\",\"name\":\"Customer 3\"}]}`\n>\n> The\
    \ filter query `customers.id eq '123'` filters managed objects which have the\
    \ object `{\"id\":\"123\",\"name\":\"Customer 1\"}` in the `customers` array.\n\
    \n### Filtering by type and name\n\nNote that if you query `/inventory/managedObjects?type=c8y_Firmware&query=$filter=(name+eq+'Controller\
    \ 1')`, the  parameter `type` is ignored. Instead, use `query=$filter=(type+eq+c8y_Firmware+and+name+eq+'Controller\
    \ 1')`.\n\n### Grouping query operators\n\nUse `( )` for precedence grouping:\
    \ `(p1 eq 1) and (p2 eq 5 or p2 eq 6)`.\n\n## Supported sort operations\n\n* Ascending\
    \ order: `$orderby=name` or `$orderby=name asc`\n* Descending order: `$orderby=name\
    \ desc`\n\n## Supported functions\n\n* `has()`:\n  - Matches objects with the\
    \ property that is passed as an argument.\n  - Accepts only one argument.\n  -\
    \ Only supports custom fragments.\n  - Standard properties are not supported,\
    \ that is, none of: `id`, `type`, `name`, `self`, `lastUpdated`, `owner`, `creationTime`,\
    \ `supportedMeasurements`, `childAssets`, `childDevices`, `childAdditions`, `externalIds`.\n\
    \  - `has(field1)` - matches objects with property `field1`.\n* `hasany()`:\n\
    \  - Matches objects with the properties that are passed as arguments.\n  - Accepts\
    \ one or multiple arguments.\n  - Only supports custom fragments.\n  - Standard\
    \ properties are not supported, that is, none of: `id`, `type`, `name`, `self`,\
    \ `lastUpdated`, `owner`, `creationTime`, `supportedMeasurements`, `childAssets`,\
    \ `childDevices`, `childAdditions`, `externalIds`.\n  - `hasany(field1,field2)`\
    \ - matches objects with property `field1` or `field2`.\n* `bygroupid()`:\n  -\
    \ Matches objects from the group with the ID that is passed as an argument.\n\
    \  - Accepts one or multiple arguments.\n  - `bygroupid(12,23)` matches objects\
    \ from groups with ID = `12` or ID = `23`.\n\n> **⚠️ Important:** Although using\
    \ multiple `bygroupid()`/`has()` functions joined with the `or` operator is feasible\
    \ (for example, `bygroupid(12) or bygroupid(23)`/`has(field1) or has(field2)`),\
    \ it's not recommended due to performance issue. You should rather use `bygroupid(12,23)`/`hasany(field1,field2)`.\n\
    \n## Supported values\n\n* String: `name eq 'Dev002'`, `name eq 'Dev*'`, `name\
    \ eq '*001'`, `name eq '*'`.\n  - The string must be surrounded by single quotes.\n\
    \  - The string can contain the wildcard `*` and it matches 0 to N characters.\n\
    \  - Matching is case-sensitive.\n* Number values\n* Date-time: `creationTime.date\
    \ gt '2015-10-24T09:00:53.351+01:00'`\n  - It must be encoded.\n\n## Supported\
    \ properties\n\n* Simple: `name`\n* Nested: `c8y_Availability.status`\n"
  name: Query language
- description: |
    Cumulocity IoT can associate devices and assets with multiple external identities.
    For instance, devices can often be identified by the IMEI of their modem, by a micro-controller serial number or by an asset tag.
    This is useful, for example, when you have non-functional hardware and must replace the hardware without losing the data that was recorded.

    The identity API resource returns URIs and URI templates for associating external identifiers with unique identifiers.
  name: Identity API
- description: |
    The external ID resource represents an individual external ID that can be queried and deleted.

    > **&#9432; Info:** The Accept header should be provided in all POST requests, otherwise an empty response body will be returned.
  name: External IDs
- description: "The user API resource returns URIs and URI templates to collections\
    \ of users, groups, and roles, so that they can be queried."
  name: User API
  x-codegen-ignore: true
- description: |
    The current user is the user that is currently authenticated with Cumulocity IoT for the API calls.

    > **&#9432; Info:** The Accept header should be provided in all PUT requests, otherwise an empty response body will be returned.
  name: Current User
- description: |
    API methods to create, retrieve, update and delete users in Cumulocity IoT.

    > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: Users
- description: |
    API methods to create, retrieve, update and delete user groups.

    > **⚠️ Important:** In the Cumulocity IoT user interface, user groups are referred to as "global roles". Global roles are not to be confused with user roles.

    > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: Groups
- description: |
    API methods to create, retrieve, update and delete user roles.

    > **&#9432; Info:** The Accept header should be provided in all POST requests, otherwise an empty response body will be returned.
  name: Roles
- description: |
    API methods to create, retrieve, update and delete inventory roles.

    > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: Inventory Roles
- description: |
    API methods to retrieve and update device permissions assignments.

    Device permissions enable users to access and manipulate devices.

    The device permission structure is **[API:fragment_name:permission]** where:

    * **API** is one of the following values: OPERATION, ALARM, AUDIT, EVENT, MANAGED_OBJECT, MEASUREMENT or "*"
    * **fragment_name** can be the name of any fragment, for example, "c8y_Restart" or "*"
    * **permission** is ADMIN, READ or "*"

    Required permission per HTTP method:

    + GET - READ or "*"
    + PUT - ADMIN or "*"

    The wildcard "*" enables you to access every API and stored object regardless of the fragments that are inside it.

    > **⚠️ Important:** If there is no fragment in an object, for example, to read the object, you must use the wildcard "*" for the **fragment_name** part of the device permission (see the structure above). For example: `"10200":["MEASUREMENT:*:READ"]`.
  name: Device Permissions
- description: "The measurement API resource returns URIs and URI templates to collections\
    \ of measurements, so that all measurements can be filtered and retrieved. Querying\
    \ without filters can be slow, hence it is recommended to narrow the scope by\
    \ using time [range queries](https://en.wikipedia.org/wiki/Range_query_(database)).\
    \ Moreover, the scope can be significantly reduced by querying by source."
  name: Measurement API
  x-codegen-ignore: true
- description: |
    The Measurement notification API allows monitoring measurements of specific devices. The basic protocol for receiving notifications is described in [Real-time notifications](#tag/Real-time-notification-API).
    The Real-time notification API enables responsive communication by employing a POST request to:

    ```http
    notification/realtime
    ```

    To receive notifications for the measurements of all devices, the subscription channel needs to contain the managed object ID of the device or an asterisk (*) as placeholder.

    ```json
    "channel": "/measurements/{managedObjectId}"
    ```

    Additionally to the measurement object, the response will contain a `realtimeAction` flag to identify which action resulted in the given object (CREATE or DELETE). In case of a deletion, the data will only contain the ID of the deleted measurement.

    **Required role**: ROLE_MEASUREMENT_READ

    **Response sample:**

    ```json
    [{
      "channel": "/measurements/145075",
      "successful": true,
      "version": "1.0",
      "minimumVersion": "1.0",
      "ext": {
        "ack": true
      },
      "supportedConnectionTypes": [
        "long-polling",
        "smartrest-long-polling",
        "websocket"
      ],
      "data": [{
        "realtimeAction": "CREATE",
        "data": {
          "id": "1",
          "self": "...",
          "source": {
            "145075"
          },
          "creationTime": "2019-09-06T12:03:27.927+02:00",
          "c8y_TemperatureMeasurement": {
            "T": {
              "value": 25,
              "unit": "C"
            }
          },
          "time": "2019-09-06T12:03:17.927+02:00",
          "type": "TemperatureMeasurement"
        }
      }],
      "clientId": "Un1q31d3nt1f13r"
    }]
    ```
  name: Measurement notification API
- description: |
    Measurements are produced by reading sensor values. In some cases, this data is read in static intervals and sent to the platform (for example, temperature sensors or electrical meters). In other cases, the data is read on demand or at irregular intervals (for example, health devices such as weight scales). Regardless what kind of protocol the device supports, the agent is responsible for converting it into a "push" protocol by uploading data to Cumulocity IoT.

    > **&#9432; Info:** The Accept header should be provided in all POST requests, otherwise an empty response body will be returned.
  name: Measurements
- description: |
    ## Data streaming

    The Measurements API allows to fetch data in the form of a data stream. The response format stays the same, but the data is transmitted by the server directly from the database element by element, so it can be received in the same way.

    Using stream JSON parsers like [Java JsonParser](http://docs.oracle.com/javaee/7/api/javax/json/stream/JsonParser.html) or [JavaScript Oboe.js](http://oboejs.com/) parsers allows transmitting high data volumes in a single request. To activate streaming you must set the `Accept` header as `application/json-stream`.

    ```http
    GET /measurement/measurements
    Host: https://<TENANT_DOMAIN>
    Authorization: <AUTHORIZATION>
    Accept: application/json-stream
    ```

    ## Other response formats

    In order to get measurements in other formats, you can use one of the other supported Accept headers: `text/csv`, `application/vnd.ms-excel` or `application/xlsx`.

    **Sample CSV response**:

    ```text
    time,source,device_name,fragment.series,value,unit
    2020-03-15T17:03:14.000+02:00,424,testAgent,c8y_TemperatureMeasurement.T,37,C
    ```

    ## System of units

    All GET requests support the `X-Cumulocity-System-Of-Units` header which allows setting the system of units used in the response, that is, “imperial” or “metric”. Every measurement fragment which contains the `unit` property will be converted to the specified system of units.

    ```json
    "c8y_Temperature": {
      "T": {
        "unit": "ºC",
        "value": 2.0791169082
      }
    }
    ```

    The following table shows the most common conversions between both systems.

    |Metric|Imperial|
    |:-------|:-----|
    |m (meter)|ft (foot)|
    |km (kilometer)|mi (mile)|
    |cm (centimeter)|in (inch)|
    |°C (degree Celsius)|°F (degree Fahrenheit)|
    |K (Kelvin)|°R (degree Rankine)|
    |g (gram)|oz (ounce)|
    |kg (kilogram)|lb (pound)|
  name: Measurements specifics
- description: |
    # Real-time operations

    Real-time notification services of Cumulocity IoT have their own subscription channel name format and URL. The real-time notifications are available for [Alarms](#tag/Alarm-notification-API), [Device control](#tag/Device-control-notification-API), [Events](#tag/Event-notification-API), [Inventory](#tag/Inventory-notification-API) and [Measurements](#tag/Measurement-notification-API).

    Note that when using long-polling, all POST requests must contain the Accept header, otherwise an empty response body will be returned.
    All requests are sent to the <kbd>/notification/realtime</kbd> endpoint.

    > **&#9432; Info:** The long-polling interface is designed as a mechanism for custom applications to poll infrequent events from Cumulocity IoT. The long-polling interface is not designed as a mechanism to stream large data volumes (>100kB/sec) or frequent data (>50 events/sec) out of Cumulocity IoT. The usage of long-polling is not supported for such use cases.

    ## Handshake

    A real-time notifications client initiates the connection negotiation by sending a message to the `/meta/handshake` channel. In response, the client receives a `clientId` which identifies a conversation and must be passed in every non-handshake request.

    > **&#9432; Info:** The number of parallel connections that can be opened at the same time by a single user is limited. After exceeding this limit when a new connection is created, the oldest one will be closed and the newly created one will be added in its place. This limit is configurable and managed per installation. Its default value is 10 connections per user, subscription channel and server node.

    When using WebSockets, a property `ext` containing an authentication object must be sent. In case of basic authentication, the token is used with Base64 encoded credentials. In case of OAuth authentication, the request must have the cookie with the authorization name, holding the access token. Moreover, the XSRF token must be forwarded as part of the handshake message.

    ### Request example

    ```http
    POST /notification/realtime
    Authorization: <AUTHORIZATION>
    Content-Type: application/json

    [
      {
        "channel": "/meta/handshake",
        "version": "1.0"
      }
    ]
    ```

    ### Response example

    A successful response looks like:

    ```json
    [
      {
        "channel": "/meta/handshake",
        "clientId": "69wzith4teyensmz6zyk516um4yum0mvp",
        "minimumVersion": "1.0",
        "successful": true,
        "supportedConnectionTypes": [
          "long-polling",
          "smartrest-long-polling",
          "websocket"
        ],
        "version": "1.0"
      }
    ]
    ```

    When an error occurs, the response looks like:

    ```json
    [
      {
        "channel": "/meta/handshake",
        "error": "403::Handshake denied",
        "successful": false
      }
    ]
    ```

    ## Subscribe

    A notification client can send subscribe messages and specify the desired channel to receive output messages from the Cumulocity IoT server. The client will receive the messages in succeeding connect requests.

    Each REST API that uses the real-time notification service has its own format for channel names. See [Device control](#tag/Device-control-notification-API) for more details.

    ### Request example

    ```http
    POST /notification/realtime
    Authorization: <AUTHORIZATION>
    Content-Type: application/json

    [
      {
        "channel": "/meta/subscribe",
        "clientId": "69wzith4teyensmz6zyk516um4yum0mvp",
        "subscription": "/alarms/<DEVICE_ID>"
      }
    ]
    ```

    ### Response example

    ```json
    [
      {
        "channel": "/meta/subscribe",
        "clientId": "69wzith4teyensmz6zyk516um4yum0mvp",
        "subscription": "/alarms/<DEVICE_ID>",
        "successful": true
      }
    ]
    ```

    ## Unsubscribe

    To stop receiving notifications from a channel, send a message to the channel `/meta/unsubscribe` in the same format as used during subscription.

    ### Request example

    Example Request:

    ```http
    POST /notification/realtime
    Authorization: <AUTHORIZATION>
    Content-Type: application/json

    [
      {
        "channel": "/meta/unsubscribe",
        "clientId": "69wzith4teyensmz6zyk516um4yum0mvp",
        "subscription": "/alarms/<DEVICE_ID>"
      }
    ]
    ```

    ### Response example

    ```json
    [
      {
        "channel": "/meta/unsubscribe",
        "subscription": "/alarms/<DEVICE_ID>",
        "successful": true
      }
    ]
    ```

    ## Connect

    After a Bayeux client has discovered the server's capabilities with a handshake exchange and subscribed to the desired channels, a connection is established by sending a message to the `/meta/connect` channel. This message may be transported over any of the transports returned by the server in the handshake response. Requests to the connect channel must be immediately repeated after every response to receive the next batch of notifications.

    ### Request example

    ```http
    POST /notification/realtime
    Authorization: <AUTHORIZATION>
    Content-Type: application/json

    [
      {
        "channel": "/meta/connect",
        "clientId": "69wzith4teyensmz6zyk516um4yum0mvp",
        "connectionType": "long-polling",
        "advice": {
          "timeout": 5400000,
          "interval": 3000
        }
      }
    ]
    ```

    ### Response example

    ```json
    [
      {
        "channel": "/meta/connect",
        "data": null,
        "advice": {
          "interval": 3000,
          "timeout": 5400000
        },
        "successful": true
      }
    ]
    ```

    ## Disconnect

    To stop receiving notifications from all channels and close the conversation, send a message to the `/meta/disconnect` channel.

    ### Request example

    ```http
    POST /notification/realtime
    Authorization: <AUTHORIZATION>
    Content-Type: application/json

    [
      {
        "channel": "/meta/disconnect",
        "clientId": "69wzith4teyensmz6zyk516um4yum0mvp"
      }
    ]
    ```

    ### Response example

    ```json
    [
      {
        "channel": "/meta/disconnect",
        "successful": true
      }
    ]
    ```
  name: Real-time notification API
- description: "The notification 2.0 API resource returns URIs and URI templates to\
    \ collections of notifications, so that all notifications or notifications of\
    \ a specified context and/or source device can be retrieved. See [Notifications\
    \ 2.0](https://cumulocity.com/guides/reference/notifications) in the *Reference\
    \ guide* for more details about the API and the consumer protocol."
  name: Notification 2.0 API
  x-codegen-ignore: true
- description: "In order to receive subscribed notifications, a consumer application\
    \ or microservice must obtain an authorization token that provides proof that\
    \ the holder is allowed to receive subscribed notifications."
  name: Tokens
- description: "Methods to create, retrieve and delete notification subscriptions."
  name: Subscriptions
- description: |
    It is possible to define rules that make the platform remove certain data. A retention rule shows which data will be deleted. For example, a retention rule with `dataType=EVENT` and `maximumAge=30` removes from the system all events older than 30 days.

    > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: Retention rules
- description: "The tenant API resource returns URIs and URI templates to collections\
    \ of tenants, so that all tenants can be filtered and retrieved."
  name: Tenant API
  x-codegen-ignore: true
- description: |
    Tenants are physically separated data spaces with a separate URL, with own users, a separate application management and no sharing of data by default. Users in a single tenant by default share the same URL and the same data space.

    ### Tenant ID and tenant domain

    The **tenant ID** is a unique identifier across all tenants in Cumulocity IoT and it follows the format t&lt;number>, for example, t07007007. It is possible to specify the tenant ID while creating a subtenant, but the ID cannot be changed after creation. If the ID is not specified (recommended), it gets auto-generated for all tenant types.

    The location where a tenant can be accessed is called **tenant domain**, for example, _mytenant.cumulocity.com_. It needs to be unique across all tenants and it can be changed after tenant creation.
    The tenant domain may contain only lowercase letters, digits and hyphens. It must start with a lowercase letter, hyphens are only allowed in the middle, and the minimum length is 2 characters. Note that the usage of underscore characters is deprecated but still possible for backward compatibility reasons.

    In general, the tenant domain should be used for communication if it is known.

    > **⚠️ Important:** For support user access, the tenant ID must be used and not the tenant domain.

    See [Tenant > Current tenant](#operation/getCurrentTenantResource) for information on how to retrieve the tenant ID and domain of the current tenant via the API.

    In the UI, the tenant ID is displayed in the user dropdown menu, see [Getting started > User options and settings](https://cumulocity.com/guides/users-guide/getting-started/#user-settings) in the User guide.

    ### Access rights and permissions

    There are two types of roles in Cumulocity IoT – global and inventory. Global roles are applied at the tenant level. In a Role Based Access Control (RBAC) approach you must use the inventory roles in order to have the correct level of separation. Apart from some global permissions (like "own user management") customer users will not be assigned any roles. Inventory roles must be created, or the default roles used, and then assigned to the user in combination with the assets the roles apply to. This needs to be done at least once for each customer.

    In a multi-tenancy approach, as the tenant is completely separated from all other customers you do not necessarily need to be involved in setting up the access rights of the customer. If customers are given administration rights for their tenants, they can set up permissions on their own. It is not possible for customers to have any sight or knowledge of other customers.

    In the RBAC approach, managing access is the most complicated part because a misconfiguration can potentially give customers access to data that they must not see, like other customers' data. The inventory roles allow you to granularly define access for only certain parts of data, but they don't protect you from accidental misconfigurations. A limitation here is that customers won't be able to create their own roles.

    For more details, see [RBAC versus multi-tenancy approach](https://cumulocity.com/guides/concepts/tenant-hierarchy/#comparison).

    > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: Tenants
- description: |
    References to the tenant subscribed applications.
    > **&#9432; Info:** The Accept header should be provided in all POST requests, otherwise an empty response body will be returned.
  name: Tenant applications
- description: |
    API methods for managing trusted certificates used to establish device connections via MQTT.

    More detailed information about trusted certificates and their role can be found in [Device management > Managing device data](https://cumulocity.com/guides/users-guide/device-management/#managing-device-data) in the *User guide*.

    > **&#9432; Info:** The Accept header must be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: Trusted certificates
- description: |
    Device statistics are collected for each inventory object with at least one measurement, event or alarm. There are no additional checks if the inventory object is marked as device using the `c8y_IsDevice` fragment. When the first measurement, event or alarm is created for a specific inventory object, Cumulocity IoT is always considering this as a device and starts counting.

    Device statistics are counted with daily and monthy rate. All requests are considered when counting device statistics, no matter which processing mode is used.

    The following requests are counted:

    * Alarm creation and update
    * Event creation and update
    * Measurement creation
    * Bulk measurement creation is counted as multiple requests
    * Bulk alarm status update is counted as multiple requests
    * MQTT and SmartREST requests with multiple rows are counted as multiple requests

    ### Frequently asked questions

    #### Are operations on device firmware counted?

    **No**, device configuration and firmware update operate on inventory objects, hence they are not counted.

    #### Are requests done by the UI applications, for example, when browsing device details, counted?

    **No**, viewing device details performs only GET requests which are not counted.

    #### Is the clear alarm operation done from the UI counted?

    **Yes**, a clear alarm operation in fact performs an alarm update operation and it will be counted as device request.

    #### Is there any operation performed on the device which is counted?

    **Yes**, retrieving device logs requires from the device to create an event and attach a binary with logs to it. Those are two separate requests and both are counted.

    #### When I have a device with children are the requests counted always to the root device or separately for each child?

    Separately for each child.
  name: Device statistics
- description: "Days are counted according to server timezone, so be aware that the\
    \ tenant usage statistics displaying/filtering may not work correctly when the\
    \ client is not in the same timezone as the server. However, it is possible to\
    \ send a request with a time range (using the query parameters `dateFrom` and\
    \ `dateTo`) in zoned format (for example, `2020-10-26T03:00:00%2B01:00`). Statistics\
    \ from past days are stored with daily aggregations, which means that for a specific\
    \ day you get either the statistics for the whole day or none at all.\n\n### Request\
    \ counting in SmartREST and MQTT\n\n* SmartREST: Each row in a SmartREST request\
    \ is transformed into a separate HTTP request. For example, if one SmartREST request\
    \ contains 10 rows, then 10 separate calls are executed, meaning that request\
    \ count is increased by 10.\n* MQTT: Each row/line counts as a separate request.\
    \ Creating custom template counts as a single request.\n\n### REST specific counting\
    \ details\n\n* All counters increase also when the request is invalid, for example,\
    \ wrong payload or missing permissions.\n* Bulk measurements creation and bulk\
    \ alarm status update are counted as a single \"requestCount\"/\"deviceRequestCount\"\
    \ and multiple inbound data transfer count.\n\n### SmartREST 1.0 specific counting\
    \ details\n\n* Invalid SmartREST requests are not counted, for example, when the\
    \ template doesn't exist.\n* A new template registration is treated as two separate\
    \ requests. Create a new inventory object which increases \"requestCount\", \"\
    deviceRequestCount\" and \"inventoriesCreatedCount\". There is also a second request\
    \ which binds the template with X-ID, this increases \"requestCount\" and \"deviceRequestCount\"\
    .\n* Each row in a SmartREST request is transformed into a separate HTTP request.\
    \ For example, if one SmartREST request contains 10 rows, then 10 separate calls\
    \ are executed, meaning that both \"requestCount\" and \"deviceRequestCount\"\
    \ are increased by 10.\n\n### MQTT specific counting details\n\n* Invalid requests\
    \ are counted, for example, when sending a message with a wrong template ID.\n\
    * Device creation request and automatic device creation are counted.\n* Each row/line\
    \ counts as a separate request.\n* Creating a custom template counts as a single\
    \ request, no matter how many rows are sent in the request.\n* There is one special\
    \ SmartREST 2.0 template (402 Create location update event with device update)\
    \ which is doing two things in one call, that is, create a new location event\
    \ and update the location of the device. It is counted as two separate requests.\n\
    \n### JSON via MQTT specific counting details\n\n* Invalid requests are counted,\
    \ for example, when the message payload is invalid.\n* Bulk creation requests\
    \ are counted as a single \"requestCount\"/\"deviceRequestCount\" and multiple\
    \ inbound data transfer count.\n* Bulk creation requests with a wrong payload\
    \ are not counted for inbound data transfer count.\n\n### Total inbound data transfer\n\
    \nInbound data transfer refers to the total number of inbound requests performed\
    \ to transfer data into the Cumulocity IoT platform. This includes sensor readings,\
    \ alarms, events, commands and alike that are transferred between devices and\
    \ the Cumulocity IoT platform using the REST and/or MQTT interfaces. Such an inbound\
    \ request could also originate from a custom microservice, website or any other\
    \ client.\n\nSee the table below for more information on how the counters are\
    \ increased. Additionally, it shows how inbound data transfers are handled for\
    \ both MQTT and REST:\n\n|Type of transfer|MQTT counter information|REST counter\
    \ information|\n|:---------------|:-----------------------|:-----------------------|\n\
    |Creation of an **alarm** in one request|One alarm creation is counted.|One alarm\
    \ creation is counted via REST.|\n|Update of an **alarm** (for example, status\
    \ change)|One alarm update is counted.|One alarm update is counted via REST.|\n\
    |Creation of **multiple alarms** in one request|Each alarm creation in a single\
    \ MQTT request will be counted.|Not supported by C8Y (REST does not support creating\
    \ multiple alarms in one call).|\n|Update of **multiple alarms** (for example,\
    \ status change) in one request|Each alarm update in a single MQTT request will\
    \ be counted.|Each alarm that matches the filter is counted as an alarm update\
    \ (causing multiple updates).|\n|Creation of an **event** in one request|One event\
    \ creation is counted.|One event creation is counted.|\n|Update of an **event**\
    \ (for example, text change)|One event update is counted.|One event update is\
    \ counted.|\n|Creation of **multiple events** in one request|Each event creation\
    \ in a single MQTT request will be counted.|Not supported by C8Y (REST does not\
    \ support creating multiple events in one call).|\n|Update of **multiple events**\
    \ (for example, text change) in one request|Each event update in a single MQTT\
    \ request will be counted.|Not supported by C8Y (REST does not support updating\
    \ multiple events in one call).|\n|Creation of a **measurement** in one request|One\
    \ measurement creation is counted. |One measurement creation is counted.|\n|Creation\
    \ of **multiple measurements** in one request|Each measurement creation in a single\
    \ MQTT request will be counted. Example: If MQTT is used to report 5 measurements,\
    \ the measurementCreated counter will be incremented by five.|REST allows multiple\
    \ measurements to be created by sending multiple measurements in one call. In\
    \ this case, each measurement sent via REST is counted individually. The call\
    \ itself is not counted. For example, if somebody sends 5 measurements via REST\
    \ in one call, the corresponding counter will be increased by 5. Measurements\
    \ with multiple series are counted as a singular measurement.|\n|Creation of a\
    \ **managed object** in one request|One managed object creation is counted.|One\
    \ managed object creation is counted.|\n|Update of one **managed object** (for\
    \ example, status change)|One managed object update is counted.|One managed object\
    \ update is counted.|\n|Update of **multiple managed objects** in one request|Each\
    \ managed object update in a single MQTT request will be counted.|Not supported\
    \ by C8Y (REST does not support updating multiple managed objects in one call).|\n\
    |Creation/update of **multiple alarms/measurements/events/inventories** mixed\
    \ in a single call.|Each MQTT line is processed separately. If it is a creation/update\
    \ of an event/alarm/measurement/inventory, the corresponding counter is increased\
    \ by one.|Not supported by the REST API.|\n|Assign/unassign of **child devices\
    \ and child assets** in one request|One managed object update is counted.|One\
    \ managed object update is counted.|\n\n### Microservice usage statistics\n\n\
    The microservice usage statistics gathers information on the resource usage for\
    \ tenants for each subscribed application which are collected on a daily base.\n\
    \nThe microservice usage's information is stored in the `resources` object.\n\n\
    ### Frequently asked questions\n\n#### Which requests are counted as general \"\
    requestCount\"?\n\nAll requests which the platform receives are counted, including,for\
    \ example, UI requests, microservices requests, device requests and agents requests.\
    \ Only a few internal endpoints are not counted:\n* `/health` (and all endpoints\
    \ including this URI fragment, like `/tenant/health`)\n* `/application/currentApplication`\
    \ (and all subresources, like `/application/currentApplication/subscriptions`)\n\
    * `/tenant/limit`\n* `/devicecontrol/deviceCredentials`\n* `/inventory/templates`\
    \ (and all subresources)\n\n#### My devices are not sending any data, but \"requestCount\"\
    \ is increasing, and the total number is really big. Why is this happening?\n\n\
    Not only device requests are counted. Every user interaction with UI applications\
    \ generates some requests to the backend API. Additionally you may have subscribed\
    \ standard or custom microservices, which also regularly send requests to the\
    \ platform.\n\nExample: If you have four microservices and each microservice sends\
    \ five requests per minute, this setup creates `4 * 5 * 60 * 24 = 28800` requests\
    \ per day. Similar numbers arise if there are multiple users working with the\
    \ given tenant UI concurrently. \n\n#### Which requests are counted as \"deviceRequestCount\"\
    ?\n\nAll requests from \"requestCount\" except the following:\n\n* Tenant API\
    \ requests\n* Application API requests\n* User API requests\n* Requests with the\
    \ proper HTTP header `X-Cumulocity-Application-Key`, matching the application\
    \ key of one of the applications used by a particular tenant \n\nThe exclusion\
    \ of the APIs in the list above means that requests to endpoints which start with\
    \ the mentioned API prefixes are not counted. For example, for the Tenant API\
    \ the following endpoints are not counted (the list is incomplete):\n* `/tenant/tenants`\n\
    * `/tenant/currentTenant`\n* `/tenant/statistics`\n* `/tenant/options`\n\n> **&#9432;\
    \ Info:** Each microservice and web application must include the `X-Cumulocity-Application-Key`\
    \ header in all requests.\n> Otherwise such requests are counted as device requests\
    \ which incorrectly affects the \"deviceRequestCount\" usage metric.\n"
  name: Usage statistics
- description: |
    API methods to retrieve the options configured in the tenant.

    > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  name: Options
- description: |
    API methods to retrieve the login options configured in the tenant.

    More detailed information about the parameters and their meaning can be found in [Administration > Changing settings](https://cumulocity.com/guides/users-guide/administration/#changing-settings) in the *Users guide*.
    > **&#9432; Info:** If OAuth external is the only login option shown in the response, the user will be automatically redirected to the SSO login screen.
  name: Login options
- description: API methods to obtain access tokens to the Cumulocity IoT platform
    in case of OAI-Secure or SSO authentication.
  name: Login tokens
- description: |
    API methods to retrieve the read-only properties predefined in the platform's configuration.

    For security reasons, a few system options are considered secured, which means the user must have the required role **ROLE_OPTION_MANAGEMENT_ADMIN** to read their values.

    List of options:

    |         Category          | Key                           | Considered as secured |
    |:-------------------------:|:------------------------------|:----------------------|
    |         password          | green.min-length              | yes                   |
    | two-factor-authentication | pin.validity                  | yes                   |
    | two-factor-authentication | token.length                  | yes                   |
    | two-factor-authentication | token.validity                | yes                   |
    |      authentication       | badRequestCounter             | yes                   |
    |           files           | microservice.zipped.max.size  | yes                   |
    |           files           | microservice.unzipped.max.size| yes                   |
    |           files           | webapp.zipped.max.size        | yes                   |
    |           files           | webapp.unzipped.max.size      | yes                   |
    | two-factor-authentication | enforced                      | no                    |
    |       reportMailer        | available                     | no                    |
    |          system           | version                       | no                    |
    |          plugin           | eventprocessing.enabled       | no                    |
    |         password          | limit.validity                | no                    |
    |         password          | enforce.strength              | no                    |
    | two-factor-authentication | strategy                      | no                    |
    | two-factor-authentication | pin.length                    | no                    |
    | two-factor-authentication | enabled                       | no                    |
    | two-factor-authentication | enforced.group                | no                    |
    | two-factor-authentication | tenant-scope-settings.enabled | no                    |
    | two-factor-authentication | logout-on-browser-termination | no                    |
    |       connectivity        | microservice.url              | no                    |
    |       support-user        | enabled                       | no                    |
    |          support          | url                           | no                    |
    |         trackers          | supported.models              | no                    |
    |         encoding          | test                          | no                    |
    |        data-broker        | bootstrap.period              | no                    |
    |           files           | max.size                      | no                    |
    |      device-control       | bulkoperation.creationramp    | no                    |
    |         gainsight         | api.key                       | no                    |
    |            cep            | deprecation.alarm             | no                    |
    |       remoteaccess        | pass-through.enabled          | no                    |
    |    device-registration    | security-token.policy         | no                    |
  name: System options
- description: "To discover the URIs of the various interfaces of Cumulocity IoT,\
    \ a platform interface is provided. This interface aggregates all the underlying\
    \ API resources."
  name: Platform API
  x-codegen-ignore: true
paths:
  /platform:
    get:
      description: Retrieve URIs and URI templates to collections of platform objects.
      operationId: getPlatformApiResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.platformapi+json:
              schema:
                $ref: '#/components/schemas/PlatformApiResource'
          description: The request has succeeded and the URIs are sent in the response.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve URIs to collection platform objects
      tags:
      - Platform API
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/platform" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/platform");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/platform")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/platform")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/platform"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /alarm:
    get:
      description: |
        Retrieve URIs and URI templates to collections of alarms.

        <section><h5>Required roles</h5>
        ROLE_ALARM_READ
        </section>
      operationId: getAlarmsApiResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.alarmapi+json:
              schema:
                $ref: '#/components/schemas/alarmsApiResource'
          description: The request has succeeded and the URIs are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve URIs to collections of alarms
      tags:
      - Alarm API
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/alarm" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/alarm");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/alarm")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/alarm")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/alarm"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /alarm/alarms:
    delete:
      description: |
        Remove alarm collections specified by query parameters.

        > **⚠️ Important:** Note that it is possible to call this endpoint without providing any parameter - it will result in deleting all alarms and it is not recommended.
        > Also note that DELETE requests are not synchronous. The response could be returned before the delete request has been completed.

        <section><h5>Required roles</h5>
        ROLE_ALARM_ADMIN
        </section>
      operationId: deleteAlarmCollectionResource
      parameters:
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      - description: Start date or date and time of the alarm creation.
        explode: true
        in: query
        name: createdFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the alarm creation.
        explode: true
        in: query
        name: createdTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: Start date or date and time of the alarm occurrence.
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the alarm occurrence.
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: "When set to `true` only alarms with status CLEARED will be fetched,\
          \ whereas `false` will fetch all alarms with status ACTIVE or ACKNOWLEDGED."
        explode: true
        in: query
        name: resolved
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: |
          The severity of the alarm to search for.
          >**&#9432; Info:** If you query for multiple alarm severities at once, comma-separate the values.
        explode: false
        in: query
        name: severity
        required: false
        schema:
          enum:
          - CRITICAL
          - MAJOR
          - MINOR
          - WARNING
          example:
          - CRITICAL
          - MAJOR
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: The managed object ID to which the alarm is associated.
        explode: true
        in: query
        name: source
        required: false
        schema:
          example: "251994"
          minLength: 1
          type: string
        style: form
      - description: |
          The status of the alarm to search for.
          >**&#9432; Info:** If you query for multiple alarm statuses at once, comma-separate the values.
        explode: false
        in: query
        name: status
        required: false
        schema:
          enum:
          - ACTIVE
          - ACKNOWLEDGED
          - CLEARED
          example:
          - ACTIVE
          - ACKNOWLEDGED
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: |
          The types of alarm to search for.
          >**&#9432; Info:** If you query for multiple alarm types at once, comma-separate the values. Space characters in alarm types must be escaped.
        explode: false
        in: query
        name: type
        required: false
        schema:
          example:
          - c8y_UnavailabilityAlarm
          - c8y_TemperatureAlarm
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: When set to `true` also alarms for related source assets will
          be included in the request. When this parameter is provided a `source` must
          be specified.
        explode: true
        in: query
        name: withSourceAssets
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: When set to `true` also alarms for related source devices will
          be included in the request. When this parameter is provided a `source` must
          be specified.
        explode: true
        in: query
        name: withSourceDevices
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "204":
          description: A collection of alarms was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove alarm collections
      tags:
      - Alarms
      x-codegen-resource-name: deleteAlarms
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/alarm/alarms?resolved=true&source=<managedObjectId>" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/alarm/alarms?resolved=true&source=<managedObjectId>");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/alarm/alarms?resolved=true&source=<managedObjectId>")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/alarm/alarms?resolved=true&source=<managedObjectId>")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/alarm/alarms?resolved=true&source=<managedObjectId>"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve all alarms on your tenant, or a specific subset based on queries. The results are sorted by the newest alarms first.

        #### Query parameters

        The query parameter `withTotalPages` only works when the user has the ROLE_ALARM_READ role, otherwise it is ignored.

        <section><h5>Required roles</h5>
        The role ROLE_ALARM_READ is not required, but if a user has this role, all the alarms on the tenant are returned. If a user has access to alarms through inventory roles, only those alarms are returned.
        </section>
      operationId: getAlarmCollectionResource
      parameters:
      - description: Start date or date and time of the alarm creation.
        explode: true
        in: query
        name: createdFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the alarm creation.
        explode: true
        in: query
        name: createdTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: Start date or date and time of the alarm occurrence.
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the alarm occurrence.
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: Start date or date and time of the last update made.
        explode: true
        in: query
        name: lastUpdatedFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the last update made.
        explode: true
        in: query
        name: lastUpdatedTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true` only alarms with status CLEARED will be fetched,\
          \ whereas `false` will fetch all alarms with status ACTIVE or ACKNOWLEDGED."
        explode: true
        in: query
        name: resolved
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: |
          The severity of the alarm to search for.
          >**&#9432; Info:** If you query for multiple alarm severities at once, comma-separate the values.
        explode: false
        in: query
        name: severity
        required: false
        schema:
          enum:
          - CRITICAL
          - MAJOR
          - MINOR
          - WARNING
          example:
          - CRITICAL
          - MAJOR
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: The managed object ID to which the alarm is associated.
        explode: true
        in: query
        name: source
        required: false
        schema:
          example: "251994"
          minLength: 1
          type: string
        style: form
      - description: |
          The status of the alarm to search for.
          >**&#9432; Info:** If you query for multiple alarm statuses at once, comma-separate the values.
        explode: false
        in: query
        name: status
        required: false
        schema:
          enum:
          - ACTIVE
          - ACKNOWLEDGED
          - CLEARED
          example:
          - ACTIVE
          - ACKNOWLEDGED
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: |
          The types of alarm to search for.
          >**&#9432; Info:** If you query for multiple alarm types at once, comma-separate the values. Space characters in alarm types must be escaped.
        explode: false
        in: query
        name: type
        required: false
        schema:
          example:
          - c8y_UnavailabilityAlarm
          - c8y_TemperatureAlarm
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: When set to `true` also alarms for related source assets will
          be included in the request. When this parameter is provided a `source` must
          be specified.
        explode: true
        in: query
        name: withSourceAssets
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: When set to `true` also alarms for related source devices will
          be included in the request. When this parameter is provided a `source` must
          be specified.
        explode: true
        in: query
        name: withSourceDevices
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.alarmcollection+json:
              schema:
                $ref: '#/components/schemas/AlarmCollection'
          description: The request has succeeded and all alarms are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all alarms
      tags:
      - Alarms
      x-codegen-resource-name: getAlarms
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/alarm/alarms" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/alarm/alarms");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/alarm/alarms")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/alarm/alarms")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/alarm/alarms"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        An alarm must be associated with a source (managed object) identified by ID.<br>
        In general, each alarm may consist of:

        *   A status showing whether the alarm is ACTIVE, ACKNOWLEDGED or CLEARED.
        *   A time stamp to indicate when the alarm was last updated.
        *   The severity of the alarm: CRITICAL, MAJOR, MINOR or WARNING.
        *   A history of changes to the event in form of audit logs.

        ### Alarm suppression

        If the source device is in maintenance mode, the alarm is not created and not reported to the Cumulocity IoT event processing engine. When sending a POST request to create a new alarm and if the source device is in maintenance mode, the self link of the alarm will be:

        ```json
        "self": "https://<TENANT_DOMAIN>/alarm/alarms/null"
        ```

        ### Alarm de-duplication

        If an ACTIVE or ACKNOWLEDGED alarm with the same source and type exists, no new alarm is created.
        Instead, the existing alarm is updated by incrementing the `count` property; the `time` property is also updated.
        Any other changes are ignored, and the alarm history is not updated. Alarms with status CLEARED are not de-duplicated.
        The first occurrence of the alarm is recorded in the `firstOccurrenceTime` property.

        <section><h5>Required roles</h5>
        ROLE_ALARM_ADMIN <b>OR</b> owner of the source <b>OR</b> ALARM_ADMIN permission on the source
        </section>
      operationId: postAlarmCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.alarm+json:
            example:
              source:
                id: "251982"
              type: c8y_UnavailabilityAlarm
              text: No data received from the device within the required interval.
              severity: MAJOR
              status: ACTIVE
              time: 2020-03-19T12:03:27.845Z
            schema:
              $ref: '#/components/schemas/postAlarmCollectionResource_request'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.alarm+json:
              schema:
                $ref: '#/components/schemas/alarm'
          description: An alarm was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create an alarm
      tags:
      - Alarms
      x-codegen-resource-name: createAlarm
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/alarm/alarms" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/alarm/alarms");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/alarm/alarms")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/alarm/alarms")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/alarm/alarms"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
    put:
      description: |
        Update alarm collections specified by query parameters. At least one query parameter is required to avoid accidentally updating all existing alarms.<br>
        Currently, only the status of alarms can be modified.

        > **&#9432; Info:** Since this operation can take considerable time, the request returns after maximum 0.5 seconds of processing, and the update operation continues as a background process in the platform.

        <section><h5>Required roles</h5>
        ROLE_ALARM_ADMIN
        </section>
      operationId: putAlarmCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      - description: Start date or date and time of the alarm creation.
        explode: true
        in: query
        name: createdFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the alarm creation.
        explode: true
        in: query
        name: createdTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: Start date or date and time of the alarm occurrence.
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the alarm occurrence.
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: "When set to `true` only alarms with status CLEARED will be fetched,\
          \ whereas `false` will fetch all alarms with status ACTIVE or ACKNOWLEDGED."
        explode: true
        in: query
        name: resolved
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: |
          The severity of the alarm to search for.
          >**&#9432; Info:** If you query for multiple alarm severities at once, comma-separate the values.
        explode: false
        in: query
        name: severity
        required: false
        schema:
          enum:
          - CRITICAL
          - MAJOR
          - MINOR
          - WARNING
          example:
          - CRITICAL
          - MAJOR
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: The managed object ID to which the alarm is associated.
        explode: true
        in: query
        name: source
        required: false
        schema:
          example: "251994"
          minLength: 1
          type: string
        style: form
      - description: |
          The status of the alarm to search for.
          >**&#9432; Info:** If you query for multiple alarm statuses at once, comma-separate the values.
        explode: false
        in: query
        name: status
        required: false
        schema:
          enum:
          - ACTIVE
          - ACKNOWLEDGED
          - CLEARED
          example:
          - ACTIVE
          - ACKNOWLEDGED
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: When set to `true` also alarms for related source assets will
          be included in the request. When this parameter is provided a `source` must
          be specified.
        explode: true
        in: query
        name: withSourceAssets
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: When set to `true` also alarms for related source devices will
          be included in the request. When this parameter is provided a `source` must
          be specified.
        explode: true
        in: query
        name: withSourceDevices
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.alarm+json:
            example:
              status: CLEARED
            schema:
              $ref: '#/components/schemas/putAlarmCollectionResource_request'
        required: true
      responses:
        "200":
          description: An alarm collection was updated.
        "202":
          description: An alarm collection is being updated in background.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update alarm collections
      tags:
      - Alarms
      x-codegen-resource-name: updateAlarms
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/alarm/alarms?resolved=false&source=<managedObjectId>" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/alarm/alarms?resolved=false&source=<managedObjectId>");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/alarm/alarms?resolved=false&source=<managedObjectId>")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/alarm/alarms?resolved=false&source=<managedObjectId>")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/alarm/alarms?resolved=false&source=<managedObjectId>"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /alarm/alarms/{id}:
    get:
      description: |
        Retrieve a specific alarm by a given ID.

        <section><h5>Required roles</h5>
        ROLE_ALARM_READ <b>OR</b> owner of the source <b>OR</b> ALARM_READ permission on the source
        </section>
      operationId: getAlarmResource
      parameters:
      - description: Unique identifier of the alarm.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.alarm+json:
              schema:
                $ref: '#/components/schemas/alarm'
          description: The request has succeeded and the alarm is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: alarm/Not Found
                message: Finding alarm from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Alarm not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific alarm
      tags:
      - Alarms
      x-codegen-resource-name: getAlarm
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/alarm/alarms/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/alarm/alarms/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/alarm/alarms/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/alarm/alarms/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/alarm/alarms/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update a specific alarm by a given ID.
        Only text, status, severity and custom properties can be modified. A request will be rejected when non-modifiable properties are provided in the request body.

        > **&#9432; Info:** Changes to alarms will generate a new audit record. The audit record will include the username and application that triggered the update, if applicable. If the update operation doesn’t change anything (that is, the request body contains data that is identical to the already present in the database), there will be no audit record added and no notifications will be sent.

        <section><h5>Required roles</h5>
        ROLE_ALARM_ADMIN <b>OR</b> owner of the source <b>OR</b> ALARM_ADMIN permission on the source
        </section>
      operationId: putAlarmResource
      parameters:
      - description: Unique identifier of the alarm.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.alarm+json:
            example:
              severity: MAJOR
              status: ACTIVE
              text: No data received from the device within the required interval.
            schema:
              $ref: '#/components/schemas/putAlarmResource_request'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.alarm+json:
              schema:
                $ref: '#/components/schemas/alarm'
          description: An alarm was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: alarm/Not Found
                message: Finding alarm from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Alarm not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a specific alarm
      tags:
      - Alarms
      x-codegen-resource-name: updateAlarm
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/alarm/alarms/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/alarm/alarms/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/alarm/alarms/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/alarm/alarms/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/alarm/alarms/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /alarm/alarms/count:
    get:
      description: |
        Count the total number of active alarms on your tenant.

        <section><h5>Required roles</h5>
        The role ROLE_ALARM_READ is not required, but if a user has this role, all the alarms on the tenant are counted. Otherwise, inventory role permissions are used to count the alarms and the limit is 100.
        </section>
      operationId: getAlarmCollectionCountResource
      parameters:
      - description: Start date or date and time of the alarm occurrence.
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the alarm occurrence.
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: "When set to `true` only alarms with status CLEARED will be fetched,\
          \ whereas `false` will fetch all alarms with status ACTIVE or ACKNOWLEDGED."
        explode: true
        in: query
        name: resolved
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: |
          The severity of the alarm to search for.
          >**&#9432; Info:** If you query for multiple alarm severities at once, comma-separate the values.
        explode: false
        in: query
        name: severity
        required: false
        schema:
          enum:
          - CRITICAL
          - MAJOR
          - MINOR
          - WARNING
          example:
          - CRITICAL
          - MAJOR
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: The managed object ID to which the alarm is associated.
        explode: true
        in: query
        name: source
        required: false
        schema:
          example: "251994"
          minLength: 1
          type: string
        style: form
      - description: |
          The status of the alarm to search for.
          >**&#9432; Info:** If you query for multiple alarm statuses at once, comma-separate the values.
        explode: false
        in: query
        name: status
        required: false
        schema:
          enum:
          - ACTIVE
          - ACKNOWLEDGED
          - CLEARED
          example:
          - ACTIVE
          - ACKNOWLEDGED
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: |
          The types of alarm to search for.
          >**&#9432; Info:** If you query for multiple alarm types at once, comma-separate the values. Space characters in alarm types must be escaped.
        explode: false
        in: query
        name: type
        required: false
        schema:
          example:
          - c8y_UnavailabilityAlarm
          - c8y_TemperatureAlarm
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: When set to `true` also alarms for related source assets will
          be included in the request. When this parameter is provided a `source` must
          be specified.
        explode: true
        in: query
        name: withSourceAssets
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: When set to `true` also alarms for related source devices will
          be included in the request. When this parameter is provided a `source` must
          be specified.
        explode: true
        in: query
        name: withSourceDevices
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            text/plain, application/json:
              schema:
                example: 38
                minimum: 0
                type: integer
          description: The request has succeeded and the number of active alarms is
            sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve the total number of alarms
      tags:
      - Alarms
      x-codegen-resource-name: getNumberOfAlarms
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/alarm/alarms/count" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/alarm/alarms/count");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/alarm/alarms/count")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/alarm/alarms/count")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/alarm/alarms/count"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /devicecontrol:
    get:
      description: |
        Retrieve URIs to collections of operations.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_READ
        </section>
      operationId: getDeviceControlApiResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.devicecontrolapi+json:
              schema:
                $ref: '#/components/schemas/deviceControlApiResource'
          description: The request has succeeded and the URIs are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve URIs to collections of operations
      tags:
      - Device control API
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/devicecontrol" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/devicecontrol")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/devicecontrol")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/devicecontrol"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /devicecontrol/operations:
    delete:
      description: |
        Delete a list of operations.

        The DELETE method allows for deletion of operation collections.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_ADMIN
        </section>
      operationId: deleteOperationCollectionResource
      parameters:
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      - description: An agent ID that may be part of the operation.
        explode: true
        in: query
        name: agentId
        required: false
        schema:
          example: simulator_145074_1
          minLength: 1
          type: string
        style: form
      - description: Start date or date and time of the operation.
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the operation.
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: The ID of the device the operation is performed for.
        explode: true
        in: query
        name: deviceId
        required: false
        schema:
          example: "1234"
          minLength: 1
          type: string
        style: form
      - description: Status of the operation.
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - SUCCESSFUL
          - FAILED
          - EXECUTING
          - PENDING
          example: FAILED
          type: string
        style: form
      responses:
        "204":
          description: A list of operations was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Delete a list of operations
      tags:
      - Operations
      x-codegen-resource-name: deleteOperations
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/devicecontrol/operations?status=PENDING" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/operations?status=PENDING");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/devicecontrol/operations?status=PENDING")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/devicecontrol/operations?status=PENDING")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/devicecontrol/operations?status=PENDING"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a list of operations.

        Notes about operation collections:

        * The embedded operation object contains `deviceExternalIDs` only when queried with an `agentId` parameter.
        * The embedded operation object is filled with `deviceName`, but only when requesting resource: Get a collection of operations.
        * Operations are returned in the order of their ascending IDs.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_READ
        </section>
      operationId: getOperationCollectionResource
      parameters:
      - description: "An agent ID that may be part of the operation. If this parameter\
          \ is set, the operation response objects contain the `deviceExternalIDs`\
          \ object."
        explode: true
        in: query
        name: agentId
        required: false
        schema:
          example: simulator_145074_1
          minLength: 1
          type: string
        style: form
      - description: The bulk operation ID that this operation belongs to.
        explode: true
        in: query
        name: bulkOperationId
        required: false
        schema:
          example: "1237"
          minLength: 1
          type: string
        style: form
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: Start date or date and time of the operation.
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the operation.
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: The ID of the device the operation is performed for.
        explode: true
        in: query
        name: deviceId
        required: false
        schema:
          example: "1234"
          minLength: 1
          type: string
        style: form
      - description: The type of fragment that must be part of the operation.
        explode: true
        in: query
        name: fragmentType
        required: false
        schema:
          example: com_cumulocity_model_WebCamDevice
          minLength: 1
          type: string
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: |
          If you are using a range query (that is, at least one of the `dateFrom` or `dateTo` parameters is included in the request), then setting `revert=true` will sort the results by the newest operations first.
          By default, the results are sorted by the oldest operations first.
        explode: true
        in: query
        name: revert
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: Status of the operation.
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - SUCCESSFUL
          - FAILED
          - EXECUTING
          - PENDING
          example: FAILED
          type: string
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.operationcollection+json:
              schema:
                $ref: '#/components/schemas/OperationCollection'
          description: The request has succeeded and the list of operations is sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a list of operations
      tags:
      - Operations
      x-codegen-resource-name: getOperations
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/devicecontrol/operations" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/operations");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/devicecontrol/operations")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/devicecontrol/operations")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/devicecontrol/operations"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Create an operation.

        It is possible to add custom fragments to operations, for example `com_cumulocity_model_WebCamDevice` is a custom object of the webcam operation.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_ADMIN <b>OR</b> owner of the device <b>OR</b> ADMIN permissions on the device
        </section>
      operationId: postOperationCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.operation+json:
            example:
              deviceId: "1234"
              com_cumulocity_model_WebCamDevice:
                name: Take a picture
                parameters:
                  duration: 5s
                  quality: HD
            schema:
              $ref: '#/components/schemas/postOperationCollectionResource_request'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.operation+json:
              schema:
                $ref: '#/components/schemas/operation'
          description: An operation was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create an operation
      tags:
      - Operations
      x-codegen-resource-name: createOperation
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/devicecontrol/operations" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
          --data-raw '<Payload>',
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/operations");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>", ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/devicecontrol/operations")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/devicecontrol/operations")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/devicecontrol/operations"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers = headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /devicecontrol/operations/{id}:
    get:
      description: |
        Retrieve a specific operation (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_READ <b>OR</b> owner of the resource <b>OR</b> ADMIN permission on the device
        </section>
      operationId: getOperationResource
      parameters:
      - description: Unique identifier of the operation.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "123"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.operation+json:
              schema:
                $ref: '#/components/schemas/operation'
          description: The request has succeeded and the operation is sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: devicecontrol/Not Found
                message: "Finding device data from database failed : No operation\
                  \ for gid '123'!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Operation not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific operation
      tags:
      - Operations
      x-codegen-resource-name: getOperation
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/devicecontrol/operations/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/operations/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/devicecontrol/operations/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/devicecontrol/operations/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/devicecontrol/operations/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update a specific operation (by a given ID).
        You can only update its status.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_ADMIN <b>OR</b> owner of the resource <b>OR</b> ADMIN permission on the device
        </section>
      operationId: putOperationResource
      parameters:
      - description: Unique identifier of the operation.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "123"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.operation+json:
            example:
              status: FAILED
            schema:
              $ref: '#/components/schemas/putOperationResource_request'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.operation+json:
              schema:
                $ref: '#/components/schemas/operation'
          description: An operation was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: devicecontrol/Not Found
                message: "Finding device data from database failed : No operation\
                  \ for gid '123'!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Operation not found.
        "422":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: undefined/validationError
                message: "Following mandatory fields should be included: status"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Validation error.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a specific operation status
      tags:
      - Operations
      x-codegen-resource-name: updateOperation
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/devicecontrol/operations/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/operations/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/devicecontrol/operations/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/devicecontrol/operations/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/devicecontrol/operations/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /devicecontrol/newDeviceRequests:
    get:
      description: |
        Retrieve a list of new device requests.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_READ
        </section>
      operationId: getNewDeviceRequestCollectionResource
      parameters:
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.newdevicerequestcollection+json:
              schema:
                $ref: '#/components/schemas/NewDeviceRequestCollection'
          description: The request has succeeded and the list of new device requests
            sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a list of new device requests
      tags:
      - New device requests
      x-codegen-resource-name: getNewDeviceRequests
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Create a new device request.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_ADMIN
        </section>
      operationId: postNewDeviceRequestCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.newdevicerequest+json:
            example:
              id: "54545454"
            schema:
              $ref: '#/components/schemas/postNewDeviceRequestCollectionResource_request'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.newdevicerequest+json:
              schema:
                $ref: '#/components/schemas/newDeviceRequest'
          description: A new device request was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create a new device request
      tags:
      - New device requests
      x-codegen-resource-name: createNewDeviceRequest
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: multipart/form-data" \
          --data-binary app-binary.zip
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Content-Type", "multipart/form-data");
          request.AddParameter("application/json", "<Payload>", ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Accept", "application/json")
              .header("Content-Type", "multipart/form-data")
              .body("<Payload>")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "multipart/form-data"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "multipart/form-data"
          }
          files = {'file' : open('app-binary.zip', 'rb')}
          response = requests.request("POST", url, headers=headers, files = files)
          print(response.text.encode("utf8"))
  /devicecontrol/newDeviceRequests/{requestId}:
    delete:
      description: |
        Delete a specific new device request (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      operationId: deleteNewDeviceRequestResource
      parameters:
      - description: Unique identifier of the new device request.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          example: "54545454"
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: A new device request was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: devicecontrol/Not Found
                message: Could not find newDeviceRequest by ID 54545454
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: New device request not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Delete a specific new device request
      tags:
      - New device requests
      x-codegen-resource-name: deleteNewDeviceRequest
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific new device request (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_READ
        </section>
      operationId: getNewDeviceRequestResource
      parameters:
      - description: Unique identifier of the new device request.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          example: "54545454"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.newdevicerequest+json:
              schema:
                $ref: '#/components/schemas/newDeviceRequest'
          description: The request has succeeded and the new device request is sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: devicecontrol/Not Found
                message: Could not find newDeviceRequest by ID 54545454
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: New device request not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific new device request
      tags:
      - New device requests
      x-codegen-resource-name: getNewDeviceRequest
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update a specific new device request (by a given ID).
        You can only update its status.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_ADMIN
        </section>
      operationId: putNewDeviceRequestResource
      parameters:
      - description: Unique identifier of the new device request.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          example: "54545454"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.newdevicerequest+json:
            example:
              status: WAITING_FOR_CONNECTION
            schema:
              $ref: '#/components/schemas/putNewDeviceRequestResource_request'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.newdevicerequest+json:
              schema:
                $ref: '#/components/schemas/newDeviceRequest'
          description: A new device request was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: devicecontrol/Not Found
                message: Could not find newDeviceRequest by ID 54545454
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: New device request not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a specific new device request status
      tags:
      - New device requests
      x-codegen-resource-name: updateNewDeviceRequest
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /devicecontrol/deviceCredentials:
    post:
      description: |
        Create device credentials.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_BOOTSTRAP
        </section>
      operationId: postDeviceCredentialsCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.devicecredentials+json:
            example:
              id: "129129"
            schema:
              $ref: '#/components/schemas/postDeviceCredentialsCollectionResource_request'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.devicecredentials+json:
              schema:
                $ref: '#/components/schemas/deviceCredentials'
          description: Device credentials were created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create device credentials
      tags:
      - Device credentials
      x-codegen-resource-name: createDeviceCredentials
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/devicecontrol/deviceCredentials" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
          --data-raw '<Payload>',
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/deviceCredentials");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>", ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/devicecontrol/deviceCredentials")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/devicecontrol/deviceCredentials")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/devicecontrol/deviceCredentials"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers = headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /devicecontrol/bulkNewDeviceRequests:
    post:
      description: |
        Create a bulk device credentials request.

        Device credentials and basic device representation can be provided within a CSV file which must be UTF-8 or ANSI encoded. The CSV file must have two sections.

        The first section is the first line of the CSV file. This line contains column names (headers):

        |Name|Mandatory|Description|
        |--- |--- |--- |
        |ID|Yes|The external ID of a device.|
        |CREDENTIALS|Yes*|Password for the device's user. Mandatory, unless AUTH_TYPE is "CERTIFICATES", then CREDENTIALS can be skipped.|
        |AUTH_TYPE|No|Required authentication type for the device's user. If the device uses credentials, this can be skipped or filled with "BASIC". Devices that use certificates must set "CERTIFICATES".|
        |TENANT|No|The ID of the tenant for which the registration is executed (only allowed for the management tenant).|
        |TYPE|No|The type of the device representation.|
        |NAME|No|The name of the device representation.|
        |ICCID|No|The ICCID of the device (SIM card number). If the ICCID appears in file, the import adds a fragment `c8y_Mobile.iccid`. The ICCID value is not mandatory for each row, see the example for an HTTP request below.|
        |IDTYPE|No|The type of the external ID. If IDTYPE doesn't appear in the file, the default value is used. The default value is `c8y_Serial`. The IDTYPE value is not mandatory for each row, see the example for an HTTP request below.|
        |PATH|No|The path in the groups hierarchy where the device is added. PATH contains the name of each group separated by `/`, that is: `main_group/sub_group/.../last_sub_group`. If a group does not exist, the import creates the group.|
        |SHELL|No|If this column contains a value of 1, the import adds the SHELL feature to the device (specifically the `c8y_SupportedOperations` fragment). The SHELL value is not mandatory for each row, see the example for an HTTP request below.|

        Section two is the rest of the CSV file. Section two contains the device information. The order and quantity of the values must be the same as of the headers.

        A separator is automatically obtained from the CSV file. Valid separator values are: `\t` (tabulation mark), `;` (semicolon) and `,` (comma).

        > **⚠️ Important:** The CSV file needs the "com_cumulocity_model_Agent.active" header with a value of "true" to be added to the request.

        > **&#9432; Info:** A bulk registration creates an elementary representation of the device. Then, the device needs to update it to a full representation with its own status. The device is ready to use only after it is updated to the full representation. Also see [credentials upload](https://cumulocity.com/guides/users-guide/device-management/#creds-upload) and [device integration](https://cumulocity.com/guides/device-sdk/rest/#device-integration).

        A CSV file can appear in many forms (with regard to the optional tenant column and the occurrence of device information):

        * If a user is logged in as the management tenant, then the columns ID, CREDENTIALS and TENANT are mandatory, and the device credentials will be created for the tenant mentioned in the TENANT column.
        * If a user is logged in as a different tenant, for example, as `sample_tenant`, then the columns ID and CREDENTIALS are mandatory (if the file contains the TENANT column, it is ignored and the device credentials will be created for the tenant that is logged in).
        * If a user wants to add information about the device, the columns TYPE and NAME must appear in the CSV file.
        * If a user wants to add information about a SIM card number, the columns TYPE, NAME and ICCID must appear in the CSV file.
        * If a user wants to change the type of external ID, the columns TYPE, NAME and IDTYPE must appear in the CSV file.
        * If a user wants to add a device to a group, the columns TYPE, NAME and PATH must appear in the CSV file.
        * If a user wants to add the SHELL feature, the columns TYPE, NAME and SHELL must appear in the CSV file and the column SHELL must contain a value of 1.

        It is possible to define a custom [external ID](#tag/External-IDs) mapping and some custom device properties which are added to newly created devices during registration:

        * To add a custom external ID mapping, enter the external ID type as the header of the last column with the prefix "external-", for example, to add an external ID mapping of type `c8y_Imei`, enter `external-c8y_Imei` in the last column header. The value of this external ID type should be set in the corresponding column of the data rows.
        * To add a custom property to a registered device, enter the custom property name as a header, for example, "myCustomProperty", and the value would be in the rows below.

        The custom device properties mapping has the following limitations:

        * Braces '{}' used in data rows will be interpreted as strings of "{}". The system will interpret the value as an object when some custom property is added, for example, put `com_cumulocity_model_Agent.active` into the headers row and `true` into the data row to create an object `"com_cumulocity_model_Agent": {"active": "true"}"`.
        * It is not possible to add array values via bulk registration.

        Example file:

        ```csv
        ID;CREDENTIALS;TYPE;NAME;ICCID;IDTYPE;PATH;SHELL
        id_101;AbcD1234!1234AbcD;type_of_device;Device 101;111111111;;csv device/subgroup0;1
        id_102;AbcD1234!1234AbcD;type_of_device;Device 102;222222222;;csv device/subgroup0;0
        id_111;AbcD1234!1234AbcD;type_of_device;Device 111;333333333;c8y_Imei;csv device1/subgroup1;0
        id_112;AbcD1234!1234AbcD;type_of_device;Device 112;444444444;;csv device1/subgroup1;1
        id_121;AbcD1234!1234AbcD;type_of_device;Device 121;555555555;;csv device1/subgroup2;1
        id_122;AbcD1234!1234AbcD;type_of_device;Device 122;;;csv device1/subgroup2;
        id_131;AbcD1234!1234AbcD;type_of_device;Device 131;;;csv device1/subgroup3;
        ```

        There is also a simple registration method that creates all registration requests at once, then each one needs to go through regular acceptance.
        This simple registration only makes use of the ID and PATH fields from the list above.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_ADMIN
        </section>
      operationId: postBulkNewDeviceRequestCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            encoding:
              file:
                contentType: text/csv
                style: form
            schema:
              $ref: '#/components/schemas/postBulkNewDeviceRequestCollectionResource_request'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.bulknewdevicerequest+json:
              schema:
                $ref: '#/components/schemas/bulkNewDeviceRequest'
          description: A bulk of new device requests was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create a bulk device credentials request
      tags:
      - Device credentials
      x-codegen-resource-name: createBulkDeviceCredentials
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/devicecontrol/bulkNewDeviceRequests" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --form "file=@bulk_credential_request.csv"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/bulkNewDeviceRequests");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Accept", "application/json");
          request.AddFile("file", "bulk_credential_request.csv");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/devicecontrol/bulkNewDeviceRequests")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Accept", "application/json")
              .field("file", new File("bulk_credential_request.csv"))
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/devicecontrol/bulkNewDeviceRequests")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json"
              })
              .attach("file", "bulk_credential_request.csv")
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/devicecontrol/bulkNewDeviceRequests"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json"
          }
          files = [("file", open("bulk_credential_request.csv", "rb"))]

          response = requests.request("POST", url, headers = headers, files = files)
          print(response.text.encode("utf8"))
  /devicecontrol/bulkoperations:
    get:
      description: |
        Retrieve a list of bulk operations.

        <section><h5>Required roles</h5>
        ROLE_BULK_OPERATION_READ
        </section>
      operationId: getBulkOperationCollectionResource
      parameters:
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.bulkoperationcollection+json:
              schema:
                $ref: '#/components/schemas/BulkOperationCollection'
          description: The request has succeeded and the list of bulk operations sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a list of bulk operations
      tags:
      - Bulk operations
      x-codegen-resource-name: getBulkOperations
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Create a bulk operation.

        <section><h5>Required roles</h5>
        ROLE_BULK_OPERATION_ADMIN
        </section>
      operationId: postBulkOperationCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.bulkoperation+json:
            example:
              creationRamp: 15
              groupId: "12359"
              operationPrototype:
                description: Restart device
                c8y_Restart: {}
              startDate: 2022-05-01T22:21:22
            schema:
              $ref: '#/components/schemas/bulkOperation'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.bulkoperation+json:
              schema:
                $ref: '#/components/schemas/bulkOperation'
          description: A bulk operation was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create a bulk operation
      tags:
      - Bulk operations
      x-codegen-resource-name: createBulkOperation
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
          --data-raw '<Payload>',
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>", ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers = headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /devicecontrol/bulkoperations/{id}:
    delete:
      description: |
        Delete a specific bulk operation (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_BULK_OPERATION_ADMIN
        </section>
      operationId: deleteBulkOperationResource
      parameters:
      - description: Unique identifier of the bulk operation.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "1237"
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      responses:
        "204":
          description: A bulk operation was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: devicecontrol/Not Found
                message: "Finding bulk operation from database failed : Cannot find\
                  \ document with ID ID [type=com_cumulocity_model_idtype_GId, value=1237]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Bulk operation not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Delete a specific bulk operation
      tags:
      - Bulk operations
      x-codegen-resource-name: deleteBulkOperation
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific bulk operation (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_BULK_OPERATION_READ
        </section>
      operationId: getBulkOperationResource
      parameters:
      - description: Unique identifier of the bulk operation.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "1237"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.bulkoperation+json:
              schema:
                $ref: '#/components/schemas/bulkOperation'
          description: The request has succeeded and the bulk operation is sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: devicecontrol/Not Found
                message: "Finding bulk operation from database failed : Cannot find\
                  \ document with ID ID [type=com_cumulocity_model_idtype_GId, value=1237]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Bulk operation not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific bulk operation
      tags:
      - Bulk operations
      x-codegen-resource-name: getBulkOperation
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update a specific bulk operation (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_BULK_OPERATION_ADMIN
        </section>
      operationId: putBulkOperationResource
      parameters:
      - description: Unique identifier of the bulk operation.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "1237"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.bulkoperation+json:
            example:
              creationRamp: 15
            schema:
              $ref: '#/components/schemas/bulkOperation'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.bulkoperation+json:
              schema:
                $ref: '#/components/schemas/bulkOperation'
          description: A bulk operation was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: devicecontrol/Not Found
                message: "Finding bulk operation from database failed : Cannot find\
                  \ document with ID ID [type=com_cumulocity_model_idtype_GId, value=1237]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Bulk operation not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a specific bulk operation
      tags:
      - Bulk operations
      x-codegen-resource-name: updateBulkOperation
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /application:
    get:
      description: |
        Retrieve URIs and URI templates to collections of applications.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ
        </section>
      operationId: getApplicationManagementApiResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.applicationapi+json:
              schema:
                $ref: '#/components/schemas/ApplicationApiResource'
          description: The request has succeeded and and the URIs are sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve URIs to collections of applications
      tags:
      - Application API
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /application/applications:
    get:
      description: |
        Retrieve all applications on your tenant.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ
        </section>
      operationId: getAbstractApplicationCollectionResource
      parameters:
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: The name of the application.
        explode: true
        in: query
        name: name
        required: false
        schema:
          example: devicemanagement
          minLength: 1
          type: string
        style: form
      - description: The ID of the tenant that owns the applications.
        explode: true
        in: query
        name: owner
        required: false
        schema:
          example: management
          minLength: 1
          type: string
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: The ID of a tenant that is subscribed to the applications but
          doesn't own them.
        explode: true
        in: query
        name: providedFor
        required: false
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: form
      - description: The ID of a tenant that is subscribed to the applications.
        explode: true
        in: query
        name: subscriber
        required: false
        schema:
          example: management
          minLength: 1
          type: string
        style: form
      - description: The ID of a tenant that either owns the application or is subscribed
          to the applications.
        explode: true
        in: query
        name: tenant
        required: false
        schema:
          example: management
          minLength: 1
          type: string
        style: form
      - description: "The type of the application. It is possible to use multiple\
          \ values separated by a comma. For example, `EXTERNAL,HOSTED` will return\
          \ only applications with type `EXTERNAL` or `HOSTED`."
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - EXTERNAL
          - HOSTED
          - MICROSERVICE
          example: HOSTED
          type: string
        style: form
      - description: The ID of a user that has access to the applications.
        explode: true
        in: query
        name: user
        required: false
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result contains applications\
          \ with an `applicationVersions` field that is not empty. When set to `false`,\
          \ the result will contain applications with an empty `applicationVersions`\
          \ field."
        explode: true
        in: query
        name: hasVersions
        required: false
        schema:
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.applicationcollection+json:
              schema:
                $ref: '#/components/schemas/ApplicationCollection'
          description: The request has succeeded and the list of applications is sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all applications
      tags:
      - Applications
      x-codegen-resource-name: getApplications
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application/applications" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applications")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Create an application on your tenant.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN
        </section>
      operationId: postApplicationCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.application+json:
            example:
              contextPath: myapplication
              key: my-application-key
              name: my-application
              type: HOSTED
            schema:
              $ref: '#/components/schemas/postApplicationCollectionResource_request'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.application+json:
              schema:
                $ref: '#/components/schemas/application'
          description: An application was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "409":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: applications/Duplicate
                message: Application for tenant t07007007 with properties ( name:devicemanagement
                  ) already exists
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Duplicate key/name.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create an application
      tags:
      - Applications
      x-codegen-resource-name: createApplication
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/application/applications" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/application/applications")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/application/applications")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /application/applications/{id}:
    delete:
      description: |
        Delete an application (by a given ID).
        This method is not supported by microservice applications.

        > **&#9432; Info:** With regards to a hosted application, there is a caching mechanism in place that keeps the information about the placement of application files (html, javascript, css, fonts, etc.). Removing a hosted application, in normal circumstances, will cause the subsequent requests for application files to fail with an HTTP 404 error because the application is removed synchronously, its files are immediately removed on the node serving the request and at the same time the information is propagated to other nodes – but in rare cases there might be a delay with this propagation. In such situations, the files of the removed application can be served from those nodes up until the aforementioned cache expires. For the same reason, the cache can also cause HTTP 404 errors when the application is updated as it will keep the path to the files of the old version of the application. The cache is filled on demand, so there should not be issues if application files were not accessed prior to the delete request. The expiration delay of the cache can differ, but should not take more than one minute.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN <b>AND</b> tenant is the owner of the application
        </section>
      operationId: deleteApplicationResource
      parameters:
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      - description: Force deletion by unsubscribing all tenants from the application
          first and then deleting the application itself.
        explode: true
        in: query
        name: force
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      responses:
        "204":
          description: An application was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: applications/Not Found
                message: Could not find application by ID 20200301
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Application not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Delete an application
      tags:
      - Applications
      x-codegen-resource-name: deleteApplication
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/application/applications/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/application/applications/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/application/applications/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers = headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific application (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ <b>OR</b> current user has explicit access to the application
        </section>
      operationId: getApplicationResource
      parameters:
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.application+json:
              schema:
                $ref: '#/components/schemas/application'
          description: The request has succeeded and the application is sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: applications/Not Found
                message: Could not find application by ID 20200301
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Application not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific application
      tags:
      - Applications
      x-codegen-resource-name: getApplication
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application/applications/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applications/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update a specific application (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      operationId: putApplicationResource
      parameters:
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.application+json:
            example:
              name: my-application
              availability: PRIVATE
            schema:
              $ref: '#/components/schemas/putApplicationResource_request'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.application+json:
              schema:
                $ref: '#/components/schemas/application'
          description: An application was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: applications/Not Found
                message: Could not find application by ID 20200301
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Application not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a specific application
      tags:
      - Applications
      x-codegen-resource-name: updateApplication
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/application/applications/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/application/applications/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/application/applications/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /application/applications/{id}/binaries:
    get:
      description: |
        Retrieve all application attachments.
        This method is not supported by microservice applications.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN
        </section>
      operationId: getBinaryApplicationContentResource
      parameters:
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.applicationbinaries+json:
              schema:
                $ref: '#/components/schemas/ApplicationBinaries'
          description: The request has succeeded and the application attachments are
            sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: applications/Not Found
                message: Could not find application by ID 20200301
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Application not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all application attachments
      tags:
      - Application binaries
      x-codegen-resource-name: getApplicationAttachments
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application/applications/{id}/binaries" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/binaries");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications/{id}/binaries")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applications/{id}/binaries")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications/{id}/binaries"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Upload an application attachment (by a given application ID).

        For the applications of type “microservice” and “web application” to be available for Cumulocity IoT platform users, an attachment ZIP file must be uploaded.

        For a microservice application, the ZIP file must consist of:

        * cumulocity.json - file describing the deployment
        * image.tar - executable Docker image

        For a web application, the ZIP file must include an index.html file in the root directory.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN <b>AND</b> tenant is the owner of the application
        </section>
      operationId: postBinaryApplicationContentResource
      parameters:
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            encoding:
              file:
                contentType: application/zip
                style: form
            schema:
              $ref: '#/components/schemas/postBinaryApplicationContentResource_request'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.application+json:
              schema:
                $ref: '#/components/schemas/application'
          description: The application attachments have been uploaded.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Upload an application attachment
      tags:
      - Application binaries
      x-codegen-resource-name: uploadApplicationAttachment
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/application/applications/{id}/binaries" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --form "file=@app-binary.zip"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/binaries");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Accept", "application/json");
          request.AddFile("file", "app-binary.zip");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/application/applications/{id}/binaries")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Accept", "application/json")
              .field("file", new File("app-binary.zip"))
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/application/applications/{id}/binaries")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json"
              })
              .attach("file", "app-binary.zip")
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications/{id}/binaries"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json"
          }
          files = [("file", open("app-binary.zip", "rb"))]
          response = requests.request("POST", url, headers=headers, files = files)
          print(response.text.encode("utf8"))
  /application/applications/{id}/versions?version=1.0:
    get:
      description: |-
        Retrieve the selected version of an application in your tenant. To select the version, use only the version or only the tag query parameter.
        <section><h5>Required roles</h5> ROLE_APPLICATION_MANAGEMENT_READ </section>
      operationId: getApplicationVersionResource
      parameters:
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      - description: The header is required to access this endpoint.
        explode: false
        in: header
        name: Accept
        required: true
        schema:
          enum:
          - application/vnd.com.nsn.cumulocity.applicationVersion+json
          - application/vnd.com.nsn.cumulocity.applicationVersionCollection+json
          example: application/vnd.com.nsn.cumulocity.applicationVersion+json
          type: string
        style: simple
      - description: The version field of the application version.
        explode: true
        in: query
        name: version
        required: false
        schema:
          example: "1"
          minLength: 1
          type: string
        style: form
      - description: The tag of the application version.
        explode: true
        in: query
        name: tag
        required: false
        schema:
          example: tag1
          minLength: 1
          type: string
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.applicationVersion+json:
              schema:
                $ref: '#/components/schemas/ApplicationVersion'
          description: The request has succeeded and the application version is sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: applications/Not Found
                message: Could not find application by ID 20200301
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Application not found.
        "422":
          description: both parameters (version and tag) are present.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific version of an application
      tags:
      - Application versions
      x-codegen-resource-name: getApplicationVersion
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0" \
          --header "Authorization: Basic <AUTHORIZATION>"
          --header 'Accept: application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Accept", "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9");
          request.AlwaysMultipartFormData = true;

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Accept", "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /application/applications/{id}/versions:
    delete:
      description: |
        Delete a specific version of an application in your tenant, by a given tag or version.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ
        </section>
      operationId: deleteApplicationVersionResource
      parameters:
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      - description: The version field of the application version.
        explode: true
        in: query
        name: version
        required: false
        schema:
          example: "1"
          minLength: 1
          type: string
        style: form
      - description: The tag of the application version.
        explode: true
        in: query
        name: tag
        required: false
        schema:
          example: tag1
          minLength: 1
          type: string
        style: form
      responses:
        "204":
          description: A version was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: applications/Not Found
                message: Cannot find application version for this application
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Application version not found.
        "409":
          description: Version with tag latest cannot be removed.
        "422":
          description: both parameters (version and tag) are present.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Delete a specific version of an application
      tags:
      - Application versions
      x-codegen-resource-name: deleteApplicationVersion
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AlwaysMultipartFormData = true;

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers = headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve all versions of an application in your tenant.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ
        </section>
      operationId: getApplicationVersionCollectionResource
      parameters:
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.applicationVersionCollection+json:
              schema:
                $ref: '#/components/schemas/ApplicationVersionCollection'
          description: The request has succeeded and the list of application versions
            is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: applications/Not Found
                message: Cannot find application version for this application
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Application version not found.
        "422":
          description: This application doesn't support versioning.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all versions of an application
      tags:
      - Application versions
      x-codegen-resource-name: getApplicationVersions
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application/applications/{id}/versions" \
          --header "Authorization: Basic <AUTHORIZATION>"
          --header "Accept: application/vnd.com.nsn.cumulocity.applicationVersionCollection+json;charset=UTF-8;ver=0.9"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/versions");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Accept", "application/vnd.com.nsn.cumulocity.applicationVersionCollection+json;charset=UTF-8;ver=0.9");
          request.AlwaysMultipartFormData = true;

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications/{id}/versions")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Accept", "application/vnd.com.nsn.cumulocity.applicationVersionCollection+json;charset=UTF-8;ver=0.9")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applications/{id}/versions")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/vnd.com.nsn.cumulocity.applicationVersionCollection+json;charset=UTF-8;ver=0.9"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications/{id}/versions"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/vnd.com.nsn.cumulocity.applicationVersionCollection+json;charset=UTF-8;ver=0.9"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Create an application version in your tenant.

        Uploaded version and tags can only contain upper and lower case letters, integers and `.`,` + `,` -`. Other characters are prohibited.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN
        </section>
      operationId: postApplicationVersionResource
      parameters:
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            encoding:
              applicationBinary:
                contentType: application/zip
                style: form
            schema:
              $ref: '#/components/schemas/postApplicationVersionResource_request'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.applicationVersion+json:
              schema:
                $ref: '#/components/schemas/ApplicationVersion'
          description: An application version was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: applications/Not Found
                message: Cannot find application version for this application
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Application version not found.
        "409":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: applications/Duplicate
                message: Version or tag for this application already exists
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Duplicate version/tag or versions limit exceeded.
        "422":
          description: tag or version contains unacceptable characters.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create an application version
      tags:
      - Application versions
      x-codegen-resource-name: createApplicationVersion
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/application/applications/{id}/versions" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9" \
          --form 'applicationVersion="{
          \"version\": \"1.3\",
          \"tags\": [
              \"tag4\"
          ]
          }"' \
          --form 'applicationBinary=@"{{path_to_file}}/app.zip"'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/versions");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Accept", "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9");
          request.AddParameter("applicationVersion", "{
          \"version\": \"1.3\",
          \"tags\": [
              \"tag4\"
          ]
          }");
          request.AddFile("applicationBinary", "{{path_to_file}}/app.zip");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("cumulocity.default.svc.cluster.local/application/applications/{id}/versions")
            .header("Authorization", "Basic <AUTHORIZATION>")
            .header("Accept", "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9")
            .field("applicationVersion", "{
              \"version\": \"1.3\",
              \"tags\": [
                  \"tag4\"
              ]
          }")
            .field("file", new File("{{path_to_file}}/app.zip"))
            .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/application/applications/{id}/versions")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9"
              })
              .field('applicationVersion', '{\n    "version": "1.3",\n    "tags": [\n        "tag4"\n    ]\n}')
              .attach('file', '{{path_to_file}}/app.zip')
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications/{id}/versions"
          payload={'applicationVersion': '{
          "version": "1.3",
          "tags": [
              "tag4"
          ]
          }'}
          files=[
            ('applicationBinary',('app.zip',open('{{path_to_file}}','rb'),'application/zip'))
          ]
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9"
          }
          response = requests.request("POST", url, headers=headers, data=payload, files=files)
          print(response.text.encode("utf8"))
  /application/applications/{id}/versions/{version}:
    put:
      description: |
        Replaces the tags of a given application version in your tenant.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN
        </section>
      operationId: putApplicationVersionResource
      parameters:
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      - description: Version of the application.
        explode: false
        in: path
        name: version
        required: true
        schema:
          example: "1.0"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              tag:
              - tag-1
              - latest
            schema:
              $ref: '#/components/schemas/ApplicationVersionTag'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.applicationVersion+json:
              schema:
                $ref: '#/components/schemas/ApplicationVersion'
          description: An application version was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: applications/Not Found
                message: Cannot find application version for this application
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Application version not found.
        "409":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: applications/Duplicate
                message: Version or tag for this application already exists
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Duplicate version/tag or versions limit exceeded.
        "422":
          description: tag contains unacceptable characters.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Replace an application version's tags
      tags:
      - Application versions
      x-codegen-resource-name: updateApplicationVersion
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/application/applications/{id}/versions/{version}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9" \
          --data-raw '{"tags":["tag1"]}'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/versions/{version}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Accept", "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9");
          request.AddParameter("application/json", "{"tags":["tag1"]}",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("cumulocity.default.svc.cluster.local/application/applications/{id}/versions/{version}")
            .header("Authorization", "Basic <AUTHORIZATION>")
            .header("Accept", "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9")
            .body("{"tags":["tag1"]}")
            .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/application/applications/{id}/versions/{version}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9"
              })
              .send(JSON.stringify({"tags":["tag1"]}))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications/{id}/versions/{version}"
          payload = {"tags":["tag1"]}
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9"
          }
          response = requests.request("PUT", url, headers=headers, data=payload)
          print(response.text)
  /application/applications/{id}/binaries/{binaryId}:
    delete:
      description: |
        Delete  a specific application attachment (by a given application ID and a given binary ID).
        This method is not supported by microservice applications.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN <b>AND</b> tenant is the owner of the application
        </section>
      operationId: deleteBinaryApplicationContentResourceById
      parameters:
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the binary.
        explode: false
        in: path
        name: binaryId
        required: true
        schema:
          example: "30303033"
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: An application binary was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Delete a specific application attachment
      tags:
      - Application binaries
      x-codegen-resource-name: deleteApplicationAttachment
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers = headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific application attachment (by a given application ID and a given binary ID).
        This method is not supported by microservice applications.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN
        </section>
      operationId: getBinaryApplicationContentResourceById
      parameters:
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the binary.
        explode: false
        in: path
        name: binaryId
        required: true
        schema:
          example: "30303033"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/zip:
              schema:
                format: binary
                type: string
          description: The request has succeeded and the application attachment is
            sent as a ZIP file in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific application attachment
      tags:
      - Application binaries
      x-codegen-resource-name: getApplicationAttachment
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /application/applications/{id}/bootstrapUser:
    get:
      description: |
        Retrieve the bootstrap user for a specific application (by a given ID).

        This only works for microservice applications.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN
        </section>
      operationId: getApplicationUserRepresentation
      parameters:
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.user+json:
              schema:
                $ref: '#/components/schemas/BootstrapUser'
          description: The request has succeeded and the bootstrap user of the application
            is sent in the response.
        "400":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: applications/Bad Request
                message: Can not get bootstrap user. Application is not a microservice
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Bad request.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve the bootstrap user for a specific application
      tags:
      - Bootstrap user
      x-codegen-resource-name: getBootstrapUser
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application/applications/{id}/bootstrapUser" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/bootstrapUser");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications/{id}/bootstrapUser")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applications/{id}/bootstrapUser")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications/{id}/bootstrapUser"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /application/applications/{id}/clone:
    post:
      description: |
        Copy an application (by a given ID).

        This method is not supported by microservice applications.

        A request to the "clone" resource creates a new application based on an already existing one.

        The properties are copied to the newly created application and the prefix "clone" is added to the properties `name`, `key` and `contextPath` in order to be unique.

        If the target application is hosted and has an active version, the new application will have the active version with the same content.
        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN
        </section>
      operationId: postApplicationResource
      parameters:
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.application+json:
              example:
                availability: PRIVATE
                contextPath: clonemyapplication
                id: "20200369"
                key: clonemy-application-key
                name: clonemy-application
                owner:
                  self: https://<TENANT_DOMAIN>/tenant/tenants/t07007007
                  tenant:
                    id: t07007007
                self: https://<TENANT_DOMAIN>/application/applications/20200369
                type: HOSTED
              schema:
                $ref: '#/components/schemas/application'
          description: An application was copied.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "422":
          description: Unprocessable Entity – method not supported
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Copy an application
      tags:
      - Applications
      x-codegen-resource-name: copyApplication
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/application/applications/{id}/clone" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/clone");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/application/applications/{id}/clone")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/application/applications/{id}/clone")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applications/{id}/clone"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = {})
          print(response.text.encode("utf8"))
  /application/applicationsByName/{name}:
    get:
      description: |
        Retrieve applications by name.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ
        </section>
      operationId: getApplicationsByNameCollectionResource
      parameters:
      - description: The name of the application.
        explode: false
        in: path
        name: name
        required: true
        schema:
          example: my-application
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.applicationcollection+json:
              schema:
                $ref: '#/components/schemas/getApplicationsByNameCollectionResource_200_response'
          description: The request has succeeded and the applications are sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve applications by name
      tags:
      - Applications
      x-codegen-resource-name: getApplicationsByName
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application/applicationsByName/{name}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applicationsByName/{name}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applicationsByName/{name}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applicationsByName/{name}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applicationsByName/{name}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /application/applicationsByTenant/{tenantId}:
    get:
      description: |
        Retrieve applications subscribed or owned by a particular tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ
        </section>
      operationId: getApplicationsByTenantCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.applicationcollection+json:
              schema:
                $ref: '#/components/schemas/getApplicationsByTenantCollectionResource_200_response'
          description: The request has succeeded and the applications are sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve applications by tenant
      tags:
      - Applications
      x-codegen-resource-name: getApplicationsByTenant
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /application/applicationsByOwner/{tenantId}:
    get:
      description: |
        Retrieve all applications owned by a particular tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ
        </section>
      operationId: getApplicationsByOwnerCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.applicationcollection+json:
              schema:
                $ref: '#/components/schemas/getApplicationsByOwnerCollectionResource_200_response'
          description: The request has succeeded and the applications are sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve applications by owner
      tags:
      - Applications
      x-codegen-resource-name: getApplicationsByOwner
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /application/applicationsByUser/{username}:
    get:
      description: |
        Retrieve all applications for a particular user (by a given username).

        <section><h5>Required roles</h5>
        (ROLE_USER_MANAGEMENT_OWN_READ <b>AND</b> is the current user) <b>OR</b> (ROLE_USER_MANAGEMENT_READ <b>AND</b> ROLE_APPLICATION_MANAGEMENT_READ)
        </section>
      operationId: getApplicationsByUserCollectionResource
      parameters:
      - description: The username of the a user.
        explode: false
        in: path
        name: username
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.applicationcollection+json:
              schema:
                $ref: '#/components/schemas/getApplicationsByUserCollectionResource_200_response'
          description: The request has succeeded and the applications are sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve applications by user
      tags:
      - Applications
      x-codegen-resource-name: getApplicationsByUser
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application/applicationsByUser/{username}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/applicationsByUser/{username}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applicationsByUser/{username}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applicationsByUser/{username}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/applicationsByUser/{username}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /application/currentApplication:
    get:
      description: |
        Retrieve the current application.
        This only works inside an application, for example, a microservice.

        <section><h5>Required roles</h5>
        Microservice bootstrap user required.
        </section>
      operationId: getCurrentApplicationResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.application+json:
              schema:
                $ref: '#/components/schemas/application'
          description: The request has succeeded and the current application sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve the current application
      tags:
      - Current application
      x-codegen-resource-name: getCurrentApplication
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application/currentApplication" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/currentApplication");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/currentApplication")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application/currentApplication")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/currentApplication"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    put:
      deprecated: true
      description: |
        Update the current application.
        This only works inside an application, for example, a microservice. This method is deprecated as it is only used by legacy microservices that are not running on Kubernetes.

        <section><h5>Required roles</h5>
        Microservice bootstrap user required.
        </section>
      operationId: putCurrentApplicationResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.application+json:
            example:
              name: my-application
            schema:
              $ref: '#/components/schemas/application'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.application+json:
              schema:
                $ref: '#/components/schemas/application'
          description: The current application was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update the current application
      tags:
      - Current application
      x-codegen-resource-name: updateCurrentApplication
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/application/currentApplication" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/currentApplication");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/application/currentApplication")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/application/currentApplication")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/currentApplication"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /application/currentApplication/settings:
    get:
      description: |
        Retrieve the current application settings.
        This only works inside an application, for example, a microservice.

        <section><h5>Required roles</h5>
        Microservice bootstrap user <b>OR</b> microservice service user required.
        </section>
      operationId: getCurrentApplicationResourceSettings
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.applicationsettings+json:
              schema:
                $ref: '#/components/schemas/application_settings'
          description: The request has succeeded and the current application settings
            are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve the current application settings
      tags:
      - Current application
      x-codegen-resource-name: getCurrentApplicationSettings
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application/currentApplication/settings" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/currentApplication/settings");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/currentApplication/settings")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application/currentApplication/settings")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/currentApplication/settings"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /application/currentApplication/subscriptions:
    get:
      description: |
        Retrieve the subscribed users of the current application.

        <section><h5>Required roles</h5>
        Microservice bootstrap user required.
        </section>
      operationId: getApplicationUserCollectionRepresentation
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.applicationusercollection+json:
              schema:
                $ref: '#/components/schemas/ApplicationUserCollection'
          description: The request has succeeded and the list of subscribed users
            for the current application is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve the subscribed users of the current application
      tags:
      - Current application
      x-codegen-resource-name: getSubscribedUsers
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/application/currentApplication/subscriptions" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/application/currentApplication/subscriptions");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/currentApplication/subscriptions")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/application/currentApplication/subscriptions")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/application/currentApplication/subscriptions"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /audit:
    get:
      description: |
        Retrieve URIs and URI templates to collections of audit records.

        <section><h5>Required roles</h5>
        ROLE_AUDIT_READ
        </section>
      operationId: getAuditApiResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.auditapi+json:
              schema:
                $ref: '#/components/schemas/auditApiResource'
          description: The request has succeeded and the URIs are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve URIs to collections of audits
      tags:
      - Audit API
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/audit" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/audit");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/audit")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/audit")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/audit"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /audit/auditRecords:
    get:
      description: |
        Retrieve all audit records registered on your tenant, or a specific subset based on queries.
      operationId: getAuditRecordCollectionResource
      parameters:
      - description: Name of the application from which the audit was carried out.
        explode: true
        in: query
        name: application
        required: false
        schema:
          example: cockpit
          minLength: 1
          type: string
        style: form
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: Start date or date and time of the audit record.
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the audit record.
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: The platform component ID to which the audit is associated.
        explode: true
        in: query
        name: source
        required: false
        schema:
          example: "251994"
          minLength: 1
          type: string
        style: form
      - description: The type of audit record to search for.
        explode: true
        in: query
        name: type
        required: false
        schema:
          example: Operation
          minLength: 1
          type: string
        style: form
      - description: The username to search for.
        explode: true
        in: query
        name: user
        required: false
        schema:
          example: rina
          minLength: 1
          type: string
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.auditrecordcollection+json:
              schema:
                $ref: '#/components/schemas/AuditRecordCollection'
          description: The request has succeeded and all audit records are sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all audit records
      tags:
      - Audits
      x-codegen-resource-name: getAuditRecords
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/audit/auditRecords" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/audit/auditRecords");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/audit/auditRecords")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/audit/auditRecords")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/audit/auditRecords"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Create an audit record.

        <section><h5>Required roles</h5>
        ROLE_AUDIT_ADMIN <b>OR</b> ROLE_SYSTEM <b>OR</b> AUDIT_ADMIN permission on the resource
        </section>
      operationId: postAuditRecordCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.auditrecord+json:
            example:
              activity: Operation created
              source:
                id: "251982"
              text: "Operation created: status='PENDING'"
              time: 2020-03-19T12:03:27.845Z
              type: Operation
              user: rina
            schema:
              $ref: '#/components/schemas/auditRecord'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.auditrecord+json:
              schema:
                $ref: '#/components/schemas/auditRecord'
          description: An audit record was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create an audit record
      tags:
      - Audits
      x-codegen-resource-name: createAuditRecord
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/audit/auditRecords" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/audit/auditRecords");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/audit/auditRecords")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/audit/auditRecords")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/audit/auditRecords"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /audit/auditRecords/{id}:
    get:
      description: |
        Retrieve a specific audit record by a given ID.

        <section><h5>Required roles</h5>
        ROLE_AUDIT_READ <b>OR</b> AUDIT_READ permission on the source
        </section>
      operationId: getAuditRecordResource
      parameters:
      - description: Unique identifier of the audit record.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "100423189"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.auditrecord+json:
              schema:
                $ref: '#/components/schemas/auditRecord'
          description: The request has succeeded and the audit record is sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific audit record
      tags:
      - Audits
      x-codegen-resource-name: getAuditRecord
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/audit/auditRecords/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/audit/auditRecords/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/audit/auditRecords/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/audit/auditRecords/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/audit/auditRecords/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /event:
    get:
      description: |
        Retrieve URIs and URI templates to collections of events.

        <section><h5>Required roles</h5>
        ROLE_EVENT_READ
        </section>
      operationId: getEventsApiResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.eventapi+json:
              schema:
                $ref: '#/components/schemas/eventsApiResource'
          description: The request has succeeded and the URIs are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve URIs to collections of events
      tags:
      - Event API
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/event" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/event");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/event")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/event")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/event"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /event/events:
    delete:
      description: |
        Remove event collections specified by query parameters.

        DELETE requests are not synchronous. The response could be returned before the delete request has been completed. This may happen especially when the deleted event has a lot of associated data. After sending the request, the platform starts deleting the associated data in an asynchronous way. Finally, the requested event is deleted after all associated data has been deleted.

        > **⚠️ Important:** Note that it is possible to call this endpoint without providing any parameter - it will result in deleting all events and it is not recommended.

        <section><h5>Required roles</h5>
        ROLE_EVENT_ADMIN
        </section>
      operationId: deleteEventCollectionResource
      parameters:
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      - description: Start date or date and time of the event's creation (set by the
          platform during creation).
        explode: true
        in: query
        name: createdFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the event's creation (set by the
          platform during creation).
        explode: true
        in: query
        name: createdTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: Start date or date and time of the event occurrence (provided
          by the device).
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the event occurrence (provided by
          the device).
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: "A characteristic which identifies a managed object or event,\
          \ for example, geolocation, electricity sensor, relay state."
        explode: true
        in: query
        name: fragmentType
        required: false
        schema:
          example: c8y_IsDevice
          minLength: 1
          type: string
        style: form
      - description: The managed object ID to which the event is associated.
        explode: true
        in: query
        name: source
        required: false
        schema:
          example: "251994"
          minLength: 1
          type: string
        style: form
      - description: The type of event to search for.
        explode: true
        in: query
        name: type
        required: false
        schema:
          example: c8y_OutgoingSmsLog
          minLength: 1
          type: string
        style: form
      responses:
        "204":
          description: A collection of events was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove event collections
      tags:
      - Events
      x-codegen-resource-name: deleteEvents
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/event/events?source=<managedObjectId>" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/event/events?source=<managedObjectId>");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/event/events?source=<managedObjectId>")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/event/events?source=<managedObjectId>")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/event/events?source=<managedObjectId>"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve all events on your tenant.

        In case of executing [range queries](https://en.wikipedia.org/wiki/Range_query_(database)) between an upper and lower boundary, for example, querying using `dateFrom`–`dateTo` or `createdFrom`–`createdTo`, the newest registered events are returned first. It is possible to change the order using the query parameter `revert=true`.

        <section><h5>Required roles</h5>
        ROLE_EVENT_READ
        </section>
      operationId: getEventCollectionResource
      parameters:
      - description: Start date or date and time of the event's creation (set by the
          platform during creation).
        explode: true
        in: query
        name: createdFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the event's creation (set by the
          platform during creation).
        explode: true
        in: query
        name: createdTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: Start date or date and time of the event occurrence (provided
          by the device).
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the event occurrence (provided by
          the device).
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: "A characteristic which identifies a managed object or event,\
          \ for example, geolocation, electricity sensor, relay state."
        explode: true
        in: query
        name: fragmentType
        required: false
        schema:
          example: c8y_IsDevice
          minLength: 1
          type: string
        style: form
      - description: |
          Allows filtering events by the fragment's value, but only when provided together with `fragmentType`.

          > **⚠️ Important:** Only fragments with a string value are supported.
        explode: true
        in: query
        name: fragmentValue
        required: false
        schema:
          example: lorem
          minLength: 1
          type: string
        style: form
      - description: Start date or date and time of the last update made.
        explode: true
        in: query
        name: lastUpdatedFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the last update made.
        explode: true
        in: query
        name: lastUpdatedTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: |
          If you are using a range query (that is, at least one of the `dateFrom` or `dateTo` parameters is included in the request), then setting `revert=true` will sort the results by the oldest events first.
          By default, the results are sorted by the newest events first.
        explode: true
        in: query
        name: revert
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: The managed object ID to which the event is associated.
        explode: true
        in: query
        name: source
        required: false
        schema:
          example: "251994"
          minLength: 1
          type: string
        style: form
      - description: The type of event to search for.
        explode: true
        in: query
        name: type
        required: false
        schema:
          example: c8y_OutgoingSmsLog
          minLength: 1
          type: string
        style: form
      - description: When set to `true` also events for related source assets will
          be included in the request. When this parameter is provided a `source` must
          be specified.
        explode: true
        in: query
        name: withSourceAssets
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: When set to `true` also events for related source devices will
          be included in the request. When this parameter is provided a `source` must
          be specified.
        explode: true
        in: query
        name: withSourceDevices
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.eventcollection+json:
              schema:
                $ref: '#/components/schemas/EventCollection'
          description: The request has succeeded and all events are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all events
      tags:
      - Events
      x-codegen-resource-name: getEvents
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/event/events" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/event/events");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/event/events")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/event/events")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/event/events"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        An event must be associated with a source (managed object) identified by an ID.<br>
        In general, each event consists of:

        *  A type to identify the nature of the event.
        *  A time stamp to indicate when the event was last updated.
        *  A description of the event.
        *  The managed object which originated the event.

        <section><h5>Required roles</h5>
        ROLE_EVENT_ADMIN <b>OR</b> owner of the source <b>OR</b> EVENT_ADMIN permission on the source
        </section>
      operationId: postEventCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.event+json:
            example:
              source:
                id: "251982"
              text: "Sms sent: Alarm occurred"
              time: 2020-03-19T12:03:27.845Z
              type: c8y_OutgoingSmsLog
            schema:
              $ref: '#/components/schemas/postEventCollectionResource_request'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.event+json:
              example:
                source:
                  id: "251982"
                  self: https://<TENANT_DOMAIN>/inventory/managedObjects/251982
                text: "Sms sent: Alarm occurred"
                time: 2020-03-19T12:03:27.845Z
                type: c8y_OutgoingSmsLog
                creationTime: 2020-03-19T22:09:06.881+01:00
                lastUpdated: 2020-03-19T22:09:06.881+01:00
                id: "51994"
                self: https://<TENANT_DOMAIN>/event/events/51994
              schema:
                $ref: '#/components/schemas/event'
          description: An event was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create an event
      tags:
      - Events
      x-codegen-resource-name: createEvent
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/event/events" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/event/events");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/event/events")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/event/events")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/event/events"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /event/events/{id}:
    delete:
      description: |
        Remove a specific event by a given ID.

        <section><h5>Required roles</h5>
        ROLE_EVENT_ADMIN <b>OR</b> owner of the source <b>OR</b> EVENT_ADMIN permission on the source
        </section>
      operationId: deleteEventResource
      parameters:
      - description: Unique identifier of the event.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      responses:
        "204":
          description: An event was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: event/Not Found
                message: Finding event from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Event not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a specific event
      tags:
      - Events
      x-codegen-resource-name: deleteEvent
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/event/events/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/event/events/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/event/events/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/event/events/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/event/events/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific event by a given ID.

        <section><h5>Required roles</h5>
        ROLE_EVENT_READ <b>OR</b> owner of the source <b>OR</b> EVENT_READ permission on the source
        </section>
      operationId: getEventResource
      parameters:
      - description: Unique identifier of the event.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.event+json:
              schema:
                $ref: '#/components/schemas/event'
          description: The request has succeeded and the event is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: event/Not Found
                message: Finding event from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Event not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific event
      tags:
      - Events
      x-codegen-resource-name: getEvent
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/event/events/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/event/events/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/event/events/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/event/events/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/event/events/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update a specific event by a given ID. Only its text description and custom fragments can be updated.

        <section><h5>Required roles</h5>
        ROLE_EVENT_ADMIN <b>OR</b> owner of the source <b>OR</b> EVENT_ADMIN permission on the source
        </section>
      operationId: putEventResource
      parameters:
      - description: Unique identifier of the event.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.event+json:
            example:
              text: Location update.
            schema:
              $ref: '#/components/schemas/putEventResource_request'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.event+json:
              schema:
                $ref: '#/components/schemas/event'
          description: An event was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: event/Not Found
                message: Finding event from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Event not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a specific event
      tags:
      - Events
      x-codegen-resource-name: updateEvent
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/event/events/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/event/events/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/event/events/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/event/events/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/event/events/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /event/events/{id}/binaries:
    delete:
      description: |
        Remove the attached file (binary) from a specific event by a given ID.

        <section><h5>Required roles</h5>
        ROLE_EVENT_ADMIN <b>OR</b> owner of the source <b>OR</b> EVENT_ADMIN permission on the source
        </section>
      operationId: deleteEventBinaryResource
      parameters:
      - description: Unique identifier of the event.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: A file was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: event/Not Found
                message: Finding event from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Event not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove the attached file from a specific event
      tags:
      - Attachments
      x-codegen-resource-name: deleteEventAttachment
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/event/events/{id}/binaries" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/event/events/{id}/binaries");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/event/events/{id}/binaries")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/event/events/{id}/binaries")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/event/events/{id}/binaries"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve the attached file (binary) of a specific event by a given ID.

        <section><h5>Required roles</h5>
        ROLE_EVENT_READ <b>OR</b> EVENT_READ permission on the source
        </section>
      operationId: getEventBinaryResource
      parameters:
      - description: Unique identifier of the event.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: The request has succeeded and the file is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: Not Found
                message: Attachment not found
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Attachment not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve the attached file of a specific event
      tags:
      - Attachments
      x-codegen-resource-name: getEventAttachment
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/event/events/{id}/binaries" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/event/events/{id}/binaries");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/event/events/{id}/binaries")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/event/events/{id}/binaries")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/event/events/{id}/binaries"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Upload a file (binary) as an attachment of a specific event by a given ID.
        The size of the attachment is configurable, and the default size is 50 MiB. The default chunk size is 5MiB.

        > **&#9432; Info:** If there is a binary already attached to the event, the POST request results in a 409 error.

        When the file has been uploaded, the corresponding event contains the fragment `c8y_IsBinary` similar to:

        ```json
        "c8y_IsBinary": {
            "name": "hello.txt",
            "length": 365,
            "type": "text/plain"
        }
        ```

        There are two request body schemas you can use for your POST requests.
        `text/plain` is preselected (see below).
        If you set it to `multipart/form-data` each value is sent as a block of data (body part), with a user agent-defined delimiter (`boundary`) separating each part.
        The keys are given in the `Content-Disposition` header of each part.

        ```http
        POST /event/events/{id}/binaries
        Host: https://<TENANT_DOMAIN>
        Authorization: <AUTHORIZATION>
        Accept: application/json
        Content-Type: multipart/form-data;boundary="boundary"

        --boundary
        Content-Disposition: form-data; name="object"

        { "name": "hello.txt", "type": "text/plain" }
        --boundary
        Content-Disposition: form-data; name="file"; filename="hello.txt"
        Content-Type: text/plain

        <FILE_CONTENTS>
        --boundary--
        ```

        <section><h5>Required roles</h5>
        ROLE_EVENT_ADMIN <b>OR</b> owner of the source <b>OR</b> EVENT_ADMIN permission on the source
        </section>
      operationId: postEventBinaryResource
      parameters:
      - description: Unique identifier of the event.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              description: The Content-Type must correspond to the file type.
              format: binary
              type: string
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/postEventBinaryResource_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventBinary'
          description: A file was uploaded.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: event/Not Found
                message: Finding event from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Event not found.
        "409":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: Duplicate
                message: Attachment already exists
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: An attachment exists already.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Attach a file to a specific event
      tags:
      - Attachments
      x-codegen-resource-name: uploadEventAttachment
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/event/events/{id}/binaries" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: text/plain" \
          --data-binary "@/attachment/file.txt"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/event/events/{id}/binaries");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("text/plain", "<file contents here>", ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/event/events/{id}/binaries")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Accept", "application/json")
              .body("<file contents here>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/event/events/{id}/binaries")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "text/plain"
              })
              .send("<file contents here>")
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/event/events/{id}/binaries"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "text/plain"
          }
          response = requests.request("POST", url, headers=headers, data = "<file contents here>")
          print(response.text.encode("utf8"))
    put:
      description: |
        Upload and replace the attached file (binary) of a specific event by a given ID.<br>
        The size of the attachment is configurable, and the default size is 50 MiB. The default chunk size is 5MiB.

        <section><h5>Required roles</h5>
        ROLE_EVENT_ADMIN <b>OR</b> owner of the source <b>OR</b> EVENT_ADMIN permission on the source
        </section>
      operationId: putEventBinaryResource
      parameters:
      - description: Unique identifier of the event.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              format: binary
              type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventBinary'
          description: A file was uploaded.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: event/Not Found
                message: Finding event from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Event not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Replace the attached file of a specific event
      tags:
      - Attachments
      x-codegen-resource-name: replaceEventAttachment
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/event/events/{id}/binaries" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: text/plain" \
          --data-binary "@/attachment/file.txt"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/event/events/{id}/binaries");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("text/plain", "<file contents here>", ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/event/events/{id}/binaries")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Accept", "application/json")
              .body("<file contents here>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/event/events/{id}/binaries")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "text/plain"
              })
              .send("<file contents here>")
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/event/events/{id}/binaries"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "text/plain"
          }
          response = requests.request("PUT", url, headers=headers, data = "<file contents here>")
          print(response.text.encode("utf8"))
  /inventory:
    get:
      description: |
        Retrieve URIs and URI templates to collections of managed objects.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ
        </section>
      operationId: getInventoryApiResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.inventoryapi+json:
              schema:
                $ref: '#/components/schemas/inventoryApiResource'
          description: The request has succeeded and the URIs are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve URIs to collections of managed objects
      tags:
      - Inventory API
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /inventory/binaries:
    get:
      description: |
        Retrieve the stored files as a collections of managed objects.
      operationId: getBinariesCollectionResource
      parameters:
      - description: Search for a specific child addition and list all the groups
          to which it belongs.
        explode: true
        in: query
        name: childAdditionId
        required: false
        schema:
          example: "3003"
          minLength: 1
          type: string
        style: form
      - description: Search for a specific child asset and list all the groups to
          which it belongs.
        explode: true
        in: query
        name: childAssetId
        required: false
        schema:
          example: "200"
          minLength: 1
          type: string
        style: form
      - description: Search for a specific child device and list all the groups to
          which it belongs.
        explode: true
        in: query
        name: childDeviceId
        required: false
        schema:
          example: "2001"
          minLength: 1
          type: string
        style: form
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: |
          The managed object IDs to search for.
          >**&#9432; Info:** If you query for multiple IDs at once, comma-separate the values.
        explode: false
        in: query
        name: ids
        required: false
        schema:
          example:
          - "200"
          - "300"
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: Username of the owner of the managed objects.
        explode: true
        in: query
        name: owner
        required: false
        schema:
          example: manga
          minLength: 1
          type: string
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: Search for managed objects where any property value is equal
          to the given one. Only string values are supported.
        explode: true
        in: query
        name: text
        required: false
        schema:
          example: my_value
          minLength: 1
          type: string
        style: form
      - description: The type of managed object to search for.
        explode: true
        in: query
        name: type
        required: false
        schema:
          example: c8y_DeviceGroup
          minLength: 1
          type: string
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.managedobjectcollection+json:
              schema:
                $ref: '#/components/schemas/BinaryCollection'
          description: The request has succeeded and the managed objects are sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve the stored files
      tags:
      - Binaries
      x-codegen-resource-name: getBinaries
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory/binaries" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/binaries");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/binaries")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/binaries")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/binaries"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Uploading a file (binary) requires providing the following properties:

        * `object` – In JSON format, it contains information about the file.
        * `file` – Contains the file to be uploaded.

        After the file has been uploaded, the corresponding managed object will contain the fragment `c8y_IsBinary`.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_INVENTORY_CREATE
        </section>
      operationId: postBinariesCollectionResource
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/postEventBinaryResource_request'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.managedobject+json:
              schema:
                $ref: '#/components/schemas/binary'
          description: A file was uploaded.
        "400":
          description: Unprocessable Entity – invalid payload.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Upload a file
      tags:
      - Binaries
      x-codegen-resource-name: uploadBinary
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/inventory/binaries" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --form 'object={ "name" : "HelloWorld", "type" : "text/plain" }' \
          --form "file=@hello.txt"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/binaries");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("object", "{ \"name\" : \"HelloWorld\", \"type\" : \"text/plain\" }");
          request.AddFile("file", "hello.txt");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/inventory/binaries")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Accept", "application/json")
              .field("object", "{ \"name\" : \"HelloWorld\", \"type\" : \"text/plain\" }")
              .field("file", new File("hello.txt"))
              .asString();

              System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/inventory/binaries")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json"
              })
              .field("object", '{ "name" : "HelloWorld", "type" : "text/plain" }')
              .attach("file", "hello.txt")
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/binaries"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json"
          }
          payload = { 'object' : '{ "name" : "HelloWorld", "type" : "text/plain" }'}
          files = [("file", open("hello.txt", "rb"))]

          response = requests.request("POST", url, headers= headers, data= payload, files= files)
          print(response.text.encode("utf8"))
  /inventory/binaries/{id}:
    delete:
      description: |
        Remove a managed object and its stored file by a given ID.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> owner of the resource <b>OR</b> MANAGE_OBJECT_ADMIN permission on the resource
        </section>
      operationId: deleteBinariesResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: A managed object and its stored file was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a stored file
      tags:
      - Binaries
      x-codegen-resource-name: removeBinary
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/binaries/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/binaries/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/binaries/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/binaries/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/binaries/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a stored file (managed object) by a given ID.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> owner of the resource <b>OR</b> MANAGE_OBJECT_READ permission on the resource
        </section>
      operationId: getBinariesResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: The request has succeeded and the file is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a stored file
      tags:
      - Binaries
      x-codegen-resource-name: getBinary
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory/binaries/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/binaries/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/binaries/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/binaries/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/binaries/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Upload and replace the attached file (binary) of a specific managed object by a given ID.<br>

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> owner of the resource <b>OR</b> MANAGE_OBJECT_ADMIN permission on the resource
        </section>
      operationId: putBinariesResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              description: The file to be uploaded.
              format: binary
              type: string
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.managedobject+json:
              schema:
                $ref: '#/components/schemas/binary'
          description: A file was uploaded.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Replace a file
      tags:
      - Binaries
      x-codegen-resource-name: replaceBinary
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/inventory/binaries/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: text/plain" \
          --data-binary "@new_hello.txt"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/binaries/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "text/plain");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("text/plain", "<file contents here>", ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/inventory/binaries/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "text/plain")
              .header("Accept", "application/json")
              .body("<file contents here>")
              .asString();

              System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/inventory/binaries/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "text/plain"
              })
              .send("<file contents here>")
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/binaries/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "text/plain"
          }
          files = "<file contents here>"

          response = requests.request("PUT", url, headers= headers, files= files)
          print(response.text.encode("utf8"))
  /inventory/managedObjects:
    get:
      description: |
        Retrieve all managed objects (for example, devices, assets, etc.) registered in your tenant, or a subset based on queries.
      operationId: getManagedObjectCollectionResource
      parameters:
      - description: Search for a specific child addition and list all the groups
          to which it belongs.
        explode: true
        in: query
        name: childAdditionId
        required: false
        schema:
          example: "3003"
          minLength: 1
          type: string
        style: form
      - description: Search for a specific child asset and list all the groups to
          which it belongs.
        explode: true
        in: query
        name: childAssetId
        required: false
        schema:
          example: "200"
          minLength: 1
          type: string
        style: form
      - description: Search for a specific child device and list all the groups to
          which it belongs.
        explode: true
        in: query
        name: childDeviceId
        required: false
        schema:
          example: "2001"
          minLength: 1
          type: string
        style: form
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "A characteristic which identifies a managed object or event,\
          \ for example, geolocation, electricity sensor, relay state."
        explode: true
        in: query
        name: fragmentType
        required: false
        schema:
          example: c8y_IsDevice
          minLength: 1
          type: string
        style: form
      - description: |
          The managed object IDs to search for.
          >**&#9432; Info:** If you query for multiple IDs at once, comma-separate the values.
        explode: false
        in: query
        name: ids
        required: false
        schema:
          example:
          - "200"
          - "300"
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: "When set to `true` it returns managed objects which don't have\
          \ any parent. If the current user doesn't have access to the parent, this\
          \ is also root for the user."
        explode: true
        in: query
        name: onlyRoots
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: Username of the owner of the managed objects.
        explode: true
        in: query
        name: owner
        required: false
        schema:
          example: manga
          minLength: 1
          type: string
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "Similar to the parameter `query`, but it assumes that this is\
          \ a device query request and it adds automatically the search criteria `fragmentType=c8y_IsDevice`."
        explode: true
        in: query
        name: q
        required: false
        schema:
          example: $filter=(owner+eq+'manga')
          minLength: 1
          type: string
        style: form
      - description: "Use query language to perform operations and/or filter the results.\
          \ Details about the properties and supported operations can be found in\
          \ [Query language](#tag/Query-language)."
        explode: true
        in: query
        name: query
        required: false
        schema:
          example: $filter=(owner+eq+'manga')
          minLength: 1
          type: string
        style: form
      - description: "When set to `true`, the returned references of child devices\
          \ won't contain their names."
        explode: true
        in: query
        name: skipChildrenNames
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: Search for managed objects where any property value is equal
          to the given one. Only string values are supported.
        explode: true
        in: query
        name: text
        required: false
        schema:
          example: my_value
          minLength: 1
          type: string
        style: form
      - description: The type of managed object to search for.
        explode: true
        in: query
        name: type
        required: false
        schema:
          example: c8y_DeviceGroup
          minLength: 1
          type: string
        style: form
      - description: Determines if children with ID and name should be returned when
          fetching the managed object. Set it to `false` to improve query performance.
        explode: true
        in: query
        name: withChildren
        required: false
        schema:
          default: true
          example: false
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain the total\
          \ number of children in the respective objects (`childAdditions`, `childAssets`\
          \ and `childDevices`)."
        explode: true
        in: query
        name: withChildrenCount
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: When set to `true` it returns additional information about the
          groups to which the searched managed object belongs. This results in setting
          the `assetParents` property with additional information about the groups.
        explode: true
        in: query
        name: withGroups
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned references of child parents\
          \ will return the device's parents (if any). Otherwise, it will be an empty\
          \ array."
        explode: true
        in: query
        name: withParents
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.managedobjectcollection+json:
              schema:
                $ref: '#/components/schemas/ManagedObjectCollection'
          description: The request has succeeded and the collection of objects is
            sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "422":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Invalid Data
                message: "Find by filter query failed : Query could not be understood."
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Invalid data was sent.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all managed objects
      tags:
      - Managed objects
      x-codegen-resource-name: getManagedObjects
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Create a managed object, for example, a device with temperature measurements support or a binary switch.<br>
        In general, each managed object may consist of:

        *  A unique identifier that references the object.
        *  The name of the object.
        *  The most specific type of the managed object.
        *  A time stamp showing the last update.
        *  Fragments with specific meanings, for example, `c8y_IsDevice`, `c8y_SupportedOperations`.
        *  Any additional custom fragments.

        Imagine, for example, that you want to describe electric meters from different vendors. Depending on the make of the meter, one may have a relay and one may be capable to measure a single phase or three phases (for example, a three-phase electricity sensor). A fragment `c8y_ThreePhaseElectricitySensor` would identify such an electric meter. Devices' characteristics are identified by storing fragments for each of them.

        > **&#9432; Info:** For more details about fragments with specific meanings, review the sections [Device management library](#section/Device-management-library) and [Sensor library](#section/Sensor-library).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_INVENTORY_CREATE
        </section>
      operationId: postManagedObjectCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.managedobject+json:
            example:
              name: My tracking device
              c8y_IsDevice: {}
              c8y_DeviceTypes:
              - deviceSubsetType
              c8y_SupportedOperations:
              - c8y_Restart
            schema:
              $ref: '#/components/schemas/managedObject'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.managedobject+json:
              schema:
                $ref: '#/components/schemas/managedObject'
          description: A managed object was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create a managed object
      tags:
      - Managed objects
      x-codegen-resource-name: createManagedObject
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/inventory/managedObjects" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/inventory/managedObjects")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/inventory/managedObjects")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /inventory/managedObjects/{id}:
    delete:
      description: |
        Remove a specific managed object (for example, device) by a given ID.

        > **&#9432; Info:** Inventory DELETE requests are not synchronous. The response could be returned before the delete request has been completed. This may happen especially when the deleted managed object has a lot of associated data. After sending the request, the platform starts deleting the associated data in an asynchronous way. Finally, the requested managed object is deleted after all associated data has been deleted.

        > **&#9432; Info:** By default, the delete operation is always propagated to the subgroups, but only if the deleted object is a group.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source
        </section>
      operationId: deleteManagedObjectResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      - description: "When set to `true` and the managed object is a device or group,\
          \ all the hierarchy will be deleted."
        explode: true
        in: query
        name: cascade
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: When set to `true` all the hierarchy will be deleted without
          checking the type of managed object. It takes precedence over the parameter
          `cascade`.
        explode: true
        in: query
        name: forceCascade
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true` and the managed object is a device, it deletes\
          \ the associated device user (credentials)."
        explode: true
        in: query
        name: withDeviceUser
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "204":
          description: A managed object was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
        "409":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/conflict
                message: Cannot delete the specified object as it has associated data.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: "Conflict – The managed object is associated to other objects,\
            \ for example child devices."
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a specific managed object
      tags:
      - Managed objects
      x-codegen-resource-name: deleteManagedObject
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific managed object (for example, device, group, template) by a given ID.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_READ permission on the source
        </section>
      operationId: getManagedObjectResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: "When set to `true`, the returned references of child devices\
          \ won't contain their names."
        explode: true
        in: query
        name: skipChildrenNames
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: Determines if children with ID and name should be returned when
          fetching the managed object. Set it to `false` to improve query performance.
        explode: true
        in: query
        name: withChildren
        required: false
        schema:
          default: true
          example: false
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain the total\
          \ number of children in the respective objects (`childAdditions`, `childAssets`\
          \ and `childDevices`)."
        explode: true
        in: query
        name: withChildrenCount
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned references of child parents\
          \ will return the device's parents (if any). Otherwise, it will be an empty\
          \ array."
        explode: true
        in: query
        name: withParents
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.managedobject+json:
              schema:
                $ref: '#/components/schemas/managedObject'
          description: The request has succeeded and the object is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific managed object
      tags:
      - Managed objects
      x-codegen-resource-name: getManagedObject
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update a specific managed object (for example, device) by a given ID.

        For example, if you want to specify that your managed object is a device, you must add the fragment `c8y_IsDevice`.


        The endpoint can also be used as a device availability heartbeat.
        If you only specifiy the `id`, it updates the date when the last message was received and no other property.
        The response then only contains the `id` instead of the full managed object.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source
        </section>
      operationId: putManagedObjectResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.managedobject+json:
            example:
              c8y_IsDevice: {}
              name: My tracking device
            schema:
              $ref: '#/components/schemas/managedObject'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.managedobject+json:
              schema:
                $ref: '#/components/schemas/managedObject'
          description: A managed object was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a specific managed object
      tags:
      - Managed objects
      x-codegen-resource-name: updateManagedObject
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /inventory/managedObjects/{id}/availability:
    get:
      description: |
        Retrieve the date when a specific managed object (by a given ID) sent the last message to Cumulocity IoT.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ
        </section>
      operationId: getLastAvailabilityManagedObjectResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain, application/json:
              schema:
                description: Latest availability date of a specific managed object.
                example: 2019-08-08T08:36:32.896Z
                format: date-time
                type: string
          description: The request has succeeded and the date is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve the latest availability date of a specific managed object
      tags:
      - Managed objects
      x-codegen-resource-name: getLatestAvailability
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/availability" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/availability");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/availability")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/availability")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/availability"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /inventory/managedObjects/{id}/childAdditions:
    delete:
      description: |
        Remove specific child additions (by given child IDs) from its parent (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> owner of the source (parent) <b>OR</b> owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source (parent)
        </section>
      operationId: deleteManagedObjectChildAdditionResourceMultiple
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddMultiple'
        required: true
      responses:
        "204":
          description: Child additions were removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove specific child additions from its parent
      tags:
      - Child operations
      x-codegen-resource-name: unassignChildAdditions
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions" \
          --header "Authorization: Basic <AUTHORIZATION>"
          --header 'Content-Type: application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json' \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json");
          request.AddParameter("application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Content-Type": "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Content-Type": "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json"
          }
          response = requests.request("DELETE", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve all child additions of a specific managed object by a given ID, or a subset based on queries.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_READ permission on the source
        </section>
      operationId: getManagedObjectChildAdditionsResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "Use query language to perform operations and/or filter the results.\
          \ Details about the properties and supported operations can be found in\
          \ [Query language](#tag/Query-language)."
        explode: true
        in: query
        name: query
        required: false
        schema:
          example: $filter=(owner+eq+'manga')
          minLength: 1
          type: string
        style: form
      - description: Determines if children with ID and name should be returned when
          fetching the managed object. Set it to `false` to improve query performance.
        explode: true
        in: query
        name: withChildren
        required: false
        schema:
          default: true
          example: false
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain the total\
          \ number of children in the respective objects (`childAdditions`, `childAssets`\
          \ and `childDevices`)."
        explode: true
        in: query
        name: withChildrenCount
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
              schema:
                $ref: '#/components/schemas/ManagedObjectReferenceCollection'
          description: The request has succeeded and all child additions are sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
        "422":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Invalid Data
                message: "Find by filter query failed : Query could not be understood."
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Invalid data was sent.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all child additions of a specific managed object
      tags:
      - Child operations
      x-codegen-resource-name: getChildAdditions
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        The possible ways to assign child objects are:

        *  Assign an existing managed object (by a given child ID) as child addition of another managed object (by a given ID).
        *  Assign multiple existing managed objects (by given child IDs) as child additions of another managed object (by a given ID).
        *  Create a managed object in the inventory and assign it as a child addition to another managed object (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ((owner of the source <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source) <b>AND</b> (owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the child))
        </section>
      operationId: postManagedObjectChildAdditionsResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.managedobjectreference+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddOne'
          application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddMultiple'
          application/vnd.com.nsn.cumulocity.managedobject+json:
            example:
              name: New child object
              owner: manga
              c8y_IsDevice: {}
            schema:
              $ref: '#/components/schemas/managedObject'
        required: true
      responses:
        "201":
          description: A managed object was assigned as child addition.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Assign a managed object as child addition
      tags:
      - Child operations
      x-codegen-resource-name: assignAsChildAddition
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /inventory/managedObjects/{id}/childAdditions/{childId}:
    delete:
      description: |
        Remove a specific child addition (by a given child ID) from its parent (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> owner of the source (parent) <b>OR</b> owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source (parent)
        </section>
      operationId: deleteManagedObjectChildAdditionResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the child object.
        explode: false
        in: path
        name: childId
        required: true
        schema:
          example: "72022"
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      responses:
        "204":
          description: A child addition was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
        "422":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Invalid Data
                message: managedObject 10213 is not a child of 10215
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Invalid data was sent.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a specific child addition from its parent
      tags:
      - Child operations
      x-codegen-resource-name: unassignChildAddition
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific child addition (by a given child ID) of a specific managed object (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> MANAGE_OBJECT_READ permission on the source (parent)
        </section>
      operationId: getManagedObjectChildAdditionResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the child object.
        explode: false
        in: path
        name: childId
        required: true
        schema:
          example: "72022"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.managedobjectreference+json:
              schema:
                $ref: '#/components/schemas/getManagedObjectChildAdditionResource_200_response'
          description: The request has succeeded and the child addition is sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
        "422":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Invalid Data
                message: managedObject 10213 is not a child of 10215
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Invalid data was sent.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific child addition of a specific managed object
      tags:
      - Child operations
      x-codegen-resource-name: getChildAddition
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /inventory/managedObjects/{id}/childAssets:
    delete:
      description: |
        Remove specific child assets (by given child IDs) from its parent (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> owner of the source (parent) <b>OR</b> owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source (parent)
        </section>
      operationId: deleteManagedObjectChildAssetResourceMultiple
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddMultiple'
        required: true
      responses:
        "204":
          description: Child assets were removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove specific child assets from its parent
      tags:
      - Child operations
      x-codegen-resource-name: unassignChildAssets
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets" \
          --header "Authorization: Basic <AUTHORIZATION>"
          --header 'Content-Type: application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json' \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json");
          request.AddParameter("application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Content-Type": "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Content-Type": "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json"
          }
          response = requests.request("DELETE", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve all child assets of a specific managed object by a given ID, or a subset based on queries.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_READ permission on the source
        </section>
      operationId: getManagedObjectChildAssetsResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "Use query language to perform operations and/or filter the results.\
          \ Details about the properties and supported operations can be found in\
          \ [Query language](#tag/Query-language)."
        explode: true
        in: query
        name: query
        required: false
        schema:
          example: $filter=(owner+eq+'manga')
          minLength: 1
          type: string
        style: form
      - description: Determines if children with ID and name should be returned when
          fetching the managed object. Set it to `false` to improve query performance.
        explode: true
        in: query
        name: withChildren
        required: false
        schema:
          default: true
          example: false
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain the total\
          \ number of children in the respective objects (`childAdditions`, `childAssets`\
          \ and `childDevices`)."
        explode: true
        in: query
        name: withChildrenCount
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
              schema:
                $ref: '#/components/schemas/getManagedObjectChildAssetsResource_200_response'
          description: The request has succeeded and all child assets are sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
        "422":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Invalid Data
                message: "Find by filter query failed : Query could not be understood."
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Invalid data was sent.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all child assets of a specific managed object
      tags:
      - Child operations
      x-codegen-resource-name: getChildAssets
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        The possible ways to assign child objects are:

        *  Assign an existing managed object (by a given child ID) as child asset of another managed object (by a given ID).
        *  Assign multiple existing managed objects (by given child IDs) as child assets of another managed object (by a given ID).
        *  Create a managed object in the inventory and assign it as a child asset to another managed object (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ((owner of the source <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source) <b>AND</b> (owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the child))
        </section>
      operationId: postManagedObjectChildAssetsResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.managedobjectreference+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddOne'
          application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddMultiple'
          application/vnd.com.nsn.cumulocity.managedobject+json:
            example:
              name: New child object
              owner: manga
              c8y_IsDevice: {}
            schema:
              $ref: '#/components/schemas/managedObject'
        required: true
      responses:
        "201":
          description: A managed object was assigned as child asset.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Assign a managed object as child asset
      tags:
      - Child operations
      x-codegen-resource-name: assignAsChildAsset
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /inventory/managedObjects/{id}/childAssets/{childId}:
    delete:
      description: |
        Remove a specific child asset (by a given child ID) from its parent (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> owner of the source (parent) <b>OR</b> owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source (parent)
        </section>
      operationId: deleteManagedObjectChildAssetResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the child object.
        explode: false
        in: path
        name: childId
        required: true
        schema:
          example: "72022"
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      responses:
        "204":
          description: A child asset was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
        "422":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Invalid Data
                message: managedObject 10213 is not a child of 10215
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Invalid data was sent.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a specific child asset from its parent
      tags:
      - Child operations
      x-codegen-resource-name: unassignChildAsset
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific child asset (by a given child ID) of a specific managed object (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> MANAGE_OBJECT_READ permission on the source (parent)
        </section>
      operationId: getManagedObjectChildAssetResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the child object.
        explode: false
        in: path
        name: childId
        required: true
        schema:
          example: "72022"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.managedobjectreference+json:
              schema:
                $ref: '#/components/schemas/getManagedObjectChildAssetResource_200_response'
          description: The request has succeeded and the child asset is sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
        "422":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Invalid Data
                message: managedObject 10213 is not a child of 10215
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Invalid data was sent.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific child asset of a specific managed object
      tags:
      - Child operations
      x-codegen-resource-name: getChildAsset
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /inventory/managedObjects/{id}/childDevices:
    delete:
      description: |
        Remove specific child devices (by given child IDs) from its parent (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> owner of the source (parent) <b>OR</b> owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source (parent)
        </section>
      operationId: deleteManagedObjectChildDeviceResourceMultiple
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddMultiple'
        required: true
      responses:
        "204":
          description: Child devices were removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove specific child devices from its parent
      tags:
      - Child operations
      x-codegen-resource-name: unassignChildDevices
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices" \
          --header "Authorization: Basic <AUTHORIZATION>"
          --header 'Content-Type: application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json' \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json");
          request.AddParameter("application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Content-Type": "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Content-Type": "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json"
          }
          response = requests.request("DELETE", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve all child devices of a specific managed object by a given ID, or a subset based on queries.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_READ permission on the source
        </section>
      operationId: getManagedObjectChildDevicesResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "Use query language to perform operations and/or filter the results.\
          \ Details about the properties and supported operations can be found in\
          \ [Query language](#tag/Query-language)."
        explode: true
        in: query
        name: query
        required: false
        schema:
          example: $filter=(owner+eq+'manga')
          minLength: 1
          type: string
        style: form
      - description: Determines if children with ID and name should be returned when
          fetching the managed object. Set it to `false` to improve query performance.
        explode: true
        in: query
        name: withChildren
        required: false
        schema:
          default: true
          example: false
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain the total\
          \ number of children in the respective objects (`childAdditions`, `childAssets`\
          \ and `childDevices`)."
        explode: true
        in: query
        name: withChildrenCount
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
              schema:
                $ref: '#/components/schemas/getManagedObjectChildDevicesResource_200_response'
          description: The request has succeeded and all child devices are sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
        "422":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Invalid Data
                message: "Find by filter query failed : Query could not be understood."
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Invalid data was sent.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all child devices of a specific managed object
      tags:
      - Child operations
      x-codegen-resource-name: getChildDevices
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        The possible ways to assign child objects are:

        *  Assign an existing managed object (by a given child ID) as child device of another managed object (by a given ID).
        *  Assign multiple existing managed objects (by given child IDs) as child devices of another managed object (by a given ID).
        *  Create a managed object in the inventory and assign it as a child device to another managed object (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ((owner of the source <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source) <b>AND</b> (owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the child))
        </section>
      operationId: postManagedObjectChildDevicesResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.managedobjectreference+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddOne'
          application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddMultiple'
          application/vnd.com.nsn.cumulocity.managedobject+json:
            example:
              name: New child object
              owner: manga
              c8y_IsDevice: {}
            schema:
              $ref: '#/components/schemas/managedObject'
        required: true
      responses:
        "201":
          description: A managed object was assigned as child device.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Assign a managed object as child device
      tags:
      - Child operations
      x-codegen-resource-name: assignAsChildDevice
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /inventory/managedObjects/{id}/childDevices/{childId}:
    delete:
      description: |
        Remove a specific child device (by a given child ID) from its parent (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> owner of the source (parent) <b>OR</b> owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source (parent)
        </section>
      operationId: deleteManagedObjectChildDeviceResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the child object.
        explode: false
        in: path
        name: childId
        required: true
        schema:
          example: "72022"
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      responses:
        "204":
          description: A child device was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
        "422":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Invalid Data
                message: managedObject 10213 is not a child of 10215
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Invalid data was sent.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a specific child device from its parent
      tags:
      - Child operations
      x-codegen-resource-name: unassignChildDevice
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific child device (by a given child ID) of a specific managed object (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> MANAGE_OBJECT_READ permission on the source (parent)
        </section>
      operationId: getManagedObjectChildDeviceResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the child object.
        explode: false
        in: path
        name: childId
        required: true
        schema:
          example: "72022"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.managedobjectreference+json:
              schema:
                $ref: '#/components/schemas/getManagedObjectChildDeviceResource_200_response'
          description: The request has succeeded and the child device is sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
        "422":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Invalid Data
                message: managedObject 10213 is not a child of 10215
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Invalid data was sent.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific child device of a specific managed object
      tags:
      - Child operations
      x-codegen-resource-name: getChildDevice
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /inventory/managedObjects/{id}/supportedMeasurements:
    get:
      description: |
        Retrieve all measurement types of a specific managed object by a given ID.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_READ permission on the source
        </section>
      operationId: getSupportedMeasurementsManagedObjectResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportedMeasurements'
          description: The request has succeeded and all measurement types are sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all supported measurement fragments of a specific managed
        object
      tags:
      - Managed objects
      x-codegen-resource-name: getSupportedMeasurements
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedMeasurements" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedMeasurements");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedMeasurements")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedMeasurements")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedMeasurements"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /inventory/managedObjects/{id}/supportedSeries:
    get:
      description: |
        Retrieve all supported measurement fragments and series of a specific managed object by a given ID.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_READ permission on the source
        </section>
      operationId: getSupportedSeriesManagedObjectResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportedSeries'
          description: The request has succeeded and all supported measurement series
            are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all supported measurement fragments and series of a specific
        managed object
      tags:
      - Managed objects
      x-codegen-resource-name: getSupportedSeries
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedSeries" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedSeries");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedSeries")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedSeries")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedSeries"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /inventory/managedObjects/{id}/user:
    get:
      description: |
        Retrieve the device owner's username and state (enabled or disabled) of a specific managed object (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_READ permission on the source
        </section>
      operationId: getManagedObjectUserResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.managedobjectuser+json:
              schema:
                $ref: '#/components/schemas/ManagedObjectUser'
          description: The request has succeeded and the username and state are sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve the username and state of a specific managed object
      tags:
      - Managed objects
      x-codegen-resource-name: getManagedObjectUser
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update the device owner's state (enabled or disabled) of a specific managed object (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source
        </section>
      operationId: putManagedObjectUserResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.managedobjectuser+json:
            example:
              enabled: true
            schema:
              $ref: '#/components/schemas/ManagedObjectUser'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.managedobjectuser+json:
              schema:
                $ref: '#/components/schemas/ManagedObjectUser'
          description: The user's details of a specific managed object were updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update the user's details of a specific managed object
      tags:
      - Managed objects
      x-codegen-resource-name: updateManagedObjectUser
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /identity:
    get:
      description: |
        Retrieve URIs and URI templates for associating external identifiers with unique identifiers.

        <section><h5>Required roles</h5>
        ROLE_IDENTITY_READ
        </section>
      operationId: getIdentityApiResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.identityapi+json:
              schema:
                $ref: '#/components/schemas/identityApiResource'
          description: The request has succeeded and the URIs are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve URIs to collections of external IDs
      tags:
      - Identity API
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/identity" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/identity");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/identity")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/identity")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/identity"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /identity/globalIds/{id}/externalIds:
    get:
      description: |
        Retrieve all external IDs of a existing managed object (identified by ID).

        <section><h5>Required roles</h5>
        ROLE_IDENTITY_READ <b>OR</b> owner of the resource <b>OR</b> MANAGED_OBJECT_READ permission on the resource
        </section>
      operationId: getExternalIDCollectionResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.externalidcollection+json:
              schema:
                $ref: '#/components/schemas/externalIds'
          description: The request has succeeded and all the external IDs are sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all external IDs of a specific managed object
      tags:
      - External IDs
      x-codegen-resource-name: getExternalIds
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Create an external ID for an existing managed object (identified by ID).

        <section><h5>Required roles</h5>
        ROLE_IDENTITY_ADMIN <b>OR</b> owner of the resource <b>OR</b> MANAGED_OBJECT_ADMIN permission on the resource
        </section>
      operationId: postExternalIDCollectionResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.externalid+json:
            example:
              externalId: simulator_145074_1
              type: c8y_Serial
            schema:
              $ref: '#/components/schemas/externalId'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.externalid+json:
              schema:
                $ref: '#/components/schemas/externalId'
          description: An external ID was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "409":
          description: Duplicate – Identity already bound to a different Global ID.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create an external ID
      tags:
      - External IDs
      x-codegen-resource-name: createExternalId
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
          --data-raw '<Payload>',
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>", ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers = headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /identity/externalIds/{type}/{externalId}:
    delete:
      description: |
        Remove a specific external ID of a particular type.

        <section><h5>Required roles</h5>
        ROLE_IDENTITY_ADMIN <b>OR</b> owner of the resource <b>OR</b> MANAGED_OBJECT_ADMIN permission on the resource
        </section>
      operationId: deleteExternalIDResource
      parameters:
      - description: The identifier used in the external system that Cumulocity IoT
          interfaces with.
        explode: false
        in: path
        name: type
        required: true
        schema:
          example: c8y_Serial
          minLength: 1
          type: string
        style: simple
      - description: The type of the external identifier.
        explode: false
        in: path
        name: externalId
        required: true
        schema:
          example: simulator_145074_1
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: An external ID was deleted.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: identity/Not Found
                message: External ID not found
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: External ID not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a specific external ID
      tags:
      - External IDs
      x-codegen-resource-name: deleteExternalId
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific external ID of a particular type.

        <section><h5>Required roles</h5>
        ROLE_IDENTITY_READ <b>OR</b> owner of the resource <b>OR</b> MANAGED_OBJECT_READ permission on the resource
        </section>
      operationId: getExternalIDResource
      parameters:
      - description: The identifier used in the external system that Cumulocity IoT
          interfaces with.
        explode: false
        in: path
        name: type
        required: true
        schema:
          example: c8y_Serial
          minLength: 1
          type: string
        style: simple
      - description: The type of the external identifier.
        explode: false
        in: path
        name: externalId
        required: true
        schema:
          example: simulator_145074_1
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.externalid+json:
              schema:
                $ref: '#/components/schemas/externalId'
          description: The request has succeeded and the external ID is sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: identity/Not Found
                message: External ID not found
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: External ID not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific external ID
      tags:
      - External IDs
      x-codegen-resource-name: getExternalId
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /user:
    get:
      description: |
        Retrieve URIs and URI templates to collections of users, groups, and roles, so that they can be queried.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE
        </section>
      operationId: getUserApiResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.userapi+json:
              schema:
                $ref: '#/components/schemas/userApiResource'
          description: The request has succeeded and the URIs are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: "Retrieve URIs to collections of users, groups and roles"
      tags:
      - User API
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /user/currentUser:
    get:
      description: |
        Retrieve the user reference of the current user.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_READ <b>OR</b> ROLE_SYSTEM
        </section>
      operationId: getCurrentUserResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.currentuser+json:
              schema:
                $ref: '#/components/schemas/currentUser'
          description: The request has succeeded and the current user is sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve the current user
      tags:
      - Current User
      x-codegen-resource-name: getCurrentUser
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/currentUser" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/currentUser");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/currentUser")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/currentUser")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/currentUser"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update the current user.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_ADMIN
        </section>
      operationId: putCurrentUserResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.currentuser+json:
            example:
              firstName: John
              lastName: Doe
              email: johndoe@example.com
              password: S3cur3P4sswd.
            schema:
              $ref: '#/components/schemas/currentUser'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.currentuser+json:
              schema:
                $ref: '#/components/schemas/currentUser'
          description: The current user was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update the current user
      tags:
      - Current User
      x-codegen-resource-name: updateCurrentUser
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/user/currentUser" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/currentUser");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/currentUser")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/currentUser")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/currentUser"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/currentUser/password:
    put:
      description: |
        Update the current user's  password.

        > **⚠️ Important:** If the tenant uses OAI-Secure authentication, the current user will not be logged out. Instead, a new cookie will be set with a new token, and the previous token will expire within a minute.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_ADMIN
        </section>
      operationId: putCurrentUserPasswordResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              currentUserPassword: SecretP@@sword!_
              newPassword: New_SecretP@@sword!_
            schema:
              $ref: '#/components/schemas/passwordChange'
        required: true
      responses:
        "200":
          description: The current user password was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      summary: Update the current user's password
      tags:
      - Current User
      x-codegen-resource-name: updateCurrentUserPassword
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/user/currentUser/password" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/currentUser/password");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/currentUser/password")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/currentUser/password")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/currentUser/password"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/currentUser/totpSecret:
    post:
      description: |
        Generate a secret code to create a QR code to set up the two-factor authentication functionality using a TFA app/service.

        For more information about the feature, see [User Guide > Administration > Two-factor authentication](https://cumulocity.com/guides/users-guide/administration/#tfa) in the *Cumulocity IoT documentation*.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_READ <b>OR</b> ROLE_SYSTEM
        </section>
      operationId: postCurrentUserTfaTotpResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/currentUserTotpSecret'
          description: The request has succeeded and the secret is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      summary: Generate secret to set up TFA
      tags:
      - Current User
      x-codegen-resource-name: generateTfaSecret
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/user/currentUser/totpSecret" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/currentUser/totpSecret");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Accept", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/currentUser/totpSecret")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Accept", "application/json")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/user/currentUser/totpSecret")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/currentUser/totpSecret"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = {} )
          print(response.text.encode("utf8"))
  /user/currentUser/totpSecret/activity:
    get:
      description: |
        Returns the activation state of the two-factor authentication feature for the current user.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_READ <b>OR</b> ROLE_SYSTEM
        </section>
      operationId: getCurrentUserTfaTotpResourceActivity
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/currentUserTotpSecretActivity'
          description: Returns the activation state.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: users/Not Found
                message: "Error retrieving user 123! : Cannot find document with ID\
                  \ ID [type=com_cumulocity_model_idtype_GId, value=123]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: User not found.
      security:
      - Basic: []
      - OAI-Secure: []
      summary: Returns the activation state of the two-factor authentication feature.
      tags:
      - Current User
      x-codegen-resource-name: getTfaState
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Activates or deactivates the two-factor authentication feature for the current user.

        For more information about the feature, see [User Guide > Administration > Two-factor authentication](https://cumulocity.com/guides/users-guide/administration/#tfa) in the *Cumulocity IoT documentation*.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_READ <b>OR</b> ROLE_SYSTEM
        </section>
      operationId: postCurrentUserTfaTotpResourceActivity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/currentUserTotpSecretActivity'
        required: true
      responses:
        "204":
          description: The two-factor authentication was activated or deactivated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Cannot deactivate TOTP setup.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: users/Not Found
                message: "Error retrieving user 123! : Cannot find document with ID\
                  \ ID [type=com_cumulocity_model_idtype_GId, value=123]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: User not found.
      security:
      - Basic: []
      - OAI-Secure: []
      summary: Activates or deactivates the two-factor authentication feature
      tags:
      - Current User
      x-codegen-resource-name: setTfaState
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>) )
          print(response.text.encode("utf8"))
  /user/currentUser/totpSecret/verify:
    post:
      description: |
        Verifies the authentication code that the current user received from a TFA app/service and uploaded to the platform to gain access or enable the two-factor authentication feature.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_READ <b>OR</b> ROLE_SYSTEM
        </section>
      operationId: postCurrentUserTfaTotpResourceVerify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/currentUserTotpCode'
        required: true
      responses:
        "204":
          description: The sent code was correct and the access can be granted.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Invalid verification code.
        "404":
          description: Cannot validate TFA TOTP code - user's TFA TOTP secret does
            not exist.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      summary: Verify TFA code
      tags:
      - Current User
      x-codegen-resource-name: verifyTfaCode
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/verify" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/currentUser/totpSecret/verify");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/currentUser/totpSecret/verify")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/verify")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/verify"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/devicePermissions/{id}:
    get:
      description: |
        Returns all device permissions assignments if the current user has READ permission.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE
        </section>
      operationId: getDevicePermissionsResource
      parameters:
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePermissionOwners'
          description: The request has succeeded and the device permissions assignments
            are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Returns all device permissions assignments
      tags:
      - Device Permissions
      x-codegen-resource-name: getDevicePermissionAssignments
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/devicePermissions/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/devicePermissions/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/devicePermissions/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/devicePermissions/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/devicePermissions/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Updates the device permissions assignments if the current user has ADMIN permission or CREATE permission and also has all device permissions.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>OR</b> ROLE_USER_MANAGEMENT_CREATE
        </section>
      operationId: putDevicePermissionsResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the managed object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedDevicePermissions'
        required: true
      responses:
        "200":
          description: The device permissions were successfully updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Updates the device permissions assignments
      tags:
      - Device Permissions
      x-codegen-resource-name: updateDevicePermissionAssignments
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/user/devicePermissions/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/devicePermissions/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/devicePermissions/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/devicePermissions/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/devicePermissions/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/inventoryroles:
    get:
      description: |
        Retrieve all inventory roles.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE
        </section>
      operationId: getInventoryRoleResource
      parameters:
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.inventoryrolecollection+json:
              schema:
                $ref: '#/components/schemas/InventoryRoleCollection'
          description: The request succeeded and all inventory roles are sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all inventory roles
      tags:
      - Inventory Roles
      x-codegen-resource-name: getInventoryRoles
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/inventoryroles" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/inventoryroles");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/inventoryroles")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/inventoryroles")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/inventoryroles"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Create an inventory role.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      operationId: postInventoryRoleResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.inventoryrole+json:
            example:
              name: "Operations: Restart Device"
              description: Can restart devices.
              permissions:
              - permission: ADMIN
                scope: OPERATION
                type: c8y_Restart
            schema:
              $ref: '#/components/schemas/postInventoryRoleResource_request'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.inventoryrole+json:
              schema:
                $ref: '#/components/schemas/inventoryRole'
          description: An inventory role was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "409":
          description: Duplicate – The inventory role already exists.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create an inventory role
      tags:
      - Inventory Roles
      x-codegen-resource-name: createInventoryRole
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/user/inventoryroles" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/inventoryroles");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/inventoryroles")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/user/inventoryroles")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/inventoryroles"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/inventoryroles/{id}:
    delete:
      description: |
        Remove a specific inventory role (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      operationId: deleteInventoryRoleResourceId
      parameters:
      - description: Unique identifier of the inventory role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
        style: simple
      responses:
        "204":
          description: An inventory role was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: Not Found
                message: Cannot find the specified role.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Role not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a specific inventory role
      tags:
      - Inventory Roles
      x-codegen-resource-name: deleteInventoryRole
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/user/inventoryroles/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/inventoryroles/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/user/inventoryroles/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/user/inventoryroles/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/inventoryroles/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers = headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific inventory role (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> has access to the inventory role
        </section>
      operationId: getInventoryRoleResourceId
      parameters:
      - description: Unique identifier of the inventory role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.inventoryrole+json:
              schema:
                $ref: '#/components/schemas/inventoryRole'
          description: The request succeeded and the inventory role is sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: Not Found
                message: Cannot find the specified role.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Role not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific inventory role
      tags:
      - Inventory Roles
      x-codegen-resource-name: getInventoryRole
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/inventoryroles/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/inventoryroles/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/inventoryroles/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/inventoryroles/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/inventoryroles/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update a specific inventory role (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      operationId: putInventoryRoleResourceId
      parameters:
      - description: Unique identifier of the inventory role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.inventoryrole+json:
            example:
              name: "Operations: Restart Device"
              description: Can restart devices.
              permissions:
              - permission: ADMIN
                scope: OPERATION
                type: c8y_Restart
            schema:
              $ref: '#/components/schemas/inventoryRole'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.inventoryrole+json:
              schema:
                $ref: '#/components/schemas/inventoryRole'
          description: An inventory role was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: Not Found
                message: Cannot find the specified role.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Role not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a specific inventory role
      tags:
      - Inventory Roles
      x-codegen-resource-name: updateInventoryRole
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/user/inventoryroles/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/inventoryroles/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/inventoryroles/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/inventoryroles/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/inventoryroles/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/roles:
    get:
      description: |
        Retrieve all user roles.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> has access to the user role
        </section>
      operationId: getRoleCollectionResource
      parameters:
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.rolecollection+json:
              schema:
                $ref: '#/components/schemas/UserRoleCollection'
          description: The request has succeeded and all user roles are sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all user roles
      tags:
      - Roles
      x-codegen-resource-name: getUserRoles
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/roles" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/roles");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/roles")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/roles")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/roles"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /user/roles/{name}:
    get:
      description: |
        Retrieve a user role by name.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> current user has access to the role with this name
        </section>
      operationId: getRoleCollectionResourceByName
      parameters:
      - description: The name of the user role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          example: ROLE_ALARM_ADMIN
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.role+json:
              schema:
                $ref: '#/components/schemas/role'
          description: The request has succeeded and the user role is sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: Not Found
                message: Cannot find the specified role.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Role not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a user role by name
      tags:
      - Roles
      x-codegen-resource-name: getUserRole
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/roles/{name}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/roles/{name}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/roles/{name}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
            System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/roles/{name}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/roles/{name}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /user/{tenantId}/users:
    get:
      description: |
        Retrieve all users for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE
        </section>
      operationId: getUserCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: |
          Numeric group identifiers. The response will contain only users which belong to at least one of the specified groups.
          >**&#9432; Info:** If you query for multiple user groups at once, comma-separate the values.
        explode: false
        in: query
        name: groups
        required: false
        schema:
          example:
          - "2"
          - "3"
          - "4"
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: |
          If set to `true`, the response will only contain users created during bootstrap process (starting with “device_”).
          If the flag is absent or `false` the result will not contain “device_” users.
        explode: true
        in: query
        name: onlyDevices
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: Exact username of the owner of the user
        explode: true
        in: query
        name: owner
        required: false
        schema:
          example: admin
          minLength: 1
          type: string
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: Prefix or full username
        explode: true
        in: query
        name: username
        required: false
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: form
      - description: |
          If set to `true`, then each of returned user will contain an additional field “subusersCount”.
          It is the number of direct subusers (users with corresponding “owner”).
        explode: true
        in: query
        name: withSubusersCount
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.usercollection+json:
              schema:
                $ref: '#/components/schemas/UserCollection'
          description: The request has succeeded and all users are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all users for a specific tenant
      tags:
      - Users
      x-codegen-resource-name: getUsers
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/users" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/users")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/users")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Create a user for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> has access to roles, groups, device permissions and applications
        </section>
      operationId: postUserCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.user+json:
            example:
              firstName: John
              lastName: Doe
              userName: jdoe
              phone: +1-541-754-3010
              email: johndoe@example.com
              password: S3cur3P4sswd.
            schema:
              $ref: '#/components/schemas/postUserCollectionResource_request'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.user+json:
              schema:
                $ref: '#/components/schemas/user'
          description: A user was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "409":
          description: Duplicate – The userName or alias already exists.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create a user for a specific tenant
      tags:
      - Users
      x-codegen-resource-name: createUser
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/user/{tenantId}/users" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/{tenantId}/users")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/user/{tenantId}/users")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/{tenantId}/users/{userId}:
    delete:
      description: |
        Delete a specific user (by a given user ID) for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user <b>AND</b> not the current user
        </section>
      operationId: deleteUserResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the a user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: A user was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: users/Not Found
                message: "Error retrieving user 123! : Cannot find document with ID\
                  \ ID [type=com_cumulocity_model_idtype_GId, value=123]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: User not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Delete a specific user for a specific tenant
      tags:
      - Users
      x-codegen-resource-name: deleteUser
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers = headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific user (by a given user ID) for a specific tenant (by a given tenant ID).

        Users in the response are sorted by username in ascending order.
        Only objects which the user is allowed to see are returned to the user.
        The user password is never returned in a GET response. Authentication mechanism is provided by another interface.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user
        </section>
      operationId: getUserResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the a user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.user+json:
              schema:
                $ref: '#/components/schemas/user'
          description: The request has succeeded and the user is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: users/Not Found
                message: "Error retrieving user 123! : Cannot find document with ID\
                  \ ID [type=com_cumulocity_model_idtype_GId, value=123]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: User not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific user for a specific tenant
      tags:
      - Users
      x-codegen-resource-name: getUser
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update a specific user (by a given user ID) for a specific tenant (by a given tenant ID).

        Any change in user's roles, device permissions and groups creates corresponding audit records with type "User" and activity "User updated" with information which properties have been changed.

        When the user is updated with changed permissions or groups, a corresponding audit record is created with type "User" and activity "User updated".

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN to update root users in a user hierarchy <b>OR</b> users that are not in any hierarchy<br/>
        ROLE_USER_MANAGEMENT_ADMIN to update non-root users in a user hierarchy <b>AND</b> whose parents have access to roles, groups, device permissions and applications being assigned<br/>
        ROLE_USER_MANAGEMENT_CREATE to update descendants of the current user in a user hierarchy <b>AND</b> whose parents have access to roles, groups, device permissions and applications being assigned
        </section>
      operationId: putUserResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the a user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.user+json:
            example:
              displayName: John Doe
              phone: +1-541-754-3010
            schema:
              $ref: '#/components/schemas/putUserResource_request'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.user+json:
              schema:
                $ref: '#/components/schemas/user'
          description: A user was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: users/Not Found
                message: "Error retrieving user 123! : Cannot find document with ID\
                  \ ID [type=com_cumulocity_model_idtype_GId, value=123]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: User not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a specific user for a specific tenant
      tags:
      - Users
      x-codegen-resource-name: updateUser
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/{tenantId}/users/{userId}/password:
    put:
      description: |
        Update a specific user's password (by a given user ID) of a specific tenant (by a given tenant ID).

        Changing the user's password creates a corresponding audit record of type "User" and activity "User updated", and specifying that the password has been changed.

        > **⚠️ Important:** If the tenant uses OAI-Secure authentication, the target user will be logged out.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN to update root users in a user hierarchy <b>OR</b> users that are not in any hierarchy<br/>
        ROLE_USER_MANAGEMENT_ADMIN to update non-root users in a user hierarchy <b>AND</b> whose parents have access to assigned roles, groups, device permissions and applications<br/>
        ROLE_USER_MANAGEMENT_CREATE to update descendants of the current user in a user hierarchy <b>AND</b> whose parents have access to assigned roles, groups, device permissions and applications
        </section>
      operationId: putUserChangePasswordResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the a user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              currentUserPassword: SecretP@@sword!_
              newPassword: New_SecretP@@sword!_
            schema:
              $ref: '#/components/schemas/passwordChange'
        required: true
      responses:
        "200":
          description: A user was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      summary: Update a specific user's password of a specific tenant
      tags:
      - Users
      x-codegen-resource-name: updateUserPassword
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/password" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/password");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/password")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/password")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/password"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/{tenantId}/users/{userId}/tfa:
    get:
      description: |
        Retrieve the two-factor authentication settings for the specified user.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> (ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user) <b>OR</b> is the current user
        </section>
      operationId: getUsersTfaResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the a user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userTfaData'
          description: The request has succeeded and the TFA settings are sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: users/Not Found
                message: "Error retrieving user 123! : Cannot find document with ID\
                  \ ID [type=com_cumulocity_model_idtype_GId, value=123]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: User not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve the TFA settings of a specific user
      tags:
      - Users
      x-codegen-resource-name: getUserTfaSettings
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/tfa" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/tfa");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/tfa")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/tfa")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/tfa"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /user/{tenantId}/userByName/{username}:
    get:
      description: |
        Retrieve a user by username in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user
        </section>
      operationId: getUsersByNameResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: The username of the a user.
        explode: false
        in: path
        name: username
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.user+json:
              schema:
                $ref: '#/components/schemas/user'
          description: The request has succeeded and the user is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: users/Not Found
                message: "Error retrieving user 123! : Cannot find document with ID\
                  \ ID [type=com_cumulocity_model_idtype_GId, value=123]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: User not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a user by username in a specific tenant
      tags:
      - Users
      x-codegen-resource-name: getUserByUsername
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/userByName/{username}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/userByName/{username}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/userByName/{username}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/userByName/{username}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/userByName/{username}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /user/{tenantId}/groups:
    get:
      description: |
        Retrieve all user groups of a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE
        </section>
      operationId: getGroupCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.groupcollection+json:
              schema:
                $ref: '#/components/schemas/UserGroupCollection'
          description: The request has succeeded and all user groups are sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all user groups of a specific tenant
      tags:
      - Groups
      x-codegen-resource-name: getTenantUserGroups
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/groups" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/groups")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/groups")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Create a user group for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      operationId: postGroupCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.group+json:
            example:
              name: Global Watchers
              description: Can watch all events
            schema:
              $ref: '#/components/schemas/postGroupCollectionResource_request'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.group+json:
              schema:
                $ref: '#/components/schemas/group'
          description: A user group was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "409":
          description: Duplicate – Group name already exists.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create a user group for a specific tenant
      tags:
      - Groups
      x-codegen-resource-name: createUserGroup
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/user/{tenantId}/groups" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/{tenantId}/groups")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/user/{tenantId}/groups")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers = headers)
          print(response.text.encode("utf8"))
  /user/{tenantId}/groups/{groupId}:
    delete:
      description: |
        Delete a specific user group (by a given user group ID) for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      operationId: deleteGroupByIdResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the user group.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: 2
          type: integer
        style: simple
      responses:
        "204":
          description: A user group was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: groups/Not Found
                message: "Error retrieving group with id 2! : Cannot find document\
                  \ with ID ID [type=com_cumulocity_model_idtype_GId, value=2]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Group not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Delete a specific user group for a specific tenant
      tags:
      - Groups
      x-codegen-resource-name: deleteUserGroup
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers = headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific user group (by a given user group ID) for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user <b>AND</b> is not the current user
        </section>
      operationId: getGroupByIdResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the user group.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: 2
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.group+json:
              schema:
                $ref: '#/components/schemas/group'
          description: The request succeeded and the user group is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: groups/Not Found
                message: "Error retrieving group with id 2! : Cannot find document\
                  \ with ID ID [type=com_cumulocity_model_idtype_GId, value=2]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Group not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific user group for a specific tenant
      tags:
      - Groups
      x-codegen-resource-name: getUserGroup
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update a specific user group (by a given user group ID) for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      operationId: putGroupByIdResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the user group.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: 2
          type: integer
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.group+json:
            example:
              name: Global Watchers
              description: Can watch all events
            schema:
              $ref: '#/components/schemas/postGroupCollectionResource_request'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.group+json:
              schema:
                $ref: '#/components/schemas/group'
          description: A user group was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: groups/Not Found
                message: "Error retrieving group with id 2! : Cannot find document\
                  \ with ID ID [type=com_cumulocity_model_idtype_GId, value=2]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Group not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a specific user group for a specific tenant
      tags:
      - Groups
      x-codegen-resource-name: updateUserGroup
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/{tenantId}/groups/{groupId}/roles:
    get:
      description: |
        Retrieve all roles assigned to a specific user group (by a given user group ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ
        </section>
      operationId: getGroupsRoleReferenceCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the user group.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: 2
          type: integer
        style: simple
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.rolereferencecollection+json:
              schema:
                $ref: '#/components/schemas/RoleReferenceCollection'
          description: The request succeeded and the roles are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: groups/Not Found
                message: "Error retrieving group with id 2! : Cannot find document\
                  \ with ID ID [type=com_cumulocity_model_idtype_GId, value=2]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Group not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all roles assigned to a specific user group in a specific
        tenant
      tags:
      - Roles
      x-codegen-resource-name: getGroupRoles
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Assign a role to a specific user group (by a given user group ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      operationId: postGroupsRoleReferenceCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the user group.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: 2
          type: integer
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.rolereference+json:
            schema:
              $ref: '#/components/schemas/SubscribedRole'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.rolereference+json:
              example:
                self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/roles/ROLE_ALARM_ADMIN"
                role:
                  id: ROLE_ALARM_ADMIN
                  name: ROLE_ALARM_ADMIN
                  self: https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN
              schema:
                $ref: '#/components/schemas/roleReference'
          description: A user role was assigned to a user group.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: groups/Not Found
                message: "Error retrieving group with id 2! : Cannot find document\
                  \ with ID ID [type=com_cumulocity_model_idtype_GId, value=2]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Group not found.
        "409":
          description: Conflict – Role already assigned to the user group.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Assign a role to a specific user group in a specific tenant
      tags:
      - Roles
      x-codegen-resource-name: assignGroupRole
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/{tenantId}/groups/{groupId}/roles/{roleId}:
    delete:
      description: |
        Unassign a specific role (given by a role ID) for a specific user group (by a given user group ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      operationId: deleteGroupRoleReferenceResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the user group.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: 2
          type: integer
        style: simple
      - description: Unique identifier of the user role.
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          example: ROLE_ALARM_ADMIN
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: A role was unassigned from a user group.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: Not Found
                message: Cannot find the specified role.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Role not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Unassign a specific role for a specific user group in a specific tenant
      tags:
      - Roles
      x-codegen-resource-name: unassignGroupRole
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles/{roleId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles/{roleId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles/{roleId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles/{roleId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles/{roleId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers = headers)
          print(response.text.encode("utf8"))
  /user/{tenantId}/groups/{groupId}/users:
    get:
      description: |
        Retrieve the users of a specific user group (by a given user group ID) of a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> (ROLE_USER_MANAGEMENT_CREATE <b>AND</b> has access to the user group)
        </section>
      operationId: getUserReferenceCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the user group.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: 2
          type: integer
        style: simple
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.userreferencecollection+json:
              schema:
                $ref: '#/components/schemas/UserReferenceCollection'
          description: The request has succeeded and the users are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: groups/Not Found
                message: "Error retrieving group with id 2! : Cannot find document\
                  \ with ID ID [type=com_cumulocity_model_idtype_GId, value=2]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Group not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve the users of a specific user group of a specific tenant
      tags:
      - Users
      x-codegen-resource-name: getUsersFromUserGroup
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Add a user to a specific user group (by a given user group ID) of a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN to assign root users in a user hierarchy <b>OR</b> users that are not in any hierarchy to any group<br/>
        ROLE_USER_MANAGEMENT_ADMIN to assign non-root users in a user hierarchy to groups accessible by the parent of assigned user<br/>
        ROLE_USER_MANAGEMENT_CREATE to assign descendants of the current user in a user hierarchy to groups accessible by current user <b>AND</b> accessible by the parent of assigned user
        </section>
      operationId: postUserReferenceCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the user group.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: 2
          type: integer
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.userreference+json:
            schema:
              $ref: '#/components/schemas/SubscribedUser'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.userreference+json:
              schema:
                $ref: '#/components/schemas/userReference'
          description: The user was added to the group.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: groups/Not Found
                message: "Error retrieving group with id 2! : Cannot find document\
                  \ with ID ID [type=com_cumulocity_model_idtype_GId, value=2]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Group not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Add a user to a specific user group of a specific tenant
      tags:
      - Users
      x-codegen-resource-name: assignUserToUserGroup
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/{tenantId}/groups/{groupId}/users/{userId}:
    delete:
      description: |
        Remove a specific user (by a given user ID) from a specific user group (by a given user group ID) of a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user <b>AND</b> is not the current user
        </section>
      operationId: deleteUserReferenceResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the user group.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: 2
          type: integer
        style: simple
      - description: Unique identifier of the a user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: A user was removed from a group.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: users/Not Found
                message: "Error retrieving user 123! : Cannot find document with ID\
                  \ ID [type=com_cumulocity_model_idtype_GId, value=123]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: User not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a specific user from a specific user group of a specific tenant
      tags:
      - Users
      x-codegen-resource-name: removeUserFromUserGroup
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users/{userId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users/{userId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users/{userId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users/{userId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users/{userId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers = headers)
          print(response.text.encode("utf8"))
  /user/{tenantId}/groupByName/{groupName}:
    get:
      description: |
        Retrieve a user group by group name for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> has access to groups
        </section>
      operationId: getGroupByNameResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: The name of the user group.
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          example: admins
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.group+json:
              schema:
                $ref: '#/components/schemas/group'
          description: The request succeeded and the user group is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: groups/Not Found
                message: "Error retrieving group with id 2! : Cannot find document\
                  \ with ID ID [type=com_cumulocity_model_idtype_GId, value=2]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Group not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a user group by group name for a specific tenant
      tags:
      - Groups
      x-codegen-resource-name: getUserGroupByName
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/groupByName/{groupName}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groupByName/{groupName}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/groupByName/{groupName}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/groupByName/{groupName}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/groupByName/{groupName}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /user/{tenantId}/users/{userId}/groups:
    get:
      description: |
        Get all user groups for a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user
        </section>
      operationId: getGroupReferenceCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the a user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.groupreferencecollection+json:
              schema:
                $ref: '#/components/schemas/GroupReferenceCollection'
          description: The request succeeded and all groups for the user are sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: users/Not Found
                message: "Error retrieving user 123! : Cannot find document with ID\
                  \ ID [type=com_cumulocity_model_idtype_GId, value=123]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: User not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Get all user groups for specific user in a specific tenant
      tags:
      - Groups
      x-codegen-resource-name: getUserGroups
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/groups" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/groups");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/groups")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/groups")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/groups"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /user/{tenantId}/users/{userId}/roles:
    post:
      description: |
        Assign a role to a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        When a role is assigned to a user, a corresponding audit record is created with type "User" and activity "User updated".

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN to assign any role to root users in a user hierarchy <b>OR</b> users that are not in any hierarchy<br/>
        ROLE_USER_MANAGEMENT_ADMIN to assign roles accessible by the parent of assigned user to non-root users in a user hierarchy<br/>
        ROLE_USER_MANAGEMENT_CREATE to assign roles accessible by the current user <b>AND</b> accessible by the parent of the assigned user to the descendants of the current user in a user hierarchy
        </section>
      operationId: postUsersRoleReferenceCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the a user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.rolereference+json:
            schema:
              $ref: '#/components/schemas/SubscribedRole'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.rolereference+json:
              schema:
                $ref: '#/components/schemas/roleReference'
          description: A user role was assigned to a user.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: users/Not Found
                message: "Error retrieving user 123! : Cannot find document with ID\
                  \ ID [type=com_cumulocity_model_idtype_GId, value=123]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: User not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Assign a role to specific user in a specific tenant
      tags:
      - Roles
      x-codegen-resource-name: assignUserRole
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/{tenantId}/users/{userId}/roles/{roleId}:
    delete:
      description: |
        Unassign a specific role (by a given role ID) from a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user <b>AND</b> has access to roles
        </section>
      operationId: deleteUserRoleReferenceResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the a user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the user role.
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          example: ROLE_ALARM_ADMIN
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: A user role was unassigned from a user.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: users/Not Found
                message: "Error retrieving user 123! : Cannot find document with ID\
                  \ ID [type=com_cumulocity_model_idtype_GId, value=123]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: User not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Unassign a specific role from a specific user in a specific tenant
      tags:
      - Roles
      x-codegen-resource-name: unassignUserRole
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/roles/{roleId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/roles/{roleId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/roles/{roleId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/roles/{roleId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/roles/{roleId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers = headers)
          print(response.text.encode("utf8"))
  /user/{tenantId}/users/{userId}/roles/inventory:
    get:
      description: |
        Retrieve all inventory roles assigned to a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is the parent of the user
        </section>
      operationId: getInventoryAssignmentResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the a user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.inventoryassignmentcollection+json:
              schema:
                $ref: '#/components/schemas/InventoryAssignmentCollection'
          description: The request has succeeded and the inventory roles are sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: users/Not Found
                message: "Error retrieving user 123! : Cannot find document with ID\
                  \ ID [type=com_cumulocity_model_idtype_GId, value=123]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: User not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all inventory roles assigned to a user
      tags:
      - Inventory Roles
      x-codegen-resource-name: getUserInventoryRoles
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Assign an existing inventory role to a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN to assign any inventory role to root users in a user hierarchy <b>OR</b> users that are not in any hierarchy<br/>
        ROLE_USER_MANAGEMENT_ADMIN to assign inventory roles accessible by the parent of the assigned user to non-root users in a user hierarchy<br/>
        ROLE_USER_MANAGEMENT_CREATE to assign inventory roles accessible by the current user <b>AND</b> accessible by the parent of the assigned user to the descendants of the current user in a user hierarchy
        </section>
      operationId: postInventoryAssignmentResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the a user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.inventoryassignment+json:
            example:
              managedObject: "1105"
              roles:
              - name: "Operations: Restart Device"
            schema:
              $ref: '#/components/schemas/postInventoryAssignmentResource_request'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.inventoryassignment+json:
              schema:
                $ref: '#/components/schemas/inventoryAssignment'
          description: An inventory role was assigned to a user.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: users/Not Found
                message: "Error retrieving user 123! : Cannot find document with ID\
                  \ ID [type=com_cumulocity_model_idtype_GId, value=123]!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: User not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Assign an inventory role to a user
      tags:
      - Inventory Roles
      x-codegen-resource-name: assignUserInventoryRole
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/{tenantId}/users/{userId}/roles/inventory/{id}:
    delete:
      description: |
        Remove a specific inventory role (by a given ID) assigned to a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>AND</b> (is not in user hierarchy <b>OR</b> is root in the user hierarchy) <b>OR</b> ROLE_USER_MANAGEMENT_ADMIN <b>AND</b> is in user hiararchy <b>AND</b> has parent access to inventory assignments <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user <b>AND</b> is not the current user <b>AND</b> has current user access to inventory assignments <b>AND</b> has parent access to inventory assignments
        </section>
      operationId: deleteInventoryAssignmentResourceById
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the a user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the inventory assignment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: An inventory assignment was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: Not Found
                message: Cannot find the specified role.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Role not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a specific inventory role assigned to a user
      tags:
      - Inventory Roles
      x-codegen-resource-name: unassignUserInventoryRole
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers = headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific inventory role (by a given ID) assigned to a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is the parent of the user
        </section>
      operationId: getInventoryAssignmentResourceById
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the a user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the inventory assignment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.inventoryassignment+json:
              schema:
                $ref: '#/components/schemas/inventoryAssignment'
          description: The request has succeeded and the inventory role is sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: Not Found
                message: Cannot find the specified role.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Role not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific inventory role assigned to a user
      tags:
      - Inventory Roles
      x-codegen-resource-name: getUserInventoryRole
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update a specific inventory role (by a given ID) assigned to a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN to update the assignment of any inventory roles to root users in a user hierarchy <b>OR</b> users that are not in any hierarchy<br/>
        ROLE_USER_MANAGEMENT_ADMIN to update the assignment of inventory roles accessible by the assigned user parent, to non-root users in a user hierarchy<br/>
        ROLE_USER_MANAGEMENT_CREATE to update the assignment of inventory roles accessible by the current user <b>AND</b> the parent of the assigned user to the descendants of the current user in the user hierarchy
        </section>
      operationId: putInventoryAssignmentResourceById
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the a user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          example: jdoe
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the inventory assignment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.inventoryassignment+json:
            schema:
              $ref: '#/components/schemas/inventoryAssignmentReference'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.inventoryassignment+json:
              schema:
                $ref: '#/components/schemas/inventoryAssignment'
          description: An inventory assignment was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: Not Found
                message: Cannot find the specified role.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Role not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a specific inventory role assigned to a user
      tags:
      - Inventory Roles
      x-codegen-resource-name: updateUserInventoryRole
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /user/logout:
    post:
      description: |
        After logging out, a user has to enter valid credentials again to get access to the platform.

        The request is responsible for removing cookies from the browser and invalidating internal platform access tokens.
      operationId: postLogoutUser
      parameters:
      - description: The authorization cookie storing the access token of the user.
          This parameter is specific to OAI-Secure authentication.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          example: authorization=<ACCESS_TOKEN>
          type: string
        style: simple
      - description: Prevents XRSF attack of the authenticated user. This parameter
          is specific to OAI-Secure authentication.
        explode: false
        in: header
        name: X-XSRF-TOKEN
        required: false
        schema:
          example: <X-XSRF-TOKEN>
          type: string
        style: simple
      responses:
        "200":
          description: The request has succeeded and the user is logged out.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Terminate a user's session
      tags:
      - Users
      x-codegen-resource-name: logout
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/user/logout" \
          --header "Cookie: authorization=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...BOiNQET-ECbOkC5-9PpPK35A" \
          --header "X-XSRF-TOKEN: cLHSyflFRXBwOpjzXqAg"\
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/user/logout");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Cookie", "authorization=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...BOiNQET-ECbOkC5-9PpPK35A");
          request.AddHeader("X-XSRF-TOKEN", "cLHSyflFRXBwOpjzXqAg")
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/logout")
              .header("Cookie", "authorization=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...BOiNQET-ECbOkC5-9PpPK35A")
              .header("X-XSRF-TOKEN", "cLHSyflFRXBwOpjzXqAg")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/user/logout")
              .headers({
                  "Cookie": "authorization=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...BOiNQET-ECbOkC5-9PpPK35A"
                  "X-XSRF-TOKEN": "cLHSyflFRXBwOpjzXqAg",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/user/logout"
          headers = {
            "Cookie": "authorization=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...BOiNQET-ECbOkC5-9PpPK35A"
            "X-XSRF-TOKEN": "cLHSyflFRXBwOpjzXqAg",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = { })
          print(response.text.encode("utf8"))
  /measurement:
    get:
      description: |
        Retrieve URIs and URI templates to collections of measurements.

        > **&#9432; Info:** The response sample on the right side contains a subset of all URIs returned by the endpoint method. For all available query parameters see [Retrieve all measurements](#operation/getMeasurementCollectionResource).
      operationId: getMeasurementApiResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.measurementapi+json:
              schema:
                $ref: '#/components/schemas/measurementApiResource'
          description: The request has succeeded and the URIs are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve URIs to collections of measurements
      tags:
      - Measurement API
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/measurement" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/measurement");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/measurement")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/measurement")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/measurement"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /measurement/measurements:
    delete:
      description: |
        Remove measurement collections specified by query parameters.

        DELETE requests are not synchronous. The response could be returned before the delete request has been completed. This may happen especially when there are a lot of measurements to be deleted.

        > **⚠️ Important:** Note that it is possible to call this endpoint without providing any parameter - it may result in deleting all measurements and it is not recommended.

        <section><h5>Required roles</h5>
        ROLE_MEASUREMENT_ADMIN
        </section>
      operationId: deleteMeasurementCollectionResource
      parameters:
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      - description: Start date or date and time of the measurement.
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the measurement.
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: "A characteristic which identifies a managed object or event,\
          \ for example, geolocation, electricity sensor, relay state."
        explode: true
        in: query
        name: fragmentType
        required: false
        schema:
          example: c8y_IsDevice
          minLength: 1
          type: string
        style: form
      - description: The managed object ID to which the measurement is associated.
        explode: true
        in: query
        name: source
        required: false
        schema:
          example: "251994"
          minLength: 1
          type: string
        style: form
      - description: The type of measurement to search for.
        explode: true
        in: query
        name: type
        required: false
        schema:
          example: c8y_Water
          minLength: 1
          type: string
        style: form
      responses:
        "204":
          description: A collection of measurements was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove measurement collections
      tags:
      - Measurements
      x-codegen-resource-name: deleteMeasurements
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/measurement/measurements?source=<managedObjectId>" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/measurement/measurements?source=<managedObjectId>");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/measurement/measurements?source=<managedObjectId>")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/measurement/measurements?source=<managedObjectId>")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/measurement/measurements?source=<managedObjectId>"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve all measurements on your tenant, or a specific subset based on queries.

        In case of executing [range queries](https://en.wikipedia.org/wiki/Range_query_(database)) between an upper and lower boundary, for example, querying using `dateFrom`–`dateTo`, the oldest registered measurements are returned first. It is possible to change the order using the query parameter `revert=true`.

        For large measurement collections, querying older records without filters can be slow as the server needs to scan from the beginning of the input results set before beginning to return the results. For cases when older measurements should be retrieved, it is recommended to narrow the scope by using range queries based on the time stamp reported by a device. The scope of query can also be reduced significantly when a source device is provided.

        Review [Measurements Specifics](#tag/Measurements-specifics) for details about data streaming and response formats.

        <section><h5>Required roles</h5>
        ROLE_MEASUREMENT_READ
        </section>
      operationId: getMeasurementCollectionResource
      parameters:
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: Start date or date and time of the measurement.
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the measurement.
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: |
          If you are using a range query (that is, at least one of the `dateFrom` or `dateTo` parameters is included in the request), then setting `revert=true` will sort the results by the newest measurements first.
          By default, the results are sorted by the oldest measurements first.
        explode: true
        in: query
        name: revert
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: The managed object ID to which the measurement is associated.
        explode: true
        in: query
        name: source
        required: false
        schema:
          example: "251994"
          minLength: 1
          type: string
        style: form
      - description: The type of measurement to search for.
        explode: true
        in: query
        name: type
        required: false
        schema:
          example: c8y_Water
          minLength: 1
          type: string
        style: form
      - description: The specific series to search for.
        explode: true
        in: query
        name: valueFragmentSeries
        required: false
        schema:
          example: Temperature
          minLength: 1
          type: string
        style: form
      - description: A characteristic which identifies the measurement.
        explode: true
        in: query
        name: valueFragmentType
        required: false
        schema:
          example: c8y_Steam
          minLength: 1
          type: string
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.measurementcollection+json:
              schema:
                $ref: '#/components/schemas/MeasurementCollection'
          description: The request has succeeded and all measurements are sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all measurements
      tags:
      - Measurements
      x-codegen-resource-name: getMeasurements
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/measurement/measurements" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/measurement/measurements");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/measurement/measurements")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/measurement/measurements")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/measurement/measurements"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        A measurement must be associated with a source (managed object) identified by ID, and must specify the type of measurement and the time when it was measured by the device (for example, a thermometer).

        Each measurement fragment is an object (for example, `c8y_Steam`) containing the actual measurements as properties. The property name represents the name of the measurement (for example, `Temperature`) and it contains two properties:

        *   `value` - The value of the individual measurement. The maximum precision for floating point numbers is 64-bit IEEE 754. For integers it's a 64-bit two's complement integer. The `value` is mandatory for a fragment.
        *   `unit` - The unit of the measurements.

        Review the [System of units](#section/System-of-units) section for details about the conversions of units. Also review the [Naming conventions of fragments](https://cumulocity.com/guides/concepts/domain-model/#naming-conventions-of-fragments) in the Concepts guide.

        The example below uses `c8y_Steam` in the request body to illustrate a fragment for recording temperature measurements.

        > **⚠️ Important:** Property names used for fragment and series must not contain whitespaces nor the special characters `. , * [ ] ( ) @ $`. This is required to ensure a correct processing and visualization of measurement series on UI graphs.

        ### Create multiple measurements

        It is also possible to create multiple measurements at once by sending a `measurements` array containing all the measurements to be created. The content type must be `application/vnd.com.nsn.cumulocity.measurementcollection+json`.

        > **&#9432; Info:** For more details about fragments with specific meanings, review the sections [Device management library](#section/Device-management-library) and [Sensor library](#section/Sensor-library).

        <section><h5>Required roles</h5>
        ROLE_MEASUREMENT_ADMIN <b>OR</b> owner of the source <b>OR</b> MEASUREMENT_ADMIN permission on the source
        </section>
      operationId: postMeasurementCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.measurement+json:
            example:
              source:
                id: "251982"
              time: 2020-03-19T12:03:27.845Z
              type: c8y_TemperatureMeasurement
              c8y_Steam:
                Temperature:
                  unit: C
                  value: 100
            schema:
              $ref: '#/components/schemas/measurement'
          application/vnd.com.nsn.cumulocity.measurementcollection+json:
            example:
              measurements:
              - source:
                  id: "251982"
                time: 2020-03-19T12:03:27.845Z
                type: c8y_TemperatureMeasurement
                c8y_Steam:
                  Temperature:
                    unit: C
                    value: 100
            schema:
              $ref: '#/components/schemas/MeasurementCollection'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.measurement+json:
              schema:
                $ref: '#/components/schemas/measurement'
            application/vnd.com.nsn.cumulocity.measurementcollection+json:
              schema:
                $ref: '#/components/schemas/MeasurementCollection'
          description: A measurement was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create a measurement
      tags:
      - Measurements
      x-codegen-resource-name: createMeasurement
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/measurement/measurements" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/measurement/measurements");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/measurement/measurements")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/measurement/measurements")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/measurement/measurements"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /measurement/measurements/{id}:
    delete:
      description: |
        Remove a specific measurement by a given ID.

        <section><h5>Required roles</h5>
        ROLE_MEASUREMENT_ADMIN <b>OR</b> owner of the source <b>OR</b> MEASUREMENT_ADMIN permission on the source
        </section>
      operationId: deleteMeasurementResource
      parameters:
      - description: Unique identifier of the measurement.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "102700509"
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      responses:
        "204":
          description: A measurement was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: measurement/Not Found
                message: Finding measurement from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Measurement not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a specific measurement
      tags:
      - Measurements
      x-codegen-resource-name: deleteMeasurement
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/measurement/measurements/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/measurement/measurements/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/measurement/measurements/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/measurement/measurements/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/measurement/measurements/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific measurement by a given ID.

        <section><h5>Required roles</h5>
        ROLE_MEASUREMENT_READ <b>OR</b> owner of the source <b>OR</b> MEASUREMENT_READ permission on the source
        </section>
      operationId: getMeasurementResource
      parameters:
      - description: Unique identifier of the measurement.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "102700509"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.measurement+json:
              schema:
                $ref: '#/components/schemas/measurement'
          description: The request has succeeded and the measurement is sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: measurement/Not Found
                message: Finding measurement from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Measurement not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific measurement
      tags:
      - Measurements
      x-codegen-resource-name: getMeasurement
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/measurement/measurements/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/measurement/measurements/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/measurement/measurements/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/measurement/measurements/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/measurement/measurements/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /measurement/measurements/series:
    get:
      description: |
        Retrieve a list of series (all or only those matching the specified names) and their values within a given period of a specific managed object (source).<br>
        A series is any fragment in measurement that contains a `value` property.

        It is possible to fetch aggregated results using the `aggregationType` parameter. If the aggregation is not specified, the result will contain no more than 5000 values.

        > **⚠️ Important:** For the aggregation to be done correctly, a device shall always use the same time zone when it sends dates.

        <section><h5>Required roles</h5>
        ROLE_MEASUREMENT_READ <b>OR</b> owner of the source <b>OR</b> MEASUREMENT_READ permission on the source
        </section>
      operationId: getMeasurementSeriesResource
      parameters:
      - description: Fetch aggregated results as specified.
        explode: true
        in: query
        name: aggregationType
        required: false
        schema:
          enum:
          - DAILY
          - HOURLY
          - MINUTELY
          example: MINUTELY
          type: string
        style: form
      - description: Start date or date and time of the measurement.
        explode: true
        in: query
        name: dateFrom
        required: true
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the measurement.
        explode: true
        in: query
        name: dateTo
        required: true
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: |
          If you are using a range query (that is, at least one of the `dateFrom` or `dateTo` parameters is included in the request), then setting `revert=true` will sort the results by the newest measurements first.
          By default, the results are sorted by the oldest measurements first.
        explode: true
        in: query
        name: revert
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: |
          The specific series to search for.
          >**&#9432; Info:** If you query for multiple series at once, comma-separate the values.
        explode: false
        in: query
        name: series
        required: false
        schema:
          example:
          - c8y_Speed.speedX
          - c8y_Speed.speedY
          items:
            minLength: 1
            type: string
          type: array
        style: form
      - description: The managed object ID to which the measurement is associated.
        explode: true
        in: query
        name: source
        required: true
        schema:
          example: "251994"
          minLength: 1
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasurementSeries'
          description: The request has succeeded and the series are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a list of series and their values
      tags:
      - Measurements
      x-codegen-resource-name: getMeasurementSeries
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/measurement/measurements/series?source=<sourceID>&dateFrom=<startDate>&dateTo=<endDate>" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/measurement/measurements/series?source=<sourceID>&dateFrom=<startDate>&dateTo=<endDate>");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/measurement/measurements/series?source=<sourceID>&dateFrom=<startDate>&dateTo=<endDate>")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/measurement/measurements/series?source=<sourceID>&dateFrom=<startDate>&dateTo=<endDate>")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/measurement/measurements/series?source=<sourceID>&dateFrom=<startDate>&dateTo=<endDate>"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /notification2:
    get:
      description: |
        Retrieve URIs and URI templates to collections of notification subscriptions.

        <section><h5>Required roles</h5>
        ROLE_NOTIFICATION_2_ADMIN
        </section>
      operationId: getNotificationApiResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.notificationapi+json:
              schema:
                $ref: '#/components/schemas/NotificationApiResource'
          description: The request has succeeded and the URIs are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve URIs to collections of notification subscriptions
      tags:
      - Notification 2.0 API
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/notification2" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/notification2");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/notification2")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/notification2")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/notification2"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /notification2/token:
    post:
      description: |
        Create a new JWT (JSON web token) access token which can be used to establish a successful WebSocket connection to read a sequence of notifications.

        In general, each request to obtain an access token consists of:

        *  The subscriber name which the client wishes to be identified with.
        *  The subscription name. This value must be associated with a subscription that's already been created and in essence, the obtained token will give the ability to read notifications for the subscription that is specified here.
        *  The token expiration duration.

        <section><h5>Required roles</h5>
        ROLE_NOTIFICATION_2_ADMIN
        </section>
      operationId: postNotificationTokenResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              subscriber: testSubscriber
              subscription: testSubscription
              expiresInMinutes: 90
            schema:
              $ref: '#/components/schemas/NotificationTokenClaims'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationToken'
          description: A notification token was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create a notification token
      tags:
      - Tokens
      x-codegen-resource-name: createToken
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/notification2/token" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/notification2/token");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/notification2/token")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/notification2/token")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/notification2/token"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /notification2/unsubscribe:
    post:
      description: |
        Unsubscribe a notification subscriber using the notification token.

        Once a subscription is made, notifications will be kept until they are consumed by all subscribers who have previously connected to the subscription. For non-volatile subscriptions, this can result in notifications remaining in storage if never consumed by the application.
        They will be deleted if a tenant is deleted. It can take up considerable space in permanent storage for high-frequency notification sources. Therefore, we recommend you to unsubscribe a subscriber that will never run again.
      operationId: postNotificationTokenUnsubscribeResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      - description: Subscriptions associated with this token will be removed.
        explode: true
        in: query
        name: token
        required: true
        schema:
          example: eyJhbGciOiJSUzI1NiJ9...eyJzdWIiOiJ0ZXN0U32Nya
          minLength: 1
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSubscriptionResult'
          description: The notification subscription was deleted or is scheduled for
            deletion.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Unsubscribe a subscriber
      tags:
      - Tokens
      x-codegen-resource-name: unsubscribeSubscriber
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/notification2/unsubscribe?token={token}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/notification2/unsubscribe?token={token}");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/notification2/unsubscribe?token={token}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/notification2/unsubscribe?token={token}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/notification2/unsubscribe?token={token}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("POST", url, headers=headers, data = {})
          print(response.text.encode("utf8"))
  /notification2/subscriptions:
    delete:
      description: |
        Remove subscriptions by source and context.

        >**&#9432; Info:** The request will result in an error if there are no query parameters. The `source` parameter is optional only if the `context` parameter equals `tenant`.

        <section><h5>Required roles</h5>
        ROLE_NOTIFICATION_2_ADMIN
        </section>
      operationId: deleteNotificationSubscriptionBySourceResource
      parameters:
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      - description: |
          The context to which the subscription is associated.
          > **&#9432; Info:** If the value is `mo`, then `source` must also be provided in the query.
        explode: true
        in: query
        name: context
        required: false
        schema:
          default: mo
          enum:
          - mo
          - tenant
          example: tenant
          minLength: 1
          type: string
        style: form
      - description: The managed object ID to which the subscription is associated.
        explode: true
        in: query
        name: source
        required: false
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: form
      responses:
        "204":
          description: A collection of subscriptions was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "422":
          description: Unprocessable Entity – error in query parameters
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove subscriptions by source
      tags:
      - Subscriptions
      x-codegen-resource-name: deleteSubscriptions
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/notification2/subscriptions?source=<managedObjectId>" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/notification2/subscriptions?source=<managedObjectId>");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/notification2/subscriptions?source=<managedObjectId>")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/notification2/subscriptions?source=<managedObjectId>")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/notification2/subscriptions?source=<managedObjectId>"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve all subscriptions on your tenant, or a specific subset based on queries.

        <section><h5>Required roles</h5>
        ROLE_NOTIFICATION_2_ADMIN
        </section>
      operationId: getNotificationSubscriptionCollectionResource
      parameters:
      - description: The context to which the subscription is associated.
        explode: true
        in: query
        name: context
        required: false
        schema:
          enum:
          - mo
          - tenant
          example: mo
          minLength: 1
          type: string
        style: form
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: The managed object ID to which the subscription is associated.
        explode: true
        in: query
        name: source
        required: false
        schema:
          example: "251982"
          minLength: 1
          type: string
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.subscriptioncollection+json:
              schema:
                $ref: '#/components/schemas/NotificationSubscriptionCollection'
          description: The request has succeeded and all subscriptions are sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all subscriptions
      tags:
      - Subscriptions
      x-codegen-resource-name: getSubscriptions
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/notification2/subscriptions" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/notification2/subscriptions");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/notification2/subscriptions")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/notification2/subscriptions")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/notification2/subscriptions"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Create a new subscription, for example, a subscription that forwards measurements and events of a specific type for a given device.

        In general, each subscription may consist of:

        *  The managed object to which the subscription is associated.
        *  The context under which the subscription is to be processed.
        *  The name of the subscription.
        *  The applicable filter criteria.
        *  The option to only include specific custom fragments in the forwarded data.

        <section><h5>Required roles</h5>
        ROLE_NOTIFICATION_2_ADMIN
        </section>
      operationId: postNotificationSubscriptionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.subscription+json:
            example:
              source:
                id: "251982"
              context: mo
              subscription: testSubscription
              subscriptionFilter:
                apis:
                - measurements
                - events
                typeFilter: c8y_Speed
              fragmentsToCopy:
              - c8y_MaxSpeedMeasurement
            schema:
              $ref: '#/components/schemas/NotificationSubscription'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.subscription+json:
              schema:
                $ref: '#/components/schemas/NotificationSubscription'
          description: A notification subscription was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: inventory/Not Found
                message: Finding device data from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Managed object not found.
        "409":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: reliable-notification/Duplicate
                message: "Subscription with source <'251982'>, context <'mo'> & subscription\
                  \ <'testSubscription'> already exists!"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Duplicated subscription.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create a subscription
      tags:
      - Subscriptions
      x-codegen-resource-name: createSubscription
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/notification2/subscriptions" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/vnd.com.nsn.cumulocity.subscription+json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/notification2/subscriptions");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/vnd.com.nsn.cumulocity.subscription+json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/notification2/subscriptions")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/vnd.com.nsn.cumulocity.subscription+json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/notification2/subscriptions")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/vnd.com.nsn.cumulocity.subscription+json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/notification2/subscriptions"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/vnd.com.nsn.cumulocity.subscription+json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /notification2/subscriptions/{id}:
    delete:
      description: |
        Remove a specific subscription by a given ID.

        <section><h5>Required roles</h5>
        ROLE_NOTIFICATION_2_ADMIN
        </section>
      operationId: deleteNotificationSubscriptionResource
      parameters:
      - description: Unique identifier of the notification subscription.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "102700509"
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      responses:
        "204":
          description: A subscription was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: reliable-notification/Not Found
                message: Finding subscription from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Subscription not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a specific subscription
      tags:
      - Subscriptions
      x-codegen-resource-name: deleteSubscription
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/notification2/subscriptions/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/notification2/subscriptions/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/notification2/subscriptions/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/notification2/subscriptions/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/notification2/subscriptions/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific subscription by a given ID.

        <section><h5>Required roles</h5>
        ROLE_NOTIFICATION_2_ADMIN
        </section>
      operationId: getNotificationSubscriptionResource
      parameters:
      - description: Unique identifier of the notification subscription.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "102700509"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.subscription+json:
              schema:
                $ref: '#/components/schemas/NotificationSubscription'
          description: The request has succeeded and the subscription is sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Forbidden
                message: Access is denied.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Not enough permissions/roles to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: reliable-notification/Not Found
                message: Finding subscription from database failed
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Subscription not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific subscription
      tags:
      - Subscriptions
      x-codegen-resource-name: getSubscription
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/notification2/subscriptions/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/notification2/subscriptions/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/notification2/subscriptions/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/notification2/subscriptions/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/notification2/subscriptions/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /notification/realtime:
    post:
      description: "The Real-time notification API enables responsive communication\
        \ from Cumulocity IoT over restricted networks towards clients such as web\
        \ browser and mobile devices. All clients subscribe to so-called channels\
        \ to receive messages. These channels are filled by Cumulocity IoT with the\
        \ output of [Operations](#tag/Operations). In addition, particular system\
        \ channels are used for the initial handshake with clients, subscription to\
        \ channels, removal from channels and connection. The [Bayeux protocol](https://docs.cometd.org/current/reference/#_concepts_bayeux_protocol)\
        \ over HTTPS or WSS is used as communication mechanism."
      operationId: postNotificationRealtimeResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "Used to explicitly control the processing mode of the request.\
          \ See [Processing mode](#processing-mode) for more details."
        explode: false
        in: header
        name: X-Cumulocity-Processing-Mode
        required: false
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
          example: PERSISTENT
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
            - channel: /meta/handshake
              version: "1.0"
            schema:
              $ref: '#/components/schemas/realtimeNotification'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/realtimeNotification'
          description: The operation was completed and the result is sent in the response.
        "400":
          description: Unprocessable Entity – invalid payload.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Responsive communication
      tags:
      - Real-time notification API
      x-codegen-resource-name: createRealtimeNotification
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/notification/realtime" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/notification/realtime");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/notification/realtime")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/notification/realtime")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/notification/realtime"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /retention/retentions:
    get:
      description: |
        Retrieve all retention rules on your tenant.

        <section><h5>Required roles</h5>
        ROLE_RETENTION_RULE_READ
        </section>
      operationId: getRetentionRuleCollectionResource
      parameters:
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.retentionrulecollection+json:
              schema:
                $ref: '#/components/schemas/RetentionRuleCollection'
          description: The request has succeeded and all retention rules are sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all retention rules
      tags:
      - Retention rules
      x-codegen-resource-name: getRetentionRules
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/retention/retentions" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/retention/retentions");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/retention/retentions")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/retention/retentions")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/retention/retentions"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Create a retention rule on your tenant.

        <section><h5>Required roles</h5>
        ROLE_RETENTION_RULE_ADMIN
        </section>
      operationId: postRetentionRuleCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.retentionrule+json:
            example:
              dataType: ALARM
              fragmentType: '*'
              maximumAge: 20
            schema:
              $ref: '#/components/schemas/postRetentionRuleCollectionResource_request'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.retentionrule+json:
              schema:
                $ref: '#/components/schemas/retentionRule'
          description: A retention rule was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create a retention rule
      tags:
      - Retention rules
      x-codegen-resource-name: createRetentionRule
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/retention/retentions" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/retention/retentions");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/retention/retentions")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/retention/retentions")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/retention/retentions"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /retention/retentions/{id}:
    delete:
      description: |
        Remove a specific retention rule by a given ID.

        <section><h5>Required roles</h5>
        ROLE_RETENTION_RULE_ADMIN <b>AND</b> the rule is editable
        </section>
      operationId: deleteRetentionRuleResource
      parameters:
      - description: Unique identifier of the retention rule.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "1569"
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: A retention rule was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: retention/Not Found
                message: Retention rule not found
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Retention rule not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a retention rule
      tags:
      - Retention rules
      x-codegen-resource-name: deleteRetentionRule
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/retention/retentions/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/retention/retentions/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/retention/retentions/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/retention/retentions/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/retention/retentions/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific retention rule by a given ID.

        <section><h5>Required roles</h5>
        ROLE_RETENTION_RULE_READ
        </section>
      operationId: getRetentionRuleResource
      parameters:
      - description: Unique identifier of the retention rule.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "1569"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.retentionrule+json:
              schema:
                $ref: '#/components/schemas/retentionRule'
          description: The request has succeeded and the retention rule is sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: retention/Not Found
                message: Retention rule not found
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Retention rule not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a retention rule
      tags:
      - Retention rules
      x-codegen-resource-name: getRetentionRule
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/retention/retentions/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/retention/retentions/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/retention/retentions/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/retention/retentions/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/retention/retentions/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update a specific retention rule by a given ID.

        <section><h5>Required roles</h5>
        ROLE_RETENTION_RULE_ADMIN <b>AND</b> (the rule is editable <b>OR</b> it's the tenant management)
        </section>
      operationId: putRetentionRuleResource
      parameters:
      - description: Unique identifier of the retention rule.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "1569"
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.retentionrule+json:
            example:
              dataType: ALARM
              maximumAge: 20
            schema:
              $ref: '#/components/schemas/retentionRule'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.retentionrule+json:
              schema:
                $ref: '#/components/schemas/retentionRule'
          description: A retention rule was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: retention/Not Found
                message: Retention rule not found
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Retention rule not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a retention rule
      tags:
      - Retention rules
      x-codegen-resource-name: updateRetentionRule
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/retention/retentions/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/retention/retentions/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/retention/retentions/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/retention/retentions/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/retention/retentions/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /tenant:
    get:
      description: |
        Retrieve URIs and URI templates to collections of tenants and options.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_READ
        </section>
      operationId: getTenantsApiResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.tenantapi+json:
              schema:
                $ref: '#/components/schemas/tenantApiResource'
          description: The request has succeeded and the URIs are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve URIs to collections of tenants
      tags:
      - Tenant API
  /tenant/tenants:
    get:
      description: |
        Retrieve all subtenants of the current tenant.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_READ
        </section>
      operationId: getTenantCollectionResource
      parameters:
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.tenantcollection+json:
              schema:
                $ref: '#/components/schemas/TenantCollection'
          description: The request has succeeded and the subtenants are sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all subtenants
      tags:
      - Tenants
      x-codegen-resource-name: getTenants
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/tenants" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/tenants")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/tenants")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/tenants"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Create a subtenant for the current tenant.

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_CREATE) <b>AND</b> the current tenant is allowed to create subtenants
        </section>
      operationId: postTenantCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.tenant+json:
            example:
              adminEmail: john@doe.com
              adminName: johndoe
              adminPass: th3m4tr1xh4syu0
              company: ACME AG
              contactName: John Doe
              contactPhone: +52 333 567 1234
              domain: mytenant.cumulocity.com
            schema:
              $ref: '#/components/schemas/postTenantCollectionResource_request'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.tenant+json:
              schema:
                $ref: '#/components/schemas/tenant'
          description: A tenant was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "409":
          description: Conflict – The tenant domain/ID already exists.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create a tenant
      tags:
      - Tenants
      x-codegen-resource-name: createTenant
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/tenant/tenants" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/tenants")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/tenants")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/tenants"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /tenant/currentTenant:
    get:
      description: |
        Retrieve information about the current tenant.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_READ <b>OR</b> ROLE_SYSTEM
        </section>
      operationId: getCurrentTenantResource
      parameters:
      - description: "When set to `true`, the returned result will contain the parent\
          \ of the current tenant."
        explode: true
        in: query
        name: withParent
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.currenttenant+json:
              schema:
                $ref: '#/components/schemas/CurrentTenant'
          description: The request has succeeded and the information is sent in the
            response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve the current tenant
      tags:
      - Tenants
      x-codegen-resource-name: getCurrentTenant
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/currentTenant" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/currentTenant");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/currentTenant")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/currentTenant")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/currentTenant"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /tenant/tenants/{tenantId}:
    delete:
      description: |
        Remove a specific tenant by a given ID.

        > **⚠️ Important:** Deleting a subtenant cannot be reverted. For security reasons, it is therefore only available in the management tenant. You cannot delete tenants from any tenant but the management tenant.
        >
        > Administrators in Enterprise Tenants are only allowed to suspend active subtenants, but not to delete them.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN <b>AND</b> is the management tenant
        </section>
      operationId: deleteTenantResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: A tenant was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Not Found
                message: There is no tenant with id = t01
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Tenant not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a specific tenant
      tags:
      - Tenants
      x-codegen-resource-name: deleteTenant
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific tenant by a given ID.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_READ <b>AND</b> the current tenant is its parent <b>OR</b> is the management tenant
        </section>
      operationId: getTenantResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.tenant+json:
              schema:
                $ref: '#/components/schemas/tenant'
          description: The request has succeeded and the tenant is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Not Found
                message: There is no tenant with id = t01
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Tenant not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific tenant
      tags:
      - Tenants
      x-codegen-resource-name: getTenant
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update a specific tenant by a given ID.

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_UPDATE) <b>AND</b> (the current tenant is its parent <b>AND</b> the current tenant is allowed to create subtenants) <b>OR</b> is the management tenant
        </section>
      operationId: putTenantResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.tenant+json:
            example:
              contactName: John Doe
              contactPhone: +52 333 567 1234
            schema:
              $ref: '#/components/schemas/putTenantResource_request'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.tenant+json:
              schema:
                $ref: '#/components/schemas/tenant'
          description: A tenant was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Not Found
                message: There is no tenant with id = t01
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Tenant not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a specific tenant
      tags:
      - Tenants
      x-codegen-resource-name: updateTenant
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /tenant/tenants/{tenantId}/applications:
    get:
      description: |
        Retrieve the tenant subscribed applications by a given tenant ID.

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_READ <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> (the current tenant is its parent <b>OR</b> is the management tenant)
        </section>
      operationId: getTenantApplicationReferenceCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.applicationreferencecollection+json:
              schema:
                $ref: '#/components/schemas/ApplicationReferenceCollection'
          description: The request has succeeded and the tenant applications are sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Not Found
                message: There is no tenant with id = t01
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Tenant not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve subscribed applications
      tags:
      - Tenant applications
      x-codegen-resource-name: getSubscribedApplications
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Subscribe a tenant (by a given ID) to an application.

        <section><h5>Required roles</h5>
        1. the current tenant is application owner and has the role ROLE_APPLICATION_MANAGEMENT_ADMIN <b>OR</b><br>
        2. for applications that are not microservices, the current tenant is the management tenant or the parent of the application owner tenant, and the user has one of the follwoing roles: ROLE_TENANT_MANAGEMENT_ADMIN, ROLE_TENANT_MANAGEMENT_UPDATE <b>OR</b><br>
        3. for microservices, the current tenant is the management tenant or the parent of the application owner tenant, and the user has the role ROLE_TENANT_MANAGEMENT_ADMIN OR ROLE_TENANT_MANAGEMENT_UPDATE and one of following conditions is met:<br>
        * the microservice has no manifest<br>
        * the microservice version is supported<br>
        * the current tenant is subscribed to 'feature-privileged-microservice-hosting'
        </section>
      operationId: postTenantApplicationReferenceCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.applicationreference+json:
            schema:
              $ref: '#/components/schemas/SubscribedApplicationReference'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.applicationreference+json:
              schema:
                $ref: '#/components/schemas/ApplicationReference'
          description: A tenant was subscribed to an application.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: applications/Not Found
                message: Could not find application by ID 20200301
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Application not found.
        "409":
          description: The application is already assigned to the tenant.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Subscribe to an application
      tags:
      - Tenant applications
      x-codegen-resource-name: subscribeApplication
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /tenant/tenants/{tenantId}/applications/{applicationId}:
    delete:
      description: |
        Unsubscribe a tenant (by a given tenant ID) from an application (by a given application ID).

        <section><h5>Required roles</h5>
        (ROLE_APPLICATION_MANAGEMENT_ADMIN <b>AND</b> is the application owner <b>AND</b> is the current tenant) <b>OR</b><br>
        ((ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_UPDATE) <b>AND</b> (the current tenant is its parent <b>OR</b> is the management tenant))
        </section>
      operationId: deleteTenantApplicationReferenceResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          example: "20200301"
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: A tenant was unsubscribed from an application.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Not Found
                message: There is no tenant with id = t01
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Tenant not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Unsubscribe from an application
      tags:
      - Tenant applications
      x-codegen-resource-name: unsubscribeApplication
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications/{applicationId}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications/{applicationId}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications/{applicationId}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications/{applicationId}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications/{applicationId}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
  /tenant/tenants/{tenantId}/trusted-certificates:
    get:
      description: |
        Retrieve all the trusted certificates of a specific tenant (by a given ID).

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> (is the current tenant)
        </section>
      operationId: getTrustedCertificateCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificateCollection'
          description: The request has succeeded and the trusted certificates are
            sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Not Found
                message: There is no tenant with id = t01
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Tenant not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all stored certificates
      tags:
      - Trusted certificates
      x-codegen-resource-name: getTrustedCertificates
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Add a new trusted certificate to a specific tenant (by a given ID) which can be further used by the devices to establish connections with the Cumulocity IoT platform.

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> (is the current tenant)
        </section>
      operationId: postTrustedCertificateCollectionResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              name: My Certificate
              status: ENABLED
              autoRegistrationEnabled: true
              certInPemFormat: |
                -----BEGIN CERTIFICATE-----
                  MIIFezCCA2OgAwIBAgIUNU2ZnXIdu9aq+O7x2emLTgXgQEowDQYJKoZIhvcNAQEL
                  BQAwRTELMAkGA1UEBhMCUEwxDzANBgNVBAoMBmluZXR1bTEPMA0GA1UECwwGbHVi
                  bGluMRQwEgYDVQQDDAtiYXNpY0NvbW1vbjAeFw0yMTA5MDMwNzQyMDBaFw00MTA4
                  MjkwNzQyMDBaMEUxCzAJBgNVBAYTAlBMMQ8wDQYDVQQKDAZpbmV0dW0xDzANBgNV
                  BAsMBmx1YmxpbjEUMBIGA1UEAwwLYmFzaWNDb21tb24wggIiMA0GCSqGSIb3DQEB
                  AQUAA4ICDwAwggIKAoICAQDEc1NevRvKaIDs5CsGbIc/ETm3gHmG3OP9Z8ULQv1y
                  W1VzdjSKfgoVWVEsbhuhaRaWyIuaFh6dsWpWEcXpHkq+DiRuQGifBmUNFURZQ8Aw
                  UOrQ4F10UuzulEYauYh218rGSynLnIXCO3UHXGjWX+iiXPjbesFcnLPaarmLmQU9
                  AAh9MpBb3ztMzh5wRGcyVpuDxZ7e0HDBlI7hNMEqCFO/brJsILtv5q0j4JoShyWX
                  NVV8tX8P+biMlyMcVoZJazBfYuYErxmxdXtORxOkfge815ltGoMI9V4YSSex3/Fv
                  /PBavpF4iueqcrWQF3dhctAViPEzpMoefTu+cFtB/40wx/NHiBF5x5rjcT2s/+6W
                  b9OGLxLLf84XpYlHWtucfFLzznPMiXNegfkJpU0dMuMh1GT5WNTfmcPV3LiasbI0
                  GNq6mWKLgcRHX95pw16vw0CqzPnFTASztnI12mIYm6D0oQ+tHjLoPrW3fiZEeF67
                  fVA8LNWJwCkzHlnnNl5HP15K+GoscyzyMKj7ViAqN+XZaCRpRqYNZGkGXB9mSVQn
                  0oK6eRX8oQ4NQQW49VNoho9I8DhcCdMglMj9bhciIy2LrSwB8Sx9nB1C9wiHDbCA
                  fTy1nxEJS9gUGg7LNmRxlpQFBuQ0ndq87UEUdjchvbmJD7T5ZYM0LgDopJypBsqF
                  gQIDAQABo2MwYTAdBgNVHQ4EFgQUUS08257ro38KOB1a8pqYL3P2NvAwHwYDVR0j
                  BBgwFoAUUS08257ro38KOB1a8pqYL3P2NvAwEgYDVR0TAQH/BAgwBgEB/wIBCjAL
                  BgNVHQ8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIBAGtYjON+CFzVGRkajHK1RKZS
                  J4kAfQlrXq1vG2b4jWYSLgrNw4o93xx0yLK0HVHO12juFhUrmlfhCB/iGI9iL2IO
                  h7v+PQ4L5wQJWfxZNWDZpqbF3S7UyDGAFx1J3MwjIhkoPpaIB0km+sQCJxn5Vt36
                  OPCKmORm4tplBHNauP9PpS418HAC9uyrew/h/0BLLaPF9BwFWk4HmSwfSFTHOvyh
                  hC1G4cEzHuiadLGCPXwerCe5As9F4InvIYmQ4UxAOtnlQcnQYOowFSrMobkArGR9
                  HcG1b0vWQJdzVrDU7zcRzD90ehwsXJIczOQoa/Hmb3Njlop8LyTFPjeXeoJf6PJE
                  MHy08IOLvaX4UsRiKLKJ28JEhVVemBrPspHeADqmlbeBotQ6OToWFeki9qQSz5Lw
                  lks/4qfRn6Xl3rmRSH8FdbK3VdIYInT7PTz5W2EBE8Ql5vneSPb9aank+9H67mB5
                  GQ8uYpxcs6Qjyy62pkfejlHHHh5oqEq0b6w7YyUuMAEW0JB0WevoCS8iVl8hKbyK
                  94u/PqW6lH+agw4kaMzaeMwBmppAy4JsiEKKavvP3jO6NDMc1bHt5q2+XTRPdlQY
                  DVZJfXybnOvsTQv41A4zyHSaNZsH1AyhJPfFKAMPXhajm7dBCi87bamMj4NyZt8f
                  PPBUaE6x9fMfuGJbcsAR
                  -----END CERTIFICATE-----
            schema:
              $ref: '#/components/schemas/TrustedCertificate'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificate'
          description: The certificate was added to the tenant.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Not Found
                message: There is no tenant with id = t01
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Tenant not found.
        "409":
          description: Duplicate – A certificate with the same fingerprint already
            exists.
        "422":
          description: Unprocessable Entity – Invalid certificate data.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Add a new certificate
      tags:
      - Trusted certificates
      x-codegen-resource-name: addTrustedCertificate
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /tenant/tenants/{tenantId}/trusted-certificates/bulk:
    post:
      description: |
        Add multiple trusted certificates to a specific tenant (by a given ID) which can be further used by the devices to establish connections with the Cumulocity IoT platform.

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> (is the current tenant)
        </section>
      operationId: postTrustedCertificateCollectionResourceBulk
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              certificates:
              - name: My Certificate
                status: ENABLED
                autoRegistrationEnabled: true
                certInPemFormat: |
                  -----BEGIN CERTIFICATE-----
                    MIIFezCCA2OgAwIBAgIUNU2ZnXIdu9aq+O7x2emLTgXgQEowDQYJKoZIhvcNAQEL
                    BQAwRTELMAkGA1UEBhMCUEwxDzANBgNVBAoMBmluZXR1bTEPMA0GA1UECwwGbHVi
                    bGluMRQwEgYDVQQDDAtiYXNpY0NvbW1vbjAeFw0yMTA5MDMwNzQyMDBaFw00MTA4
                    MjkwNzQyMDBaMEUxCzAJBgNVBAYTAlBMMQ8wDQYDVQQKDAZpbmV0dW0xDzANBgNV
                    BAsMBmx1YmxpbjEUMBIGA1UEAwwLYmFzaWNDb21tb24wggIiMA0GCSqGSIb3DQEB
                    AQUAA4ICDwAwggIKAoICAQDEc1NevRvKaIDs5CsGbIc/ETm3gHmG3OP9Z8ULQv1y
                    W1VzdjSKfgoVWVEsbhuhaRaWyIuaFh6dsWpWEcXpHkq+DiRuQGifBmUNFURZQ8Aw
                    UOrQ4F10UuzulEYauYh218rGSynLnIXCO3UHXGjWX+iiXPjbesFcnLPaarmLmQU9
                    AAh9MpBb3ztMzh5wRGcyVpuDxZ7e0HDBlI7hNMEqCFO/brJsILtv5q0j4JoShyWX
                    NVV8tX8P+biMlyMcVoZJazBfYuYErxmxdXtORxOkfge815ltGoMI9V4YSSex3/Fv
                    /PBavpF4iueqcrWQF3dhctAViPEzpMoefTu+cFtB/40wx/NHiBF5x5rjcT2s/+6W
                    b9OGLxLLf84XpYlHWtucfFLzznPMiXNegfkJpU0dMuMh1GT5WNTfmcPV3LiasbI0
                    GNq6mWKLgcRHX95pw16vw0CqzPnFTASztnI12mIYm6D0oQ+tHjLoPrW3fiZEeF67
                    fVA8LNWJwCkzHlnnNl5HP15K+GoscyzyMKj7ViAqN+XZaCRpRqYNZGkGXB9mSVQn
                    0oK6eRX8oQ4NQQW49VNoho9I8DhcCdMglMj9bhciIy2LrSwB8Sx9nB1C9wiHDbCA
                    fTy1nxEJS9gUGg7LNmRxlpQFBuQ0ndq87UEUdjchvbmJD7T5ZYM0LgDopJypBsqF
                    gQIDAQABo2MwYTAdBgNVHQ4EFgQUUS08257ro38KOB1a8pqYL3P2NvAwHwYDVR0j
                    BBgwFoAUUS08257ro38KOB1a8pqYL3P2NvAwEgYDVR0TAQH/BAgwBgEB/wIBCjAL
                    BgNVHQ8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIBAGtYjON+CFzVGRkajHK1RKZS
                    J4kAfQlrXq1vG2b4jWYSLgrNw4o93xx0yLK0HVHO12juFhUrmlfhCB/iGI9iL2IO
                    h7v+PQ4L5wQJWfxZNWDZpqbF3S7UyDGAFx1J3MwjIhkoPpaIB0km+sQCJxn5Vt36
                    OPCKmORm4tplBHNauP9PpS418HAC9uyrew/h/0BLLaPF9BwFWk4HmSwfSFTHOvyh
                    hC1G4cEzHuiadLGCPXwerCe5As9F4InvIYmQ4UxAOtnlQcnQYOowFSrMobkArGR9
                    HcG1b0vWQJdzVrDU7zcRzD90ehwsXJIczOQoa/Hmb3Njlop8LyTFPjeXeoJf6PJE
                    MHy08IOLvaX4UsRiKLKJ28JEhVVemBrPspHeADqmlbeBotQ6OToWFeki9qQSz5Lw
                    lks/4qfRn6Xl3rmRSH8FdbK3VdIYInT7PTz5W2EBE8Ql5vneSPb9aank+9H67mB5
                    GQ8uYpxcs6Qjyy62pkfejlHHHh5oqEq0b6w7YyUuMAEW0JB0WevoCS8iVl8hKbyK
                    94u/PqW6lH+agw4kaMzaeMwBmppAy4JsiEKKavvP3jO6NDMc1bHt5q2+XTRPdlQY
                    DVZJfXybnOvsTQv41A4zyHSaNZsH1AyhJPfFKAMPXhajm7dBCi87bamMj4NyZt8f
                    PPBUaE6x9fMfuGJbcsAR
                    -----END CERTIFICATE-----
            schema:
              $ref: '#/components/schemas/TrustedCertificateCollection'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificateCollection'
          description: The certificates were added to the tenant.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Not Found
                message: There is no tenant with id = t01
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Tenant not found.
        "409":
          description: Duplicate – A certificate with the same fingerprint already
            exists.
        "422":
          description: Unprocessable Entity – Invalid certificates data.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Add multiple certificates
      tags:
      - Trusted certificates
      x-codegen-resource-name: addTrustedCertificates
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/bulk" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/bulk");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/bulk")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/bulk")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/bulk"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}:
    delete:
      description: "Remove a stored trusted certificate (by a given fingerprint) from\
        \ a specific tenant (by a given ID). \nWhen a trusted certificate is deleted,\
        \ the established MQTT connection to all devices that are using the corresponding\
        \ certificate are closed.\n\n<section><h5>Required roles</h5>\n(ROLE_TENANT_MANAGEMENT_ADMIN\
        \ <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> (is the current tenant <b>OR</b>\
        \ is the management tenant)\n</section>\n"
      operationId: deleteTrustedCertificateResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of a trusted certificate.
        explode: false
        in: path
        name: fingerprint
        required: true
        schema:
          example: df9c19e0433c6861fak899078b76fe56a3e7dd14
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: The trusted certificate was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          description: Certificate not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a stored certificate
      tags:
      - Trusted certificates
      x-codegen-resource-name: removeTrustedCertificate
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve the data of a stored trusted certificate (by a given fingerprint) of a specific tenant (by a given ID).

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> (is the current tenant <b>OR</b> is the management tenant)
        </section>
      operationId: getTrustedCertificateResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of a trusted certificate.
        explode: false
        in: path
        name: fingerprint
        required: true
        schema:
          example: df9c19e0433c6861fak899078b76fe56a3e7dd14
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificate'
          description: The request has succeeded and the trusted certificate is sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a stored certificate
      tags:
      - Trusted certificates
      x-codegen-resource-name: getTrustedCertificate
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    put:
      description: |
        Update the data of a stored trusted certificate (by a given fingerprint) of a specific tenant (by a given ID).

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> (is the current tenant <b>OR</b> is the management tenant)
        </section>
      operationId: putTrustedCertificateResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of a trusted certificate.
        explode: false
        in: path
        name: fingerprint
        required: true
        schema:
          example: df9c19e0433c6861fak899078b76fe56a3e7dd14
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              name: My Certificate
              status: ENABLED
            schema:
              $ref: '#/components/schemas/putTrustedCertificateResource_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificate'
          description: The certificate was updated on the tenant.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          description: Certificate not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a stored certificate
      tags:
      - Trusted certificates
      x-codegen-resource-name: updateTrustedCertificate
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /tenant/tenants/{tenantId}/tfa:
    get:
      description: |
        Retrieve the two-factor authentication settings of a specific tenant by a given tenant ID.

        <section><h5>Required roles</h5>
        ((ROLE_TENANT_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_READ) <b>AND</b> (the current tenant is its parent <b>OR</b> is the management tenant <b>OR</b> the current user belongs to the tenant)) <b>OR</b> (the user belongs to the tenant <b>AND</b> ROLE_USER_MANAGEMENT_OWN_READ)
        </section>
      operationId: getTenantsTfaResourceTfa
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantTfaData'
          description: The request has succeeded and the TFA settings are sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Not Found
                message: There is no tenant with id = t01
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Tenant not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve TFA settings of a specific tenant
      tags:
      - Tenants
      x-codegen-resource-name: getTenantTfaSettings
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers = headers)
          print(response.text.encode("utf8"))
  /tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/pop:
    post:
      description: |
        Provide the proof of possession for a specific uploaded certificate (by a given fingerprint) for a specific tenant (by a given ID).

        <div class="reqRoles"><div><h5></h5></div><div>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> is the current tenant
        </div></div>
      operationId: postTrustedCertificatePopResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of a trusted certificate.
        explode: false
        in: path
        name: fingerprint
        required: true
        schema:
          example: df9c19e0433c6861fak899078b76fe56a3e7dd14
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadedTrustedCertSignedVerificationCode'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificate'
          description: The provided signed verification code check was successful.
        "400":
          content:
            application/json:
              example:
                error: tenants/Bad Request
                message: "Wrong Proof Of Possession plaintext used for tenant <'t012'>.\
                  \ Certificate <'df9c19e0433c6861bac899078b76fe56a3e7dd14'>, usage\
                  \ not granted."
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: The provided signed verification code is not correct.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: certificate/Not Found
                message: Cannot find certificate with fingerprint abcdef1234567890.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Trusted certificate not found.
        "422":
          content:
            application/json:
              examples:
                unprocessable:
                  value:
                    error: tenants/Unprocessable Entity
                    message: Cannot process certificate data <'df9c19e0433c6861bac899078b76fe56a3e7dd14'>
                      for tenant <'t012'>.
                    info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
                invalidData:
                  value:
                    error: tenants/Invalid Data
                    message: Cannot process user certificate data <'df9c19e0433c6861bac899078b76fe56a3e7dd14'>
                      for tenant <'t012'>.
                    info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Proof of possession for the certificate was not confirmed.
      security:
      - Basic: []
      - OAuthInternal: []
      - SSO: []
      summary: Provide the proof of possession for an already uploaded certificate
      tags:
      - Trusted certificates
      x-codegen-resource-name: proveCertificatePossession
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/pop" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/pop");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/pop")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/pop")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/pop"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/confirmed:
    post:
      description: |
        Confirm an already uploaded certificate (by a given fingerprint) for a specific tenant (by a given ID).

        <div class="reqRoles"><div><h5></h5></div><div>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> is the management tenant
        </div></div>
      operationId: postConfirmedTrustedCertificatePopResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of a trusted certificate.
        explode: false
        in: path
        name: fingerprint
        required: true
        schema:
          example: df9c19e0433c6861fak899078b76fe56a3e7dd14
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificate'
          description: The certificate is confirmed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: certificate/Not Found
                message: Cannot find certificate with fingerprint abcdef1234567890.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Trusted certificate not found.
        "422":
          content:
            application/json:
              examples:
                unprocessable:
                  value:
                    error: tenants/Unprocessable Entity
                    message: Cannot process certificate data <'df9c19e0433c6861bac899078b76fe56a3e7dd14'>
                      for tenant <'t012'>.
                    info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
                invalidData:
                  value:
                    error: tenants/Invalid Data
                    message: Cannot process user certificate data <'df9c19e0433c6861bac899078b76fe56a3e7dd14'>
                      for tenant <'t012'>.
                    info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: The verification was not successful. Certificate not confirmed.
      security:
      - Basic: []
      - OAuthInternal: []
      - SSO: []
      summary: Confirm an already uploaded certificate
      tags:
      - Trusted certificates
      x-codegen-resource-name: confirmCertificate
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/confirmed" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/confirmed");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/confirmed")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "applicatio json.dumps(<Payload>)n/json")
              .header("Accept", "application/json")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/confirmed")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/confirmed"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers)
          print(response.text.encode("utf8"))
  /tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/verification-code:
    post:
      description: |
        Generate a verification code for the proof of possession operation for the certificate (by a given fingerprint).

        <div class="reqRoles"><div><h5></h5></div><div>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> is the current tenant
        </div></div>
      operationId: postVerificationCodeTrustedCertificatesPopResource
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of a trusted certificate.
        explode: false
        in: path
        name: fingerprint
        required: true
        schema:
          example: df9c19e0433c6861fak899078b76fe56a3e7dd14
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificate'
          description: The verification code was generated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: certificate/Not Found
                message: Cannot find certificate with fingerprint abcdef1234567890.
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Trusted certificate not found.
      security:
      - Basic: []
      - OAuthInternal: []
      - SSO: []
      summary: Generate a verification code for the proof of possession operation
        for the given certificate
      tags:
      - Trusted certificates
      x-codegen-resource-name: generateVerificationCode
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/verification-code" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/verification-code");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/verification-code")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/verification-code")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/verification-code"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers)
          print(response.text.encode("utf8"))
  /tenant/statistics:
    get:
      description: |
        Retrieve usage statistics of the current tenant.

        <section><h5>Required roles</h5>
        ROLE_TENANT_STATISTICS_READ
        </section>
      operationId: getTenantUsageStatisticsCollectionResource
      parameters:
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: Start date or date and time of the statistics.
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the statistics.
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of elements. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalElements
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.tenantusagestatisticscollection+json:
              schema:
                $ref: '#/components/schemas/TenantUsageStatisticsCollection'
          description: The request has succeeded and the tenant statistics are sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve statistics of the current tenant
      tags:
      - Usage statistics
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/statistics"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /tenant/statistics/summary:
    get:
      description: |-
        Retrieve a usage statistics summary of a tenant.
        <section><h5>Required roles</h5> ROLE_TENANT_STATISTICS_READ <b>OR</b> ROLE_INVENTORY_READ <br/> If the `tenant` request parameter is specified, then the current tenant must be the management tenant <b>OR</b> the parent of the requested `tenant`. </section>
      operationId: getSummaryUsageStatistics
      parameters:
      - description: Start date or date and time of the statistics.
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the statistics.
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: true
        in: query
        name: tenant
        required: false
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.tenantusagestatisticssummary+json:
              schema:
                $ref: '#/components/schemas/SummaryTenantUsageStatistics'
          description: The request has succeeded and the usage statistics summary
            is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Not Found
                message: There is no tenant with id = t01
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Tenant not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a usage statistics summary
      tags:
      - Usage statistics
      x-codegen-resource-name: getTenantUsageStatistics
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics/summary" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/summary");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics/summary")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics/summary")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/statistics/summary"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /tenant/statistics/allTenantsSummary:
    get:
      description: |
        Retrieve a summary of all tenants usage statistics.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_READ
        </section>
      operationId: getSummaryAllTenantsUsageStatistics
      parameters:
      - description: Start date or date and time of the statistics.
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the statistics.
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummaryAllTenantsUsageStatisticsCollection'
          description: The request has succeeded and the usage statistics summary
            is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a summary of all usage statistics
      tags:
      - Usage statistics
      x-codegen-resource-name: getTenantsUsageStatistics
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics/allTenantsSummary" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/allTenantsSummary");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics/allTenantsSummary")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics/allTenantsSummary")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/statistics/allTenantsSummary"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /tenant/statistics/files:
    get:
      description: |
        Retrieve usage statistics summary files report metadata.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN
        </section>
      operationId: getTenantUsageStatisticsFileCollectionResource
      parameters:
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: Start date or date and time of the statistics file generation.
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: End date or date and time of the statistics file generation.
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          format: date-time
          minLength: 10
          type: string
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.tenantStatisticsfilecollection+json:
              schema:
                $ref: '#/components/schemas/TenantUsageStatisticsFileCollection'
          description: The request has succeeded and the tenant statistics are sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve usage statistics files metadata
      tags:
      - Usage statistics
      x-codegen-resource-name: getMetadata
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics/files" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/files");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics/files")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics/files")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/statistics/files"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
    post:
      description: |
        Generate a TEST statistics file report for a given time range.

        There are two types of statistics files:
        * REAL - generated by the system on the first day of the month and including statistics from the previous month.
        * TEST - generated by the user with a time range specified in the query parameters (`dateFrom`, `dateTo`).
        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_CREATE
        </section>
      operationId: postGenerateStatisticsFileRequest
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.tenantstatisticsdate+json:
            schema:
              $ref: '#/components/schemas/rangeStatisticsFile'
        required: true
      responses:
        "201":
          content:
            application/vnd.com.nsn.cumulocity.tenantstatisticsfile+json:
              schema:
                $ref: '#/components/schemas/StatisticsFile'
          description: A statistics file was generated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Generate a statistics file report
      tags:
      - Usage statistics
      x-codegen-resource-name: generateStatisticsFile
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/tenant/statistics/files" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw "<Payload>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/files");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/statistics/files")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/statistics/files")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/statistics/files"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /tenant/statistics/files/{id}:
    get:
      description: |
        Retrieve a specific usage statistics file (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN
        </section>
      operationId: getTenantUsageStatisticsFileById
      parameters:
      - description: Unique identifier of the statistics file.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: "30303033"
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: The request has succeeded and the file is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: statistics/Not Found
                message: Statistics file with id 123 not found
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Statistics file not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a usage statistics file
      tags:
      - Usage statistics
      x-codegen-resource-name: getStatisticsFile
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics/files/{id}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/files/{id}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics/files/{id}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics/files/{id}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/statistics/files/{id}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /tenant/statistics/files/latest/{month}:
    get:
      description: |
        Retrieve the latest usage statistics file with REAL data for a given month.

        There are two types of statistics files:
        * REAL - generated by the system on the first day of the month and includes statistics for the previous month.
        * TEST - generated by the user with a time range specified in the query parameters (`dateFrom`, `dateTo`).

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN
        </section>
      operationId: getTenantUsageStatisticsLatestFile
      parameters:
      - description: Date (format YYYY-MM-dd) specifying the month for which the statistics
          file will be downloaded (the day value is ignored).
        explode: false
        in: path
        name: month
        required: true
        schema:
          example: 2020-03-01
          format: date
          maxLength: 10
          minLength: 10
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: The request has succeeded and the file is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve the latest usage statistics file
      tags:
      - Usage statistics
      x-codegen-resource-name: getLatestStatisticsFile
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics/files/latest/{month}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/files/latest/{month}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics/files/latest/{month}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics/files/latest/{month}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/statistics/files/latest/{month}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /tenant/statistics/device/{tenantId}/monthly/{date}:
    get:
      description: |
        Retrieve monthly device statistics from a specific tenant (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_TENANT_STATISTICS_READ
        </section>
      operationId: getTenantDeviceStatisticsMonthlyCollection
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Date (format YYYY-MM-dd) of the queried month (the day value
          is ignored).
        explode: false
        in: path
        name: date
        required: true
        schema:
          example: 2021-01-01
          format: date
          maxLength: 10
          minLength: 10
          type: string
        style: simple
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: The ID of the device to search for.
        explode: true
        in: query
        name: deviceId
        required: false
        schema:
          example: "115"
          minLength: 1
          type: string
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                next: http://<TENANT_DOMAIN>/tenant/statistics/device/t07007007/monthly/2021-01-01?pageSize=5&currentPage=2
                self: http://<TENANT_DOMAIN>/tenant/statistics/device/t07007007/monthly/2021-01-01?pageSize=5&currentPage=1
                statistics:
                - deviceId: "115"
                  count: 10
                  deviceType: MyDevice
                  deviceParents:
                  - "100"
                - deviceId: "116"
                  count: 7
              schema:
                $ref: '#/components/schemas/DeviceStatisticsCollection'
          description: The request has succeeded and the devices statistics are sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve monthly device statistics
      tags:
      - Device statistics
      x-codegen-resource-name: getMonthlyDeviceStatistics
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/monthly/{date}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/monthly/{date}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/monthly/{date}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/monthly/{date}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/monthly/{date}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /tenant/statistics/device/{tenantId}/daily/{date}:
    get:
      description: |
        Retrieve daily device statistics from a specific tenant (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_TENANT_STATISTICS_READ
        </section>
      operationId: getTenantDeviceStatisticsDailyCollection
      parameters:
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: simple
      - description: Date (format YYYY-MM-dd) of the queried day.
        explode: false
        in: path
        name: date
        required: true
        schema:
          example: 2021-01-01
          format: date
          maxLength: 10
          minLength: 10
          type: string
        style: simple
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: The ID of the device to search for.
        explode: true
        in: query
        name: deviceId
        required: false
        schema:
          example: "115"
          minLength: 1
          type: string
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                next: http://<TENANT_DOMAIN>/tenant/statistics/device/t07007007/daily/2021-01-01?pageSize=5&currentPage=2
                self: http://<TENANT_DOMAIN>/tenant/statistics/device/t07007007/daily/2021-01-01?pageSize=5&currentPage=1
                statistics: []
              schema:
                $ref: '#/components/schemas/DeviceStatisticsCollection'
          description: The request has succeeded and the devices statistics are sent
            in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve daily device statistics
      tags:
      - Device statistics
      x-codegen-resource-name: getDailyDeviceStatistics
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/daily/{date}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/daily/{date}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/daily/{date}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/daily/{date}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/daily/{date}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("GET", url, headers=headers)
          print(response.text.encode("utf8"))
  /tenant/loginOptions:
    get:
      description: Retrieve the login options available in the tenant.
      operationId: getLoginOptionCollectionResource
      parameters:
      - description: |
          If this is set to `true`, the management tenant login options will be returned.

          > **&#9432; Info:** The `tenantId` parameter must not be present in the request when using the `management` parameter, otherwise it will cause an error.
        explode: true
        in: query
        name: management
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: true
        in: query
        name: tenantId
        required: false
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.loginoptioncollection+json:
              example:
                self: https://<TENANT_DOMAIN>/tenant/loginOptions/
                loginOptions":
                - enforceStrength: true
                  greenMinLength: 8
                  id: 924997e5-863c-4532-96f9-cbe6dc5f8902
                  self: https://<TENANT_DOMAIN>/tenant/loginOptions/924997e5-863c-4532-96f9-cbe6dc5f8902
                  strengthValidity: false
                  tfaStrategy: SMS
                  type: OAUTH2_INTERNAL
                  _type: OAuth2Config
                  userManagementSource: INTERNAL
                  visibleOnLoginPage: true
                  initRequest: https://<TENANT_DOMAIN>/tenant/oauth?tenant_id=management
                  loginRedirectDomain: <TENANT_DOMAIN>
                  grantType: PASSWORD
                  sessionConfiguration:
                    absoluteTimeoutMillis: 1209600000
                    renewalTimeoutMillis: 86400000
                    userAgentValidationRequired: false
                    maximumNumberOfParallelSessions: 5
                - enforceStrength: true
                  greenMinLength: 8
                  id: 4b62-a8f1-a00ba63c89ce
                  self: https://<TENANT_DOMAIN>/tenant/loginOptions/4b62-a8f1-a00ba63c89ce
                  strengthValidity: false
                  tfaStrategy: SMS
                  type: BASIC
                  _type: BasicAuthConfig
                  userManagementSource: INTERNAL
                  visibleOnLoginPage: false
                  authenticationRestrictions:
                    forbiddenClients: WEB_BROWSERS
              schema:
                $ref: '#/components/schemas/LoginOptionCollection'
          description: The request has succeeded and the login options are sent in
            the response.
        "400":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: LoginOptions/Bad Request
                message: Do not use 'management' flag while querying loginOptions
                  of tenant with id <TENANT_ID>
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Bad request – invalid parameters.
      security: []
      summary: Retrieve the login options
      tags:
      - Login options
      x-codegen-resource-name: getLoginOptions
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/loginOptions"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/loginOptions");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/loginOptions").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/loginOptions")
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          response = requests.request("GET", "https://<TENANT_DOMAIN>/tenant/loginOptions")
          print(response.text.encode("utf8"))
    post:
      description: |
        Create an authentication configuration on your tenant.

        <section><h5>Required roles</h5>
        ROLE_TENANT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_ADMIN
        </section>
      operationId: postLoginOptionCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.authconfig+json:
            example:
              userManagementSource: INTERNAL
              type: OAUTH2_INTERNAL
              sessionConfiguration:
                absoluteTimeoutMillis: 7200000
                renewalTimeoutMillis: 3600000
                userAgentValidationRequired: false
                maximumNumberOfParallelSessions: 3
              providerName: Cumulocity
              visibleOnLoginPage: true
              grantType: PASSWORD
            schema:
              $ref: '#/components/schemas/authConfig'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.authconfig+json:
              schema:
                $ref: '#/components/schemas/authConfig'
          description: A login option was created.
        "400":
          description: Duplicated – The login option already exists.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create a login option
      tags:
      - Login options
      x-codegen-resource-name: createLoginOption
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/tenant/loginOptions" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/loginOptions");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/loginOptions")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/loginOptions")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/loginOptions"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }

          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /tenant/loginOptions/{type_or_id}/restrict:
    put:
      description: |
        Update the tenant's access to the authentication configuration.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN <b>AND</b> is the management tenant
        </section>
      operationId: putAccessLoginOptionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      - description: "The type or ID of the login option. The type's value is case\
          \ insensitive and can be `OAUTH2`, `OAUTH2_INTERNAL` or `BASIC`."
        explode: false
        in: path
        name: type_or_id
        required: true
        schema:
          example: OAUTH2
          minLength: 1
          type: string
        style: simple
      - description: Unique identifier of a Cumulocity IoT tenant.
        explode: true
        in: query
        name: targetTenant
        required: true
        schema:
          example: t07007007
          minLength: 1
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authConfigAccess'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.authconfig+json:
              schema:
                $ref: '#/components/schemas/authConfig'
          description: The login option was updated.
        "403":
          description: Not authorized to perform this operation.
        "404":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Not Found
                message: There is no tenant with id = t01
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Tenant not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a tenant's access to the login option
      tags:
      - Login options
      x-codegen-resource-name: updateLoginOption
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/tenant/loginOptions/{type_or_id}/restrict?targetTenant=<TENANT_ID>" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/loginOptions/{type_or_id}/restrict?targetTenant=<TENANT_ID>");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/tenant/loginOptions/{type_or_id}/restrict?targetTenant=<TENANT_ID>")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/tenant/loginOptions/{type_or_id}/restrict?targetTenant=<TENANT_ID>")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/loginOptions/{type_or_id}/restrict?targetTenant=<TENANT_ID>"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }

          response = requests.request("PUT", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /tenant/oauth:
    post:
      description: |
        Obtain an OAI-Secure and XSRF tokens in cookies.
      operationId: postLoginFormCookie
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/loginForm'
        required: true
      responses:
        "200":
          description: The tokens are return in cookies.
          headers:
            Set-Cookie:
              explode: false
              schema:
                description: The OAI-Secure access token is returned in a cookie named
                  `authorization`.
                minLength: 1
                type: string
              style: simple
            "\0Set-Cookie":
              explode: false
              schema:
                description: The XSRF token is returned in a cookie name `XSRF-TOKEN`.
                minLength: 1
                type: string
              style: simple
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      summary: Obtain access tokens in cookies
      tags:
      - Login tokens
      x-codegen-resource-name: obtainAccessCookies
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/tenant/oauth" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/x-www-form-urlencoded" \
          --data-urlencode "grant_type=PASSWORD" \
          --data-urlencode "username=<USERNAME>" \
          --data-urlencode "password=<PASSWORD>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/oauth");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/x-www-form-urlencoded");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("grant_type", "PASSWORD");
          request.AddParameter("username", "<USERNAME>");
          request.AddParameter("password", "<PASSWORD>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/oauth")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/x-www-form-urlencoded")
              .header("Accept", "application/json")
              .field("grant_type", "PASSWORD")
              .field("username", "<USERNAME>")
              .field("password", "<PASSWORD>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/oauth")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/x-www-form-urlencoded"
              })
              .send("grant_type=PASSWORD")
              .send("username=<USERNAME>")
              .send("password=<PASSWORD>")
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/oauth"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/x-www-form-urlencoded"
          }
          data = "grant_type=PASSWORD&username=<USERNAME>&password=<PASSWORD>"

          response = requests.request("POST", url, headers=headers, data=data)
          print(response.text.encode("utf8"))
  /tenant/oauth/token:
    post:
      description: Obtain an OAI-Secure access token.
      operationId: postLoginFormBody
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/loginForm'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessToken'
          description: The OAI-Secure access token is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      summary: Obtain an access token
      tags:
      - Login tokens
      x-codegen-resource-name: obtainAccessToken
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/tenant/oauth/token" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Content-Type: application/x-www-form-urlencoded" \
          --header "Accept: application/json" \
          --data-urlencode "grant_type=PASSWORD" \
          --data-urlencode "username=<USERNAME>" \
          --data-urlencode "password=<PASSWORD>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/oauth/token");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/x-www-form-urlencoded");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("grant_type", "PASSWORD");
          request.AddParameter("username", "<USERNAME>");
          request.AddParameter("password", "<PASSWORD>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/oauth/token")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/x-www-form-urlencoded")
              .header("Accept", "application/json")
              .field("grant_type", "PASSWORD")
              .field("username", "<USERNAME>")
              .field("password", "<PASSWORD>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/oauth/token")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/x-www-form-urlencoded"
              })
              .send("grant_type=PASSWORD")
              .send("username=<USERNAME>")
              .send("password=<PASSWORD>")
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/oauth/token"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/x-www-form-urlencoded"
          }
          data = "grant_type=PASSWORD&username=<USERNAME>&password=<PASSWORD>"

          response = requests.request("POST", url, headers=headers, data=data)
          print(response.text.encode("utf8"))
  /tenant/options:
    get:
      description: |
        Retrieve all the options available on the tenant.

        <section><h5>Required roles</h5>
        ROLE_OPTION_MANAGEMENT_READ
        </section>
      operationId: getOptionCollectionResource
      parameters:
      - description: The current page of the paginated results.
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          example: 3
          minimum: 1
          type: integer
        style: form
      - description: "Indicates how many entries of the collection shall be returned.\
          \ The upper limit for one page is 2,000 objects."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 5
          example: 10
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - description: "When set to `true`, the returned result will contain in the\
          \ statistics object the total number of pages. Only applicable on [range\
          \ queries](https://en.wikipedia.org/wiki/Range_query_(database))."
        explode: true
        in: query
        name: withTotalPages
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.optioncollection+json:
              schema:
                $ref: '#/components/schemas/OptionCollection'
          description: The request has succeeded and the options are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all options
      tags:
      - Options
      x-codegen-resource-name: getOptions
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/options"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/options");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/options").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/options")
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          response = requests.request("GET", "https://<TENANT_DOMAIN>/tenant/options")
          print(response.text.encode("utf8"))
    post:
      description: "Create an option on your tenant.\n\nOptions are category-key-value\
        \ tuples which store tenant configurations. Some categories of options allow\
        \ the creation of new ones, while others are limited to predefined set of\
        \ keys.\n\nAny option of any tenant can be defined as \"non-editable\" by\
        \ the \"management\" tenant; once done, any PUT or DELETE requests made on\
        \ that option by the tenant owner will result in a 403 error (Unauthorized).\n\
        \n### Default option categories\n\n**access.control**\n\n| Key |\tDefault\
        \ value |\tPredefined | Description |\n|--|--|--|--|\n| allow.origin | * |\
        \ Yes | Comma separated list of domains allowed for execution of CORS. Wildcards\
        \ are allowed (for example, `*.cumuclocity.com`) |\n\n**alarm.type.mapping**\n\
        \n| Key  |\tPredefined | Description |\n|--|--|--|\n| &lt;ALARM_TYPE> | No\
        \ | Overrides the severity and alarm text for the alarm with type &lt;ALARM_TYPE>.\
        \ The severity and text are specified as `<ALARM_SEVERITY>\\|<ALARM_TEXT>`.\
        \ If either part is empty, the value will not be overridden. If the severity\
        \ is NONE, the alarm will be suppressed. Example: `\"CRITICAL\\|temperature\
        \ too high\"`|\n\n### Encrypted credentials\n\nAdding a \"credentials.\" prefix\
        \ to the `key` will make the `value` of the option encrypted. When the option\
        \ is  sent to a microservice, the \"credentials.\" prefix is removed and the\
        \ `value` is decrypted. For example:\n\n```json\n{\n  \"category\": \"secrets\"\
        ,\n  \"key\": \"credentials.mykey\",\n  \"value\": \"myvalue\"\n}\n```\n\n\
        In that particular example, the request will contain an additional header\
        \ `\"Mykey\": \"myvalue\"`.\n\n<section><h5>Required roles</h5>\nROLE_OPTION_MANAGEMENT_ADMIN\n\
        </section>\n"
      operationId: postOptionCollectionResource
      parameters:
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.com.nsn.cumulocity.option+json:
            example:
              category: alarm.type.mapping
              key: temp_too_high
              value: CRITICAL|temperature too high
            schema:
              $ref: '#/components/schemas/postOptionCollectionResource_request'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.option+json:
              schema:
                $ref: '#/components/schemas/option'
          description: An option was created.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Create an option
      tags:
      - Options
      x-codegen-resource-name: createOption
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST "https://<TENANT_DOMAIN>/tenant/options" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/options");
          client.Timeout = -1;

          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/options")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/options")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/options"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /tenant/options/{category}:
    get:
      description: |
        Retrieve all the options (by a specified category) on your tenant.

        <section><h5>Required roles</h5>
        ROLE_OPTION_MANAGEMENT_READ
        </section>
      operationId: getCategoryOptionResource
      parameters:
      - description: The category of the options.
        explode: false
        in: path
        name: category
        required: true
        schema:
          example: alarm.type.mapping
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.option+json:
              schema:
                $ref: '#/components/schemas/CategoryOptions'
          description: The request has succeeded and the options are sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all options by category
      tags:
      - Options
      x-codegen-resource-name: getOptionsByCategory
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/options/{category}"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/options/{category}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/options/{category}").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/options/{category}")
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          response = requests.request("GET", "https://<TENANT_DOMAIN>/tenant/options/{category}")
          print(response.text.encode("utf8"))
    put:
      description: |
        Update one or more options (by a specified category) on your tenant.

        <section><h5>Required roles</h5>
        ROLE_OPTION_MANAGEMENT_ADMIN
        </section>
      operationId: putCategoryOptionResource
      parameters:
      - description: The category of the options.
        explode: false
        in: path
        name: category
        required: true
        schema:
          example: alarm.type.mapping
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryOptions'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.option+json:
              schema:
                $ref: '#/components/schemas/CategoryOptions'
          description: A collection of options was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update options by category
      tags:
      - Options
      x-codegen-resource-name: updateOptionsByCategory
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/tenant/options/{category}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/options/{category}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/tenant/options/{category}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/tenant/options/{category}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/options/{category}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /tenant/options/{category}/{key}:
    delete:
      description: |
        Remove a specific option (by a given category and key) on your tenant.

        <section><h5>Required roles</h5>
        ROLE_OPTION_MANAGEMENT_ADMIN
        </section>
      operationId: deleteOptionResource
      parameters:
      - description: The category of the options.
        explode: false
        in: path
        name: category
        required: true
        schema:
          example: alarm.type.mapping
          minLength: 1
          type: string
        style: simple
      - description: The key of an option.
        explode: false
        in: path
        name: key
        required: true
        schema:
          example: temp_too_high
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: An option was removed.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          description: Option not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Remove a specific option
      tags:
      - Options
      x-codegen-resource-name: deleteOption
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request DELETE "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}" \
          --header "Authorization: Basic <AUTHORIZATION>"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/options/{category}/{key}");
          client.Timeout = -1;

          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/tenant/options/{category}/{key}")
              .header("Authorization", "Basic <AUTHORIZATION>").asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("DELETE", "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>"
              })
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          url = "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>"
          }
          response = requests.request("DELETE", url, headers=headers)
          print(response.text.encode("utf8"))
    get:
      description: |
        Retrieve a specific option (by a given category and key) on your tenant.

        <section><h5>Required roles</h5>
        ROLE_OPTION_MANAGEMENT_READ
        </section>
      operationId: getOptionResource
      parameters:
      - description: The category of the options.
        explode: false
        in: path
        name: category
        required: true
        schema:
          example: alarm.type.mapping
          minLength: 1
          type: string
        style: simple
      - description: The key of an option.
        explode: false
        in: path
        name: key
        required: true
        schema:
          example: temp_too_high
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.option+json:
              schema:
                $ref: '#/components/schemas/option'
          description: The request has succeeded and the option is sent in the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          description: Option not found.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific option
      tags:
      - Options
      x-codegen-resource-name: getOption
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/options/{category}/{key}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/options/{category}/{key}").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}")
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          response = requests.request("GET", "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}")
          print(response.text.encode("utf8"))
    put:
      description: |
        Update the value of a specific option (by a given category and key) on your tenant.

        <section><h5>Required roles</h5>
        ROLE_OPTION_MANAGEMENT_ADMIN <b>AND</b> the option is editable
        </section>
      operationId: putOptionResource
      parameters:
      - description: The category of the options.
        explode: false
        in: path
        name: category
        required: true
        schema:
          example: alarm.type.mapping
          minLength: 1
          type: string
        style: simple
      - description: The key of an option.
        explode: false
        in: path
        name: key
        required: true
        schema:
          example: temp_too_high
          minLength: 1
          type: string
        style: simple
      - description: "Advertises which content types, expressed as MIME types, the\
          \ client is able to understand."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          example: application/json
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryKeyOption'
        required: true
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.option+json:
              schema:
                $ref: '#/components/schemas/option'
          description: An option was updated.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "404":
          description: Option not found.
        "422":
          description: Unprocessable Entity – invalid payload.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Update a specific option
      tags:
      - Options
      x-codegen-resource-name: updateOption
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request PUT "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}" \
          --header "Authorization: Basic <AUTHORIZATION>" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data-raw '<Payload>'
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/options/{category}/{key}");
          client.Timeout = -1;

          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
          request.AddHeader("Content-Type", "application/json");
          request.AddHeader("Accept", "application/json");
          request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/tenant/options/{category}/{key}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Content-Type", "application/json")
              .header("Accept", "application/json")
              .body("<Payload>")
              .asString();
          System.out.println(response);
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("PUT", "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}")
              .headers({
                  "Authorization": "Basic <AUTHORIZATION>",
                  "Accept": "application/json",
                  "Content-Type": "application/json"
              })
              .send(JSON.stringify( <Payload> ))
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests
          import json

          url = "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}"
          headers = {
            "Authorization": "Basic <AUTHORIZATION>",
            "Accept": "application/json",
            "Content-Type": "application/json"
          }
          response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
          print(response.text.encode("utf8"))
  /tenant/system/options:
    get:
      description: |
        Retrieve all the system options available on the tenant.

        > **⚠️ Important:** Note that it is possible to call this endpoint without the ROLE_OPTION_MANAGEMENT_ADMIN role, but options that are considered secured (see the list of options above) will be obfuscated with a constant value `"<<Encrypted>>"`.
      operationId: getSystemOptionCollectionResource
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.optioncollection+json:
              schema:
                $ref: '#/components/schemas/SystemOptionCollection'
          description: The request has succeeded and the system options are sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve all system options
      tags:
      - System options
      x-codegen-resource-name: getSystemOptions
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/system/options"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/system/options");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/system/options").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/system/options")
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          response = requests.request("GET", "https://<TENANT_DOMAIN>/tenant/system/options")
          print(response.text.encode("utf8"))
  /tenant/system/options/{category}/{key}:
    get:
      description: |
        Retrieve a specific system option (by a given category and key) on your tenant.

        > **⚠️ Important:** Note that it is possible to call this endpoint without the ROLE_OPTION_MANAGEMENT_ADMIN role, but only the options that are considered not secured (see the list of options above) will be returned. Otherwise, if the option is considered secured and the user does not have the required role, an HTTP response 403 will be returned.
        <section><h5>Required roles</h5>
        ROLE_OPTION_MANAGEMENT_ADMIN
        </section>
      operationId: getSystemOptionResource
      parameters:
      - description: The category of the system options.
        explode: false
        in: path
        name: category
        required: true
        schema:
          example: password
          minLength: 1
          type: string
        style: simple
      - description: The key of a system option.
        explode: false
        in: path
        name: key
        required: true
        schema:
          example: enforce.strength
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.com.nsn.cumulocity.option+json:
              schema:
                $ref: '#/components/schemas/systemOption'
          description: The request has succeeded and the system option is sent in
            the response.
        "401":
          content:
            application/vnd.com.nsn.cumulocity.error+json:
              example:
                error: security/Unauthorized
                message: "Invalid credentials! : Bad credentials"
                info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information is missing or invalid.
        "403":
          description: Not authorized to perform this operation.
      security:
      - Basic: []
      - OAI-Secure: []
      - SSO: []
      summary: Retrieve a specific system option
      tags:
      - System options
      x-codegen-resource-name: getSystemOption
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET "https://<TENANT_DOMAIN>/tenant/system/options/{category}/{key}"
      - lang: C#
        source: |
          var client = new RestClient("https://<TENANT_DOMAIN>/tenant/system/options/{category}/{key}");
          client.Timeout = -1;

          var request = new RestRequest(Method.GET);

          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |
          Unirest.setTimeouts(0, 0);
          HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/system/options/{category}/{key}").asString();
      - lang: Node.js
        source: |
          var unirest = require("unirest");
          var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/system/options/{category}/{key}")
              .end(function (res) {
                  if (res.error) throw new Error(res.error);
                  console.log(res.raw_body);
              });
      - lang: Python
        source: |
          import requests

          response = requests.request("GET", "https://<TENANT_DOMAIN>/tenant/system/options/{category}/{key}")
          print(response.text.encode("utf8"))
components:
  parameters:
    acceptHeader:
      description: "Advertises which content types, expressed as MIME types, the client\
        \ is able to understand."
      explode: false
      in: header
      name: Accept
      required: false
      schema:
        example: application/json
        minLength: 1
        type: string
      style: simple
    applicationVersionAcceptHeader:
      description: The header is required to access this endpoint.
      explode: false
      in: header
      name: Accept
      required: true
      schema:
        enum:
        - application/vnd.com.nsn.cumulocity.applicationVersion+json
        - application/vnd.com.nsn.cumulocity.applicationVersionCollection+json
        example: application/vnd.com.nsn.cumulocity.applicationVersion+json
        type: string
      style: simple
    authorizationCookieHeader:
      description: The authorization cookie storing the access token of the user.
        This parameter is specific to OAI-Secure authentication.
      explode: false
      in: header
      name: Cookie
      required: false
      schema:
        example: authorization=<ACCESS_TOKEN>
        type: string
      style: simple
    xsrfTokenHeader:
      description: Prevents XRSF attack of the authenticated user. This parameter
        is specific to OAI-Secure authentication.
      explode: false
      in: header
      name: X-XSRF-TOKEN
      required: false
      schema:
        example: <X-XSRF-TOKEN>
        type: string
      style: simple
    processingModeHeader:
      description: "Used to explicitly control the processing mode of the request.\
        \ See [Processing mode](#processing-mode) for more details."
      explode: false
      in: header
      name: X-Cumulocity-Processing-Mode
      required: false
      schema:
        default: PERSISTENT
        enum:
        - PERSISTENT
        - TRANSIENT
        - QUIESCENT
        - CEP
        example: PERSISTENT
        type: string
      style: simple
    alarmId:
      description: Unique identifier of the alarm.
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: "20200301"
        minLength: 1
        type: string
      style: simple
    applicationId:
      description: Unique identifier of the application.
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: "20200301"
        minLength: 1
        type: string
      style: simple
    applicationVersion:
      description: Version of the application.
      explode: false
      in: path
      name: version
      required: true
      schema:
        example: "1.0"
        minLength: 1
        type: string
      style: simple
    applicationName:
      description: The name of the application.
      explode: false
      in: path
      name: name
      required: true
      schema:
        example: my-application
        minLength: 1
        type: string
      style: simple
    auditId:
      description: Unique identifier of the audit record.
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: "100423189"
        minLength: 1
        type: string
      style: simple
    binaryId:
      description: Unique identifier of the binary.
      explode: false
      in: path
      name: binaryId
      required: true
      schema:
        example: "30303033"
        minLength: 1
        type: string
      style: simple
    bulkOperationId:
      description: Unique identifier of the bulk operation.
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: "1237"
        minLength: 1
        type: string
      style: simple
    eventId:
      description: Unique identifier of the event.
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: "20200301"
        minLength: 1
        type: string
      style: simple
    groupId:
      description: Unique identifier of the user group.
      explode: false
      in: path
      name: groupId
      required: true
      schema:
        example: 2
        type: integer
      style: simple
    groupName:
      description: The name of the user group.
      explode: false
      in: path
      name: groupName
      required: true
      schema:
        example: admins
        type: string
      style: simple
    identityType:
      description: The identifier used in the external system that Cumulocity IoT
        interfaces with.
      explode: false
      in: path
      name: type
      required: true
      schema:
        example: c8y_Serial
        minLength: 1
        type: string
      style: simple
    identityExternalId:
      description: The type of the external identifier.
      explode: false
      in: path
      name: externalId
      required: true
      schema:
        example: simulator_145074_1
        minLength: 1
        type: string
      style: simple
    inventoryAssignmentId:
      description: Unique identifier of the inventory assignment.
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: 1
        type: integer
      style: simple
    inventoryRoleId:
      description: Unique identifier of the inventory role.
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: 4
        type: integer
      style: simple
    measurementId:
      description: Unique identifier of the measurement.
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: "102700509"
        minLength: 1
        type: string
      style: simple
    retentionRuleId:
      description: Unique identifier of the retention rule.
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: "1569"
        minLength: 1
        type: string
      style: simple
    managedObjectId:
      description: Unique identifier of the managed object.
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: "251982"
        minLength: 1
        type: string
      style: simple
    managedObjectChildId:
      description: Unique identifier of the child object.
      explode: false
      in: path
      name: childId
      required: true
      schema:
        example: "72022"
        minLength: 1
        type: string
      style: simple
    newDeviceRequestId:
      description: Unique identifier of the new device request.
      explode: false
      in: path
      name: requestId
      required: true
      schema:
        example: "54545454"
        minLength: 1
        type: string
      style: simple
    notificationSubscriptionId:
      description: Unique identifier of the notification subscription.
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: "102700509"
        minLength: 1
        type: string
      style: simple
    operationId:
      description: Unique identifier of the operation.
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: "123"
        minLength: 1
        type: string
      style: simple
    roleId:
      description: Unique identifier of the user role.
      explode: false
      in: path
      name: roleId
      required: true
      schema:
        example: ROLE_ALARM_ADMIN
        minLength: 1
        type: string
      style: simple
    roleName:
      description: The name of the user role.
      explode: false
      in: path
      name: name
      required: true
      schema:
        example: ROLE_ALARM_ADMIN
        minLength: 1
        type: string
      style: simple
    tenantId:
      description: Unique identifier of a Cumulocity IoT tenant.
      explode: false
      in: path
      name: tenantId
      required: true
      schema:
        example: t07007007
        minLength: 1
        type: string
      style: simple
    monthlyDate:
      description: Date (format YYYY-MM-dd) of the queried month (the day value is
        ignored).
      explode: false
      in: path
      name: date
      required: true
      schema:
        example: 2021-01-01
        format: date
        maxLength: 10
        minLength: 10
        type: string
      style: simple
    dailyDate:
      description: Date (format YYYY-MM-dd) of the queried day.
      explode: false
      in: path
      name: date
      required: true
      schema:
        example: 2021-01-01
        format: date
        maxLength: 10
        minLength: 10
        type: string
      style: simple
    tenantApplicationId:
      description: Unique identifier of the application.
      explode: false
      in: path
      name: applicationId
      required: true
      schema:
        example: "20200301"
        minLength: 1
        type: string
      style: simple
    userId:
      description: Unique identifier of the a user.
      explode: false
      in: path
      name: userId
      required: true
      schema:
        example: jdoe
        minLength: 1
        type: string
      style: simple
    username:
      description: The username of the a user.
      explode: false
      in: path
      name: username
      required: true
      schema:
        example: jdoe
        minLength: 1
        type: string
      style: simple
    fileId:
      description: Unique identifier of the statistics file.
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: "30303033"
        minLength: 1
        type: string
      style: simple
    statisticsFileMonth:
      description: Date (format YYYY-MM-dd) specifying the month for which the statistics
        file will be downloaded (the day value is ignored).
      explode: false
      in: path
      name: month
      required: true
      schema:
        example: 2020-03-01
        format: date
        maxLength: 10
        minLength: 10
        type: string
      style: simple
    optionCategory:
      description: The category of the options.
      explode: false
      in: path
      name: category
      required: true
      schema:
        example: alarm.type.mapping
        minLength: 1
        type: string
      style: simple
    optionKey:
      description: The key of an option.
      explode: false
      in: path
      name: key
      required: true
      schema:
        example: temp_too_high
        minLength: 1
        type: string
      style: simple
    systemOptionCategory:
      description: The category of the system options.
      explode: false
      in: path
      name: category
      required: true
      schema:
        example: password
        minLength: 1
        type: string
      style: simple
    systemOptionKey:
      description: The key of a system option.
      explode: false
      in: path
      name: key
      required: true
      schema:
        example: enforce.strength
        minLength: 1
        type: string
      style: simple
    fingerprint:
      description: Unique identifier of a trusted certificate.
      explode: false
      in: path
      name: fingerprint
      required: true
      schema:
        example: df9c19e0433c6861fak899078b76fe56a3e7dd14
        minLength: 1
        type: string
      style: simple
    loginOptionTypeOrId:
      description: "The type or ID of the login option. The type's value is case insensitive\
        \ and can be `OAUTH2`, `OAUTH2_INTERNAL` or `BASIC`."
      explode: false
      in: path
      name: type_or_id
      required: true
      schema:
        example: OAUTH2
        minLength: 1
        type: string
      style: simple
    queryParam_currentPage:
      description: The current page of the paginated results.
      explode: true
      in: query
      name: currentPage
      required: false
      schema:
        default: 1
        example: 3
        minimum: 1
        type: integer
      style: form
    queryParam_fragmentType:
      description: "A characteristic which identifies a managed object or event, for\
        \ example, geolocation, electricity sensor, relay state."
      explode: true
      in: query
      name: fragmentType
      required: false
      schema:
        example: c8y_IsDevice
        minLength: 1
        type: string
      style: form
    queryParam_fragmentValue:
      description: |
        Allows filtering events by the fragment's value, but only when provided together with `fragmentType`.

        > **⚠️ Important:** Only fragments with a string value are supported.
      explode: true
      in: query
      name: fragmentValue
      required: false
      schema:
        example: lorem
        minLength: 1
        type: string
      style: form
    queryParam_pageSize:
      description: "Indicates how many entries of the collection shall be returned.\
        \ The upper limit for one page is 2,000 objects."
      explode: true
      in: query
      name: pageSize
      required: false
      schema:
        default: 5
        example: 10
        maximum: 2000
        minimum: 1
        type: integer
      style: form
    queryParam_skipChildrenNames:
      description: "When set to `true`, the returned references of child devices won't\
        \ contain their names."
      explode: true
      in: query
      name: skipChildrenNames
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_query:
      description: "Use query language to perform operations and/or filter the results.\
        \ Details about the properties and supported operations can be found in [Query\
        \ language](#tag/Query-language)."
      explode: true
      in: query
      name: query
      required: false
      schema:
        example: $filter=(owner+eq+'manga')
        minLength: 1
        type: string
      style: form
    queryParam_withParents:
      description: "When set to `true`, the returned references of child parents will\
        \ return the device's parents (if any). Otherwise, it will be an empty array."
      explode: true
      in: query
      name: withParents
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_withTotalPages:
      description: "When set to `true`, the returned result will contain in the statistics\
        \ object the total number of pages. Only applicable on [range queries](https://en.wikipedia.org/wiki/Range_query_(database))."
      explode: true
      in: query
      name: withTotalPages
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_withTotalElements:
      description: "When set to `true`, the returned result will contain in the statistics\
        \ object the total number of elements. Only applicable on [range queries](https://en.wikipedia.org/wiki/Range_query_(database))."
      explode: true
      in: query
      name: withTotalElements
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_hasVersions:
      description: "When set to `true`, the returned result contains applications\
        \ with an `applicationVersions` field that is not empty. When set to `false`,\
        \ the result will contain applications with an empty `applicationVersions`\
        \ field."
      explode: true
      in: query
      name: hasVersions
      required: false
      schema:
        example: true
        type: boolean
      style: form
    queryParam_inventory_ids:
      description: |
        The managed object IDs to search for.
        >**&#9432; Info:** If you query for multiple IDs at once, comma-separate the values.
      explode: false
      in: query
      name: ids
      required: false
      schema:
        example:
        - "200"
        - "300"
        items:
          minLength: 1
          type: string
        type: array
      style: form
    queryParam_inventory_childAssetId:
      description: Search for a specific child asset and list all the groups to which
        it belongs.
      explode: true
      in: query
      name: childAssetId
      required: false
      schema:
        example: "200"
        minLength: 1
        type: string
      style: form
    queryParam_inventory_childDeviceId:
      description: Search for a specific child device and list all the groups to which
        it belongs.
      explode: true
      in: query
      name: childDeviceId
      required: false
      schema:
        example: "2001"
        minLength: 1
        type: string
      style: form
    queryParam_inventory_childAdditionId:
      description: Search for a specific child addition and list all the groups to
        which it belongs.
      explode: true
      in: query
      name: childAdditionId
      required: false
      schema:
        example: "3003"
        minLength: 1
        type: string
      style: form
    queryParam_inventory_type:
      description: The type of managed object to search for.
      explode: true
      in: query
      name: type
      required: false
      schema:
        example: c8y_DeviceGroup
        minLength: 1
        type: string
      style: form
    queryParam_inventory_owner:
      description: Username of the owner of the managed objects.
      explode: true
      in: query
      name: owner
      required: false
      schema:
        example: manga
        minLength: 1
        type: string
      style: form
    queryParam_inventory_textPrefix:
      description: Search for managed objects where any property value is equal to
        the given one. Only string values are supported.
      explode: true
      in: query
      name: text
      required: false
      schema:
        example: my_value
        minLength: 1
        type: string
      style: form
    queryParam_inventory_withGroups:
      description: When set to `true` it returns additional information about the
        groups to which the searched managed object belongs. This results in setting
        the `assetParents` property with additional information about the groups.
      explode: true
      in: query
      name: withGroups
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_inventory_withChildren:
      description: Determines if children with ID and name should be returned when
        fetching the managed object. Set it to `false` to improve query performance.
      explode: true
      in: query
      name: withChildren
      required: false
      schema:
        default: true
        example: false
        type: boolean
      style: form
    queryParam_inventory_withChildrenCount:
      description: "When set to `true`, the returned result will contain the total\
        \ number of children in the respective objects (`childAdditions`, `childAssets`\
        \ and `childDevices`)."
      explode: true
      in: query
      name: withChildrenCount
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_inventory_deviceQuery:
      description: "Similar to the parameter `query`, but it assumes that this is\
        \ a device query request and it adds automatically the search criteria `fragmentType=c8y_IsDevice`."
      explode: true
      in: query
      name: q
      required: false
      schema:
        example: $filter=(owner+eq+'manga')
        minLength: 1
        type: string
      style: form
    queryParam_inventory_onlyRoots:
      description: "When set to `true` it returns managed objects which don't have\
        \ any parent. If the current user doesn't have access to the parent, this\
        \ is also root for the user."
      explode: true
      in: query
      name: onlyRoots
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_inventory_cascade:
      description: "When set to `true` and the managed object is a device or group,\
        \ all the hierarchy will be deleted."
      explode: true
      in: query
      name: cascade
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_inventory_forceCascade:
      description: When set to `true` all the hierarchy will be deleted without checking
        the type of managed object. It takes precedence over the parameter `cascade`.
      explode: true
      in: query
      name: forceCascade
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_inventory_withDeviceUser:
      description: "When set to `true` and the managed object is a device, it deletes\
        \ the associated device user (credentials)."
      explode: true
      in: query
      name: withDeviceUser
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_alarm_type:
      description: |
        The types of alarm to search for.
        >**&#9432; Info:** If you query for multiple alarm types at once, comma-separate the values. Space characters in alarm types must be escaped.
      explode: false
      in: query
      name: type
      required: false
      schema:
        example:
        - c8y_UnavailabilityAlarm
        - c8y_TemperatureAlarm
        items:
          minLength: 1
          type: string
        type: array
      style: form
    queryParam_alarm_source:
      description: The managed object ID to which the alarm is associated.
      explode: true
      in: query
      name: source
      required: false
      schema:
        example: "251994"
        minLength: 1
        type: string
      style: form
    queryParam_alarm_resolved:
      description: "When set to `true` only alarms with status CLEARED will be fetched,\
        \ whereas `false` will fetch all alarms with status ACTIVE or ACKNOWLEDGED."
      explode: true
      in: query
      name: resolved
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_alarm_withSourceAssets:
      description: When set to `true` also alarms for related source assets will be
        included in the request. When this parameter is provided a `source` must be
        specified.
      explode: true
      in: query
      name: withSourceAssets
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_alarm_withSourceDevices:
      description: When set to `true` also alarms for related source devices will
        be included in the request. When this parameter is provided a `source` must
        be specified.
      explode: true
      in: query
      name: withSourceDevices
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_alarm_severity:
      description: |
        The severity of the alarm to search for.
        >**&#9432; Info:** If you query for multiple alarm severities at once, comma-separate the values.
      explode: false
      in: query
      name: severity
      required: false
      schema:
        enum:
        - CRITICAL
        - MAJOR
        - MINOR
        - WARNING
        example:
        - CRITICAL
        - MAJOR
        items:
          minLength: 1
          type: string
        type: array
      style: form
    queryParam_alarm_status:
      description: |
        The status of the alarm to search for.
        >**&#9432; Info:** If you query for multiple alarm statuses at once, comma-separate the values.
      explode: false
      in: query
      name: status
      required: false
      schema:
        enum:
        - ACTIVE
        - ACKNOWLEDGED
        - CLEARED
        example:
        - ACTIVE
        - ACKNOWLEDGED
        items:
          minLength: 1
          type: string
        type: array
      style: form
    queryParam_alarm_dateFrom:
      description: Start date or date and time of the alarm occurrence.
      explode: true
      in: query
      name: dateFrom
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_alarm_dateTo:
      description: End date or date and time of the alarm occurrence.
      explode: true
      in: query
      name: dateTo
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_alarm_createdFrom:
      description: Start date or date and time of the alarm creation.
      explode: true
      in: query
      name: createdFrom
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_alarm_createdTo:
      description: End date or date and time of the alarm creation.
      explode: true
      in: query
      name: createdTo
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_application_type:
      description: "The type of the application. It is possible to use multiple values\
        \ separated by a comma. For example, `EXTERNAL,HOSTED` will return only applications\
        \ with type `EXTERNAL` or `HOSTED`."
      explode: true
      in: query
      name: type
      required: false
      schema:
        enum:
        - EXTERNAL
        - HOSTED
        - MICROSERVICE
        example: HOSTED
        type: string
      style: form
    queryParam_application_name:
      description: The name of the application.
      explode: true
      in: query
      name: name
      required: false
      schema:
        example: devicemanagement
        minLength: 1
        type: string
      style: form
    queryParam_application_owner:
      description: The ID of the tenant that owns the applications.
      explode: true
      in: query
      name: owner
      required: false
      schema:
        example: management
        minLength: 1
        type: string
      style: form
    queryParam_application_tenant:
      description: The ID of a tenant that either owns the application or is subscribed
        to the applications.
      explode: true
      in: query
      name: tenant
      required: false
      schema:
        example: management
        minLength: 1
        type: string
      style: form
    queryParam_application_user:
      description: The ID of a user that has access to the applications.
      explode: true
      in: query
      name: user
      required: false
      schema:
        example: jdoe
        minLength: 1
        type: string
      style: form
    queryParam_application_subscriber:
      description: The ID of a tenant that is subscribed to the applications.
      explode: true
      in: query
      name: subscriber
      required: false
      schema:
        example: management
        minLength: 1
        type: string
      style: form
    queryParam_application_providedFor:
      description: The ID of a tenant that is subscribed to the applications but doesn't
        own them.
      explode: true
      in: query
      name: providedFor
      required: false
      schema:
        example: t07007007
        minLength: 1
        type: string
      style: form
    queryParam_application_force:
      description: Force deletion by unsubscribing all tenants from the application
        first and then deleting the application itself.
      explode: true
      in: query
      name: force
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_application_version_version:
      description: The version field of the application version.
      explode: true
      in: query
      name: version
      required: false
      schema:
        example: "1"
        minLength: 1
        type: string
      style: form
    queryParam_application_version_tag:
      description: The tag of the application version.
      explode: true
      in: query
      name: tag
      required: false
      schema:
        example: tag1
        minLength: 1
        type: string
      style: form
    queryParam_audit_application:
      description: Name of the application from which the audit was carried out.
      explode: true
      in: query
      name: application
      required: false
      schema:
        example: cockpit
        minLength: 1
        type: string
      style: form
    queryParam_audit_dateFrom:
      description: Start date or date and time of the audit record.
      explode: true
      in: query
      name: dateFrom
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_audit_dateTo:
      description: End date or date and time of the audit record.
      explode: true
      in: query
      name: dateTo
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_audit_source:
      description: The platform component ID to which the audit is associated.
      explode: true
      in: query
      name: source
      required: false
      schema:
        example: "251994"
        minLength: 1
        type: string
      style: form
    queryParam_audit_type:
      description: The type of audit record to search for.
      explode: true
      in: query
      name: type
      required: false
      schema:
        example: Operation
        minLength: 1
        type: string
      style: form
    queryParam_audit_user:
      description: The username to search for.
      explode: true
      in: query
      name: user
      required: false
      schema:
        example: rina
        minLength: 1
        type: string
      style: form
    queryParam_event_type:
      description: The type of event to search for.
      explode: true
      in: query
      name: type
      required: false
      schema:
        example: c8y_OutgoingSmsLog
        minLength: 1
        type: string
      style: form
    queryParam_event_source:
      description: The managed object ID to which the event is associated.
      explode: true
      in: query
      name: source
      required: false
      schema:
        example: "251994"
        minLength: 1
        type: string
      style: form
    queryParam_event_dateFrom:
      description: Start date or date and time of the event occurrence (provided by
        the device).
      explode: true
      in: query
      name: dateFrom
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_event_dateTo:
      description: End date or date and time of the event occurrence (provided by
        the device).
      explode: true
      in: query
      name: dateTo
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_event_withSourceAssets:
      description: When set to `true` also events for related source assets will be
        included in the request. When this parameter is provided a `source` must be
        specified.
      explode: true
      in: query
      name: withSourceAssets
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_event_withSourceDevices:
      description: When set to `true` also events for related source devices will
        be included in the request. When this parameter is provided a `source` must
        be specified.
      explode: true
      in: query
      name: withSourceDevices
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_event_createdFrom:
      description: Start date or date and time of the event's creation (set by the
        platform during creation).
      explode: true
      in: query
      name: createdFrom
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_event_createdTo:
      description: End date or date and time of the event's creation (set by the platform
        during creation).
      explode: true
      in: query
      name: createdTo
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_event_revert:
      description: |
        If you are using a range query (that is, at least one of the `dateFrom` or `dateTo` parameters is included in the request), then setting `revert=true` will sort the results by the oldest events first.
        By default, the results are sorted by the newest events first.
      explode: true
      in: query
      name: revert
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_operation_revert:
      description: |
        If you are using a range query (that is, at least one of the `dateFrom` or `dateTo` parameters is included in the request), then setting `revert=true` will sort the results by the newest operations first.
        By default, the results are sorted by the oldest operations first.
      explode: true
      in: query
      name: revert
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_measurement_revert:
      description: |
        If you are using a range query (that is, at least one of the `dateFrom` or `dateTo` parameters is included in the request), then setting `revert=true` will sort the results by the newest measurements first.
        By default, the results are sorted by the oldest measurements first.
      explode: true
      in: query
      name: revert
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_measurement_type:
      description: The type of measurement to search for.
      explode: true
      in: query
      name: type
      required: false
      schema:
        example: c8y_Water
        minLength: 1
        type: string
      style: form
    queryParam_measurement_source:
      description: The managed object ID to which the measurement is associated.
      explode: true
      in: query
      name: source
      required: false
      schema:
        example: "251994"
        minLength: 1
        type: string
      style: form
    queryParam_measurement_sourceRequired:
      description: The managed object ID to which the measurement is associated.
      explode: true
      in: query
      name: source
      required: true
      schema:
        example: "251994"
        minLength: 1
        type: string
      style: form
    queryParam_measurement_dateFrom:
      description: Start date or date and time of the measurement.
      explode: true
      in: query
      name: dateFrom
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_measurement_dateTo:
      description: End date or date and time of the measurement.
      explode: true
      in: query
      name: dateTo
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_measurement_dateFromRequired:
      description: Start date or date and time of the measurement.
      explode: true
      in: query
      name: dateFrom
      required: true
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_measurement_dateToRequired:
      description: End date or date and time of the measurement.
      explode: true
      in: query
      name: dateTo
      required: true
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_measurement_valueFragmentType:
      description: A characteristic which identifies the measurement.
      explode: true
      in: query
      name: valueFragmentType
      required: false
      schema:
        example: c8y_Steam
        minLength: 1
        type: string
      style: form
    queryParam_measurement_series:
      description: |
        The specific series to search for.
        >**&#9432; Info:** If you query for multiple series at once, comma-separate the values.
      explode: false
      in: query
      name: series
      required: false
      schema:
        example:
        - c8y_Speed.speedX
        - c8y_Speed.speedY
        items:
          minLength: 1
          type: string
        type: array
      style: form
    queryParam_measurement_valueFragmentSeries:
      description: The specific series to search for.
      explode: true
      in: query
      name: valueFragmentSeries
      required: false
      schema:
        example: Temperature
        minLength: 1
        type: string
      style: form
    queryParam_measurement_aggregationType:
      description: Fetch aggregated results as specified.
      explode: true
      in: query
      name: aggregationType
      required: false
      schema:
        enum:
        - DAILY
        - HOURLY
        - MINUTELY
        example: MINUTELY
        type: string
      style: form
    queryParam_notification_token:
      description: Subscriptions associated with this token will be removed.
      explode: true
      in: query
      name: token
      required: true
      schema:
        example: eyJhbGciOiJSUzI1NiJ9...eyJzdWIiOiJ0ZXN0U32Nya
        minLength: 1
        type: string
      style: form
    queryParam_notification_subscription_source:
      description: The managed object ID to which the subscription is associated.
      explode: true
      in: query
      name: source
      required: false
      schema:
        example: "251982"
        minLength: 1
        type: string
      style: form
    queryParam_notification_subscription_context:
      description: The context to which the subscription is associated.
      explode: true
      in: query
      name: context
      required: false
      schema:
        enum:
        - mo
        - tenant
        example: mo
        minLength: 1
        type: string
      style: form
    queryParam_notification_subscription_context_for_delete:
      description: |
        The context to which the subscription is associated.
        > **&#9432; Info:** If the value is `mo`, then `source` must also be provided in the query.
      explode: true
      in: query
      name: context
      required: false
      schema:
        default: mo
        enum:
        - mo
        - tenant
        example: tenant
        minLength: 1
        type: string
      style: form
    queryParam_operation_agentId:
      description: "An agent ID that may be part of the operation. If this parameter\
        \ is set, the operation response objects contain the `deviceExternalIDs` object."
      explode: true
      in: query
      name: agentId
      required: false
      schema:
        example: simulator_145074_1
        minLength: 1
        type: string
      style: form
    queryParam_operation_agentId_delete:
      description: An agent ID that may be part of the operation.
      explode: true
      in: query
      name: agentId
      required: false
      schema:
        example: simulator_145074_1
        minLength: 1
        type: string
      style: form
    queryParam_operation_deviceId:
      description: The ID of the device the operation is performed for.
      explode: true
      in: query
      name: deviceId
      required: false
      schema:
        example: "1234"
        minLength: 1
        type: string
      style: form
    queryParam_operation_status:
      description: Status of the operation.
      explode: true
      in: query
      name: status
      required: false
      schema:
        enum:
        - SUCCESSFUL
        - FAILED
        - EXECUTING
        - PENDING
        example: FAILED
        type: string
      style: form
    queryParam_operation_fragmentType:
      description: The type of fragment that must be part of the operation.
      explode: true
      in: query
      name: fragmentType
      required: false
      schema:
        example: com_cumulocity_model_WebCamDevice
        minLength: 1
        type: string
      style: form
    queryParam_operation_bulkOperationId:
      description: The bulk operation ID that this operation belongs to.
      explode: true
      in: query
      name: bulkOperationId
      required: false
      schema:
        example: "1237"
        minLength: 1
        type: string
      style: form
    queryParam_operation_dateFrom:
      description: Start date or date and time of the operation.
      explode: true
      in: query
      name: dateFrom
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_operation_dateTo:
      description: End date or date and time of the operation.
      explode: true
      in: query
      name: dateTo
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_users_username:
      description: Prefix or full username
      explode: true
      in: query
      name: username
      required: false
      schema:
        example: jdoe
        minLength: 1
        type: string
      style: form
    queryParam_users_groups:
      description: |
        Numeric group identifiers. The response will contain only users which belong to at least one of the specified groups.
        >**&#9432; Info:** If you query for multiple user groups at once, comma-separate the values.
      explode: false
      in: query
      name: groups
      required: false
      schema:
        example:
        - "2"
        - "3"
        - "4"
        items:
          minLength: 1
          type: string
        type: array
      style: form
    queryParam_users_owner:
      description: Exact username of the owner of the user
      explode: true
      in: query
      name: owner
      required: false
      schema:
        example: admin
        minLength: 1
        type: string
      style: form
    queryParam_users_onlyDevices:
      description: |
        If set to `true`, the response will only contain users created during bootstrap process (starting with “device_”).
        If the flag is absent or `false` the result will not contain “device_” users.
      explode: true
      in: query
      name: onlyDevices
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_users_withSubusersCount:
      description: |
        If set to `true`, then each of returned user will contain an additional field “subusersCount”.
        It is the number of direct subusers (users with corresponding “owner”).
      explode: true
      in: query
      name: withSubusersCount
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_tenant_dateFrom:
      description: Start date or date and time of the statistics.
      explode: true
      in: query
      name: dateFrom
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_tenant_dateTo:
      description: End date or date and time of the statistics.
      explode: true
      in: query
      name: dateTo
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_tenant_tenant:
      description: Unique identifier of a Cumulocity IoT tenant.
      explode: true
      in: query
      name: tenant
      required: false
      schema:
        example: t07007007
        minLength: 1
        type: string
      style: form
    queryParam_tenant_id:
      description: Unique identifier of a Cumulocity IoT tenant.
      explode: true
      in: query
      name: tenantId
      required: false
      schema:
        example: t07007007
        minLength: 1
        type: string
      style: form
    queryParam_tenant_withParent:
      description: "When set to `true`, the returned result will contain the parent\
        \ of the current tenant."
      explode: true
      in: query
      name: withParent
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_deviceId:
      description: The ID of the device to search for.
      explode: true
      in: query
      name: deviceId
      required: false
      schema:
        example: "115"
        minLength: 1
        type: string
      style: form
    queryParam_file_dateFrom:
      description: Start date or date and time of the statistics file generation.
      explode: true
      in: query
      name: dateFrom
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_file_dateTo:
      description: End date or date and time of the statistics file generation.
      explode: true
      in: query
      name: dateTo
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_lastUpdatedFrom:
      description: Start date or date and time of the last update made.
      explode: true
      in: query
      name: lastUpdatedFrom
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_lastUpdatedTo:
      description: End date or date and time of the last update made.
      explode: true
      in: query
      name: lastUpdatedTo
      required: false
      schema:
        format: date-time
        minLength: 10
        type: string
      style: form
    queryParam_tenant_management:
      description: |
        If this is set to `true`, the management tenant login options will be returned.

        > **&#9432; Info:** The `tenantId` parameter must not be present in the request when using the `management` parameter, otherwise it will cause an error.
      explode: true
      in: query
      name: management
      required: false
      schema:
        default: false
        example: true
        type: boolean
      style: form
    queryParam_targetTenant:
      description: Unique identifier of a Cumulocity IoT tenant.
      explode: true
      in: query
      name: targetTenant
      required: true
      schema:
        example: t07007007
        minLength: 1
        type: string
      style: form
  responses:
    unauthorizedError:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: security/Unauthorized
            message: "Invalid credentials! : Bad credentials"
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Authentication information is missing or invalid.
    accessDenied:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: security/Forbidden
            message: Access is denied.
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Not enough permissions/roles to perform this operation.
    operationNotAuthorized:
      description: Not authorized to perform this operation.
    invalidPayload:
      description: Unprocessable Entity – invalid payload.
    identityExternalIdNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: identity/Not Found
            message: External ID not found
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: External ID not found.
    trustedCertificateNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: certificate/Not Found
            message: Cannot find certificate with fingerprint abcdef1234567890.
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Trusted certificate not found.
    invalidData:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: inventory/Invalid Data
            message: "Find by filter query failed : Query could not be understood."
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Invalid data was sent.
    invalidChildId:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: inventory/Invalid Data
            message: managedObject 10213 is not a child of 10215
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Invalid data was sent.
    inventoryObjectCollectionFound:
      content:
        application/vnd.com.nsn.cumulocity.managedobjectcollection+json:
          schema:
            $ref: '#/components/schemas/ManagedObjectCollection'
      description: The request has succeeded and the collection of objects is sent
        in the response.
    inventoryBinariesCollectionFound:
      content:
        application/vnd.com.nsn.cumulocity.managedobjectcollection+json:
          schema:
            $ref: '#/components/schemas/BinaryCollection'
      description: The request has succeeded and the managed objects are sent in the
        response.
    inventoryObjectFound:
      content:
        application/vnd.com.nsn.cumulocity.managedobject+json:
          schema:
            $ref: '#/components/schemas/managedObject'
      description: The request has succeeded and the object is sent in the response.
    inventoryObjectNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: inventory/Not Found
            message: Finding device data from database failed
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Managed object not found.
    alarmCollectionFound:
      content:
        application/vnd.com.nsn.cumulocity.alarmcollection+json:
          schema:
            $ref: '#/components/schemas/AlarmCollection'
      description: The request has succeeded and all alarms are sent in the response.
    auditRecordCollectionFound:
      content:
        application/vnd.com.nsn.cumulocity.auditrecordcollection+json:
          schema:
            $ref: '#/components/schemas/AuditRecordCollection'
      description: The request has succeeded and all audit records are sent in the
        response.
    auditFound:
      content:
        application/vnd.com.nsn.cumulocity.auditrecord+json:
          schema:
            $ref: '#/components/schemas/auditRecord'
      description: The request has succeeded and the audit record is sent in the response.
    alarmFound:
      content:
        application/vnd.com.nsn.cumulocity.alarm+json:
          schema:
            $ref: '#/components/schemas/alarm'
      description: The request has succeeded and the alarm is sent in the response.
    alarmNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: alarm/Not Found
            message: Finding alarm from database failed
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Alarm not found.
    eventCollectionFound:
      content:
        application/vnd.com.nsn.cumulocity.eventcollection+json:
          schema:
            $ref: '#/components/schemas/EventCollection'
      description: The request has succeeded and all events are sent in the response.
    eventFound:
      content:
        application/vnd.com.nsn.cumulocity.event+json:
          schema:
            $ref: '#/components/schemas/event'
      description: The request has succeeded and the event is sent in the response.
    eventNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: event/Not Found
            message: Finding event from database failed
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Event not found.
    measurementCollectionFound:
      content:
        application/vnd.com.nsn.cumulocity.measurementcollection+json:
          schema:
            $ref: '#/components/schemas/MeasurementCollection'
      description: The request has succeeded and all measurements are sent in the
        response.
    measurementFound:
      content:
        application/vnd.com.nsn.cumulocity.measurement+json:
          schema:
            $ref: '#/components/schemas/measurement'
      description: The request has succeeded and the measurement is sent in the response.
    measurementNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: measurement/Not Found
            message: Finding measurement from database failed
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Measurement not found.
    notificationSubscriptionFound:
      content:
        application/vnd.com.nsn.cumulocity.subscription+json:
          schema:
            $ref: '#/components/schemas/NotificationSubscription'
      description: The request has succeeded and the subscription is sent in the response.
    notificationSubscriptionNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: reliable-notification/Not Found
            message: Finding subscription from database failed
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Subscription not found.
    notificationSubscriptionDuplicate:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: reliable-notification/Duplicate
            message: "Subscription with source <'251982'>, context <'mo'> & subscription\
              \ <'testSubscription'> already exists!"
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Duplicated subscription.
    notificationSubscriptionCollectionFound:
      content:
        application/vnd.com.nsn.cumulocity.subscriptioncollection+json:
          schema:
            $ref: '#/components/schemas/NotificationSubscriptionCollection'
      description: The request has succeeded and all subscriptions are sent in the
        response.
    NotificationSubscriptionResult:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationSubscriptionResult'
      description: The notification subscription was deleted or is scheduled for deletion.
    attachmentNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: Not Found
            message: Attachment not found
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Attachment not found.
    attachmentDuplicated:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: Duplicate
            message: Attachment already exists
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: An attachment exists already.
    retentionRuleCollectionFound:
      content:
        application/vnd.com.nsn.cumulocity.retentionrulecollection+json:
          schema:
            $ref: '#/components/schemas/RetentionRuleCollection'
      description: The request has succeeded and all retention rules are sent in the
        response.
    retentionRuleFound:
      content:
        application/vnd.com.nsn.cumulocity.retentionrule+json:
          schema:
            $ref: '#/components/schemas/retentionRule'
      description: The request has succeeded and the retention rule is sent in the
        response.
    retentionRuleNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: retention/Not Found
            message: Retention rule not found
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Retention rule not found.
    operationNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: devicecontrol/Not Found
            message: "Finding device data from database failed : No operation for\
              \ gid '123'!"
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Operation not found.
    operationValidationError:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: undefined/validationError
            message: "Following mandatory fields should be included: status"
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Validation error.
    newDeviceRequestNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: devicecontrol/Not Found
            message: Could not find newDeviceRequest by ID 54545454
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: New device request not found.
    bulkOperationNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: devicecontrol/Not Found
            message: "Finding bulk operation from database failed : Cannot find document\
              \ with ID ID [type=com_cumulocity_model_idtype_GId, value=1237]!"
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Bulk operation not found.
    applicationNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: applications/Not Found
            message: Could not find application by ID 20200301
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Application not found.
    applicationVersionNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: applications/Not Found
            message: Cannot find application version for this application
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Application version not found.
    applicationDuplicatedKeyName:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: applications/Duplicate
            message: Application for tenant t07007007 with properties ( name:devicemanagement
              ) already exists
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Duplicate key/name.
    applicationVersionInvalid:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: applications/Duplicate
            message: Version or tag for this application already exists
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Duplicate version/tag or versions limit exceeded.
    applicationBootstrapUserBadRequest:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: applications/Bad Request
            message: Can not get bootstrap user. Application is not a microservice
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Bad request.
    groupNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: groups/Not Found
            message: "Error retrieving group with id 2! : Cannot find document with\
              \ ID ID [type=com_cumulocity_model_idtype_GId, value=2]!"
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Group not found.
    userNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: users/Not Found
            message: "Error retrieving user 123! : Cannot find document with ID ID\
              \ [type=com_cumulocity_model_idtype_GId, value=123]!"
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: User not found.
    tenantCollectionFound:
      content:
        application/vnd.com.nsn.cumulocity.tenantcollection+json:
          schema:
            $ref: '#/components/schemas/TenantCollection'
      description: The request has succeeded and the subtenants are sent in the response.
    currentTenantFound:
      content:
        application/vnd.com.nsn.cumulocity.currenttenant+json:
          schema:
            $ref: '#/components/schemas/CurrentTenant'
      description: The request has succeeded and the information is sent in the response.
    tenantFound:
      content:
        application/vnd.com.nsn.cumulocity.tenant+json:
          schema:
            $ref: '#/components/schemas/tenant'
      description: The request has succeeded and the tenant is sent in the response.
    tenantNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: security/Not Found
            message: There is no tenant with id = t01
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Tenant not found.
    tenantApplicationReferenceFound:
      content:
        application/vnd.com.nsn.cumulocity.applicationreferencecollection+json:
          schema:
            $ref: '#/components/schemas/ApplicationReferenceCollection'
      description: The request has succeeded and the tenant applications are sent
        in the response.
    tenantUsageStatisticsCollectionFound:
      content:
        application/vnd.com.nsn.cumulocity.tenantusagestatisticscollection+json:
          schema:
            $ref: '#/components/schemas/TenantUsageStatisticsCollection'
      description: The request has succeeded and the tenant statistics are sent in
        the response.
    tenantStatisticsFileCollectionFound:
      content:
        application/vnd.com.nsn.cumulocity.tenantStatisticsfilecollection+json:
          schema:
            $ref: '#/components/schemas/TenantUsageStatisticsFileCollection'
      description: The request has succeeded and the tenant statistics are sent in
        the response.
    fileFound:
      content:
        application/octet-stream:
          schema:
            format: binary
            type: string
      description: The request has succeeded and the file is sent in the response.
    fileNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: statistics/Not Found
            message: Statistics file with id 123 not found
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Statistics file not found.
    summaryUsageStatisticsFound:
      content:
        application/vnd.com.nsn.cumulocity.tenantusagestatisticssummary+json:
          schema:
            $ref: '#/components/schemas/SummaryTenantUsageStatistics'
      description: The request has succeeded and the usage statistics summary is sent
        in the response.
    summaryAllTenantsUsageStatisticsFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SummaryAllTenantsUsageStatisticsCollection'
      description: The request has succeeded and the usage statistics summary is sent
        in the response.
    monthlyDeviceStatisticsCollectionFound:
      content:
        application/json:
          example:
            next: http://<TENANT_DOMAIN>/tenant/statistics/device/t07007007/monthly/2021-01-01?pageSize=5&currentPage=2
            self: http://<TENANT_DOMAIN>/tenant/statistics/device/t07007007/monthly/2021-01-01?pageSize=5&currentPage=1
            statistics:
            - deviceId: "115"
              count: 10
              deviceType: MyDevice
              deviceParents:
              - "100"
            - deviceId: "116"
              count: 7
          schema:
            $ref: '#/components/schemas/DeviceStatisticsCollection'
      description: The request has succeeded and the devices statistics are sent in
        the response.
    dailyDeviceStatisticsCollectionFound:
      content:
        application/json:
          example:
            next: http://<TENANT_DOMAIN>/tenant/statistics/device/t07007007/daily/2021-01-01?pageSize=5&currentPage=2
            self: http://<TENANT_DOMAIN>/tenant/statistics/device/t07007007/daily/2021-01-01?pageSize=5&currentPage=1
            statistics: []
          schema:
            $ref: '#/components/schemas/DeviceStatisticsCollection'
      description: The request has succeeded and the devices statistics are sent in
        the response.
    loginOptionBadRequest:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: LoginOptions/Bad Request
            message: Do not use 'management' flag while querying loginOptions of tenant
              with id <TENANT_ID>
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Bad request – invalid parameters.
    loginOptionCollectionResourceFound:
      content:
        application/vnd.com.nsn.cumulocity.loginoptioncollection+json:
          example:
            self: https://<TENANT_DOMAIN>/tenant/loginOptions/
            loginOptions":
            - enforceStrength: true
              greenMinLength: 8
              id: 924997e5-863c-4532-96f9-cbe6dc5f8902
              self: https://<TENANT_DOMAIN>/tenant/loginOptions/924997e5-863c-4532-96f9-cbe6dc5f8902
              strengthValidity: false
              tfaStrategy: SMS
              type: OAUTH2_INTERNAL
              _type: OAuth2Config
              userManagementSource: INTERNAL
              visibleOnLoginPage: true
              initRequest: https://<TENANT_DOMAIN>/tenant/oauth?tenant_id=management
              loginRedirectDomain: <TENANT_DOMAIN>
              grantType: PASSWORD
              sessionConfiguration:
                absoluteTimeoutMillis: 1209600000
                renewalTimeoutMillis: 86400000
                userAgentValidationRequired: false
                maximumNumberOfParallelSessions: 5
            - enforceStrength: true
              greenMinLength: 8
              id: 4b62-a8f1-a00ba63c89ce
              self: https://<TENANT_DOMAIN>/tenant/loginOptions/4b62-a8f1-a00ba63c89ce
              strengthValidity: false
              tfaStrategy: SMS
              type: BASIC
              _type: BasicAuthConfig
              userManagementSource: INTERNAL
              visibleOnLoginPage: false
              authenticationRestrictions:
                forbiddenClients: WEB_BROWSERS
          schema:
            $ref: '#/components/schemas/LoginOptionCollection'
      description: The request has succeeded and the login options are sent in the
        response.
    optionCollectionResourceFound:
      content:
        application/vnd.com.nsn.cumulocity.optioncollection+json:
          schema:
            $ref: '#/components/schemas/OptionCollection'
      description: The request has succeeded and the options are sent in the response.
    categoryOptionsFound:
      content:
        application/vnd.com.nsn.cumulocity.option+json:
          schema:
            $ref: '#/components/schemas/CategoryOptions'
      description: The request has succeeded and the options are sent in the response.
    optionFound:
      content:
        application/vnd.com.nsn.cumulocity.option+json:
          schema:
            $ref: '#/components/schemas/option'
      description: The request has succeeded and the option is sent in the response.
    systemOptionCollectionFound:
      content:
        application/vnd.com.nsn.cumulocity.optioncollection+json:
          schema:
            $ref: '#/components/schemas/SystemOptionCollection'
      description: The request has succeeded and the system options are sent in the
        response.
    systemOptionFound:
      content:
        application/vnd.com.nsn.cumulocity.option+json:
          schema:
            $ref: '#/components/schemas/systemOption'
      description: The request has succeeded and the system option is sent in the
        response.
    roleNotFound:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: Not Found
            message: Cannot find the specified role.
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: Role not found.
    inventoryObjectDeleteConflict:
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          example:
            error: inventory/conflict
            message: Cannot delete the specified object as it has associated data.
            info: https://www.cumulocity.com/guides/reference-guide/#error_reporting
          schema:
            $ref: '#/components/schemas/error'
      description: "Conflict – The managed object is associated to other objects,\
        \ for example child devices."
  schemas:
    error:
      example:
        error: error
        message: message
        info: info
      properties:
        error:
          description: The type of error returned.
          type: string
        message:
          description: A human-readable message providing more details about the error.
          type: string
        info:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ that identifies the error code reported."
          type: string
      type: object
    alarm:
      additionalProperties:
        description: |
          It is possible to add an arbitrary number of additional properties as a list of key-value pairs, for example, `"property1": {}`, `"property2": "value"`. These properties are known as custom fragments and can be of any type, for example, object or string. Each custom fragment is identified by a unique name.

          Review the [Naming conventions of fragments](https://cumulocity.com/guides/concepts/domain-model/#naming-conventions-of-fragments) as there are characters that can not be used when naming custom fragments.
        x-additionalPropertiesName: customFragments
      example:
        count: 1
        creationTime: 2020-03-19T12:16:31.586Z
        lastUpdated: 2020-03-20T13:41:39.678Z
        id: "20200301"
        self: https://<TENANT_DOMAIN>/alarm/alarms/20200301
        severity: MAJOR
        source:
          id: "251982"
          name: My tracking device
          self: https://<TENANT_DOMAIN>/inventory/managedObjects/251982
        status: ACTIVE
        text: No data received from the device within the required interval.
        time: 2020-03-19T00:00:00.000Z
        type: c8y_UnavailabilityAlarm
      properties:
        count:
          description: Number of times that this alarm has been triggered.
          readOnly: true
          type: integer
        creationTime:
          description: The date and time when the alarm was created.
          format: date-time
          readOnly: true
          type: string
        firstOccurrenceTime:
          description: The time at which the alarm occurred for the first time. Only
            present when `count` is greater than 1.
          format: date-time
          readOnly: true
          type: string
        id:
          description: Unique identifier of the alarm.
          readOnly: true
          type: string
        lastUpdated:
          description: The date and time when the alarm was last updated.
          format: date-time
          readOnly: true
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        severity:
          description: The severity of the alarm.
          enum:
          - CRITICAL
          - MAJOR
          - MINOR
          - WARNING
          type: string
        source:
          $ref: '#/components/schemas/alarm_source'
        status:
          description: "The status of the alarm. If not specified, a new alarm will\
            \ be created as ACTIVE."
          enum:
          - ACTIVE
          - ACKNOWLEDGED
          - CLEARED
          type: string
        text:
          description: Description of the alarm.
          type: string
        time:
          description: The date and time when the alarm is triggered.
          format: date-time
          type: string
        type:
          description: Identifies the type of this alarm.
          type: string
      type: object
    auditApiResource:
      example:
        auditRecords:
          self: https://<TENANT_DOMAIN>/audit/auditRecords
          auditRecords: null
        auditRecordsForApplication: "https://<TENANT_DOMAIN>/audit/auditRecords?application={application}"
        auditRecordsForType: "https://<TENANT_DOMAIN>/audit/auditRecords?type={type}"
        auditRecordsForUser: "https://<TENANT_DOMAIN>/audit/auditRecords?user={user}"
        auditRecordsForTypeAndApplication: "https://<TENANT_DOMAIN>/audit/auditRecords?type={type}&application={application}"
        auditRecordsForTypeAndUserAndApplication: "https://<TENANT_DOMAIN>/audit/auditRecords?type={type}&user={user}&application={application}"
        auditRecordsForUserAndApplication: "https://<TENANT_DOMAIN>/audit/auditRecords?user={user}&application={application}"
        auditRecordsForUserAndType: "https://<TENANT_DOMAIN>/audit/auditRecords?user={user}&type={type}"
        self: https://<TENANT_DOMAIN>/audit
      properties:
        auditRecords:
          $ref: '#/components/schemas/auditApiResource_auditRecords'
        auditRecordsForApplication:
          description: "Read-only collection of audit records for a specific application.\
            \ The placeholder {application} must be the name of a registered application."
          type: string
        auditRecordsForType:
          description: Read-only collection of audit records for a specific type.
          type: string
        auditRecordsForUser:
          description: "Read-only collection of audit records for a specific user.\
            \ The placeholder {user} must be a username of a registered user."
          type: string
        auditRecordsForTypeAndApplication:
          description: Read-only collection of audit records for specific type and
            application.
          type: string
        auditRecordsForTypeAndUserAndApplication:
          description: "Read-only collection of audit records for specific type, user\
            \ and application."
          type: string
        auditRecordsForUserAndApplication:
          description: Read-only collection of audit records for specific user and
            application.
          type: string
        auditRecordsForUserAndType:
          description: Read-only collection of audit records for specific user and
            type.
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    auditRecord:
      additionalProperties:
        description: |
          It is possible to add an arbitrary number of additional properties as a list of key-value pairs, for example, `"property1": {}`, `"property2": "value"`. These properties can be of any type, for example, object or string.
        x-additionalPropertiesName: customProperties
      example:
        activity: Operation created
        creationTime: 2020-03-19T12:16:31.586Z
        id: "20200301"
        self: https://<TENANT_DOMAIN>/audit/auditRecords/20200301
        source:
          id: "251982"
          self: https://<TENANT_DOMAIN>/inventory/managedObjects/251982
        text: "Operation created: status='PENDING'"
        time: 2020-03-19T00:00:00.000Z
        type: Operation
        user: rina
      properties:
        activity:
          description: Summary of the action that was carried out.
          type: string
        application:
          description: Name of the application that performed the action.
          readOnly: true
          type: string
        c8y_Metadata:
          $ref: '#/components/schemas/auditRecord_c8y_Metadata'
        changes:
          description: Collection of objects describing the changes that were carried
            out.
          items:
            $ref: '#/components/schemas/auditRecord_changes_inner'
          readOnly: true
          type: array
        creationTime:
          description: The date and time when the audit record was created.
          format: date-time
          readOnly: true
          type: string
        id:
          description: Unique identifier of the audit record.
          readOnly: true
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        severity:
          description: The severity of the audit action.
          enum:
          - CRITICAL
          - MAJOR
          - MINOR
          - WARNING
          - INFORMATION
          readOnly: true
          type: string
        source:
          $ref: '#/components/schemas/auditRecord_source'
        text:
          description: Details of the action that was carried out.
          type: string
        time:
          description: The date and time when the audit is updated.
          format: date-time
          type: string
        type:
          description: Identifies the platform component of the audit.
          enum:
          - Alarm
          - Application
          - BulkOperation
          - CepModule
          - Connector
          - Event
          - Group
          - Inventory
          - InventoryRole
          - Operation
          - Option
          - Report
          - SingleSignOn
          - SmartRule
          - SYSTEM
          - Tenant
          - TenantAuthConfig
          - TrustedCertificates
          - User
          - UserAuthentication
          type: string
        user:
          description: The user who carried out the activity.
          type: string
      required:
      - activity
      - source
      - text
      - time
      - type
      type: object
    AuditRecordCollection:
      example:
        prev: https://<TENANT_DOMAIN>/audit/auditRecords?pageSize=1&currentPage=1
        self: https://<TENANT_DOMAIN>/audit/auditRecords?pageSize=1&currentPage=2
        next: https://<TENANT_DOMAIN>/audit/auditRecords?pageSize=1&currentPage=3
        auditRecords:
        - activity: Operation created
          creationTime: 2020-03-19T12:16:31.586Z
          id: "20200301"
          self: https://<TENANT_DOMAIN>/audit/auditRecords/20200301
          source:
            id: "251982"
            self: https://<TENANT_DOMAIN>/inventory/managedObjects/251982
          text: "Operation created: status='PENDING'"
          time: 2020-03-19T00:00:00.000Z
          type: Operation
          user: rina
        statistics:
          currentPage: 2
          pageSize: 1
          totalPages: 3
      properties:
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
        auditRecords:
          description: An array containing the results of the request.
          items:
            $ref: '#/components/schemas/auditRecord'
          type: array
      type: object
    alarmsApiResource:
      example:
        alarms:
          self: https://<TENANT_DOMAIN>/alarm/alarms
          alarms: null
        alarmsForSource: "https://<TENANT_DOMAIN>/alarm/alarms?source={source}"
        alarmsForStatus: "https://<TENANT_DOMAIN>/alarm/alarms?status={status}"
        alarmsForSourceAndStatusAndTime: "https://<TENANT_DOMAIN>/alarm/alarms?source={source}&status={status}&dateFrom={dateFrom}&dateTo={dateTo}"
        alarmsForStatusAndTime: "https://<TENANT_DOMAIN>/alarm/alarms?status={status}&dateFrom={dateFrom}&dateTo={dateTo}"
        alarmsForSourceAndTime: "https://<TENANT_DOMAIN>/alarm/alarms?source={source}&dateFrom={dateFrom}&dateTo={dateTo}"
        alarmsForTime: "https://<TENANT_DOMAIN>/alarm/alarms?dateFrom={dateFrom}&dateTo={dateTo}"
        alarmsForSourceAndStatus: "https://<TENANT_DOMAIN>/alarm/alarms?source={source}&status={status}"
        self: https://<TENANT_DOMAIN>/alarm
      properties:
        alarms:
          $ref: '#/components/schemas/alarmsApiResource_alarms'
        alarmsForSource:
          description: "Read-only collection of all alarms for a specific source object.\
            \ The placeholder {source} must be a unique ID of an object in the inventory."
          type: string
        alarmsForStatus:
          description: "Read-only collection of all alarms in a particular status.\
            \ The placeholder {status} can be one of the following values: ACTIVE,\
            \ ACKNOWLEDGED or CLEARED"
          type: string
        alarmsForSourceAndStatusAndTime:
          description: "Read-only collection of all alarms for a specific source,\
            \ status and time range."
          type: string
        alarmsForStatusAndTime:
          description: Read-only collection of all alarms for a particular status
            and time range.
          type: string
        alarmsForSourceAndTime:
          description: Read-only collection of all alarms for a specific source and
            time range.
          type: string
        alarmsForTime:
          description: Read-only collection of all alarms for a particular time range.
          type: string
        alarmsForSourceAndStatus:
          description: Read-only collection of all alarms for a specific source object
            in a particular status.
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    application:
      example:
        availability: PRIVATE
        contextPath: myapplication
        id: "20200301"
        key: my-application-key
        name: my-application
        owner:
          self: https://<TENANT_DOMAIN>/tenant/tenants/t07007007
          tenant:
            id: t07007007
        self: https://<TENANT_DOMAIN>/application/applications/20200301
        type: HOSTED
      properties:
        availability:
          default: PRIVATE
          description: Application access level for other tenants.
          enum:
          - MARKET
          - PRIVATE
          type: string
        contextPath:
          description: The context path in the URL makes the application accessible.
            Mandatory when the type of the application is `HOSTED`.
          minLength: 1
          type: string
        description:
          description: Description of the application.
          type: string
        id:
          description: Unique identifier of the application.
          readOnly: true
          type: string
        key:
          description: "Applications, regardless of their form, are identified by\
            \ an application key."
          minLength: 1
          type: string
        name:
          description: Name of the application.
          minLength: 1
          type: string
        owner:
          $ref: '#/components/schemas/application_owner'
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        type:
          description: The type of the application.
          enum:
          - EXTERNAL
          - HOSTED
          - MICROSERVICE
          type: string
        manifest:
          $ref: '#/components/schemas/application_manifest'
        roles:
          description: Roles provided by the microservice.
          items:
            description: A role name.
            example: ROLE_SMS_READ
            type: string
          type: array
        requiredRoles:
          description: List of permissions required by a microservice to work.
          items:
            description: A required role name.
            example: ROLE_INVENTORY_READ
            type: string
          type: array
        breadcrumbs:
          description: |
            A flag to indicate if the application has a breadcrumbs navigation on the UI.
            > **&#9432; Info:** This property is specific to the web application type.
          type: boolean
        contentSecurityPolicy:
          description: |
            The content security policy of the application.
            > **&#9432; Info:** This property is specific to the web application type.
          type: string
        dynamicOptionsUrl:
          description: |
            A URL to a JSON object with dynamic content options.
            > **&#9432; Info:** This property is specific to the web application type.
          example: /apps/public/public-options/options.json
          type: string
        globalTitle:
          description: |
            The global title of the application.
            > **&#9432; Info:** This property is specific to the web application type.
          example: Cumulocity
          type: string
        legacy:
          description: |
            A flag that shows if the application is a legacy application or not.
            > **&#9432; Info:** This property is specific to the web application type.
          type: boolean
        rightDrawer:
          description: |
            A flag to indicate if the application uses the UI context menu on the right side.
            > **&#9432; Info:** This property is specific to the web application type.
          type: boolean
        upgrade:
          description: |
            A flag that shows if the application is hybrid and using Angular and AngularJS simultaneously.
            > **&#9432; Info:** This property is specific to the web application type.
          type: boolean
        activeVersionId:
          description: The active version ID of the application. For microservice
            applications the active version ID is the microservice manifest version
            ID.
          readOnly: true
          type: string
        resourcesUrl:
          deprecated: true
          description: URL to the application base directory hosted on an external
            server. Only present in legacy hosted applications.
          readOnly: true
          type: string
      type: object
    application_owner:
      description: Reference to the tenant owning this application. The default value
        is a reference to the current tenant.
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        tenant:
          $ref: '#/components/schemas/application_owner_tenant'
      readOnly: true
      type: object
    application_required_roles:
      description: List of permissions required by a microservice to work.
      items:
        description: A required role name.
        example: ROLE_INVENTORY_READ
        type: string
      type: array
    application_roles:
      description: Roles provided by the microservice.
      items:
        description: A role name.
        example: ROLE_SMS_READ
        type: string
      type: array
    microservice_application_manifest:
      description: The manifest of the microservice application.
      properties:
        apiVersion:
          description: "Document type format discriminator, for future changes in\
            \ format."
          example: "1"
          type: string
        billingMode:
          default: RESOURCES
          description: |
            The billing mode of the application.

            In case of RESOURCES, the number of resources used is exposed for billing calculation per usage.
            In case of SUBSCRIPTION, all resources usage is counted for the microservice owner and the subtenant is charged for subscription.
          enum:
          - RESOURCES
          - SUBSCRIPTION
          example: RESOURCES
          type: string
        contextPath:
          description: The context path in the URL makes the application accessible.
          example: devicemanagement
          type: string
        extensions:
          description: A list of URL extensions for this microservice application.
          items:
            $ref: '#/components/schemas/microservice_application_manifest_extensions_inner'
          type: array
        isolation:
          description: |
            Deployment isolation.
            In case of PER_TENANT, there is a separate instance for each tenant.
            Otherwise, there is one single instance for all subscribed tenants.
            This will affect billing.
          enum:
          - MULTI_TENANT
          - PER_TENANT
          example: PER_TENANT
          type: string
        livenessProbe:
          $ref: '#/components/schemas/microservice_application_manifest_livenessProbe'
        provider:
          $ref: '#/components/schemas/microservice_application_manifest_provider'
        readinessProbe:
          $ref: '#/components/schemas/microservice_application_manifest_readinessProbe'
        requestResources:
          $ref: '#/components/schemas/microservice_application_manifest_requestResources'
        resources:
          $ref: '#/components/schemas/microservice_application_manifest_resources'
        roles:
          description: Roles provided by the microservice.
          items:
            description: A role name.
            example: ROLE_SMS_READ
            type: string
          type: array
        requiredRoles:
          description: List of permissions required by a microservice to work.
          items:
            description: A required role name.
            example: ROLE_INVENTORY_READ
            type: string
          type: array
        scale:
          default: NONE
          description: |
            Allows to configure a microservice auto scaling policy.
            If the microservice uses a lot of CPU resources, a second instance will be created automatically when this is set to `AUTO`.
            The default is `NONE`, meaning auto scaling will not happen.
          enum:
          - NONE
          - AUTO
          example: AUTO
          type: string
        settings:
          description: A list of settings objects for this microservice application.
          items:
            $ref: '#/components/schemas/application_settings_inner'
          type: array
        settingsCategory:
          description: |
            Allows to specify a custom category for microservice settings.
            By default, `contextPath` is used.
          type: string
          example: null
        version:
          description: |
            Application version.
            Must be a correct [SemVer](https://semver.org/) value but the "+" sign is disallowed.
          example: 1006.6.8
          type: string
      type: object
    web_application_manifest:
      deprecated: true
      description: The manifest of the web application.
      properties:
        _webpaas:
          deprecated: true
          description: |
            A legacy flag that identified a certain type of web application that would control the behavior of plugin tab in the application details view.
            It is no longer used.
          example: true
          type: boolean
        contentSecurityPolicy:
          description: The content security policy of the application.
          example: "base-uri 'none'; default-src 'self' 'unsafe-inline' http: https:\
            \ ws: wss:; connect-src 'self' *.billwerk.com http: https: ws: wss:; \
            \ script-src 'self' open.mapquestapi.com *.twitter.com *.twimg.com 'unsafe-inline'\
            \ 'unsafe-eval' data:; style-src * 'unsafe-inline' blob:; img-src * data:;\
            \ font-src * data:; frame-src *;"
          type: string
        noAppSwitcher:
          description: A flag that decides if the application is shown in the app
            switcher on the UI.
          example: true
          type: boolean
        tabsHorizontal:
          description: A flag that decides if the application tabs are displayed horizontally
            or not.
          example: true
          type: boolean
      type: object
    application_manifest_probe:
      example:
        failureThreshold: 3
        periodSeconds: 30
        timeoutSeconds: 10
        successThreshold: 1
        initialDelaySeconds: 360
        httpGet:
          path: /health
          port: 80
      properties:
        failureThreshold:
          description: The probe failure threshold.
          type: integer
        periodSeconds:
          description: The probe period in seconds.
          type: integer
        timeoutSeconds:
          description: The probe timeout in seconds.
          type: integer
        successThreshold:
          description: The probe success threshold.
          type: integer
        initialDelaySeconds:
          description: The probe's initial delay in seconds.
          type: integer
        httpGet:
          $ref: '#/components/schemas/application_manifest_probe_httpGet'
      type: object
    application_settings:
      description: A list of settings objects for this microservice application.
      items:
        $ref: '#/components/schemas/application_settings_inner'
      type: array
    bulkNewDeviceRequest:
      properties:
        numberOfAll:
          description: "Number of lines processed from the CSV file, without the first\
            \ line (column headers)."
          example: 5
          type: integer
        numberOfCreated:
          description: Number of created device credentials.
          example: 3
          type: integer
        numberOfFailed:
          description: Number of failed creations of device credentials.
          example: 1
          type: integer
        numberOfSuccessful:
          description: Number of successful creations of device credentials. This
            counts both create and update operations.
          example: 4
          type: integer
        credentialUpdatedList:
          description: An array with the updated device credentials.
          items:
            $ref: '#/components/schemas/bulkNewDeviceRequest_credentialUpdatedList_inner'
          type: array
        failedCreationList:
          description: An array with details of the failed device credentials.
          items:
            $ref: '#/components/schemas/bulkNewDeviceRequest_failedCreationList_inner'
          type: array
      type: object
    bulkOperation:
      example:
        self: https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/1237
        id: "1237"
        groupId: "12359"
        failedParentId: "1236"
        startDate: 2022-05-01T22:21:22
        creationRamp: 15
        operationPrototype:
          description: Restart device
          c8y_Restart: {}
        status: IN_PROGRESS
        generalStatus: EXECUTING
        progress:
          pending: 0
          failed: 0
          executing: 0
          successful: 0
          all: 1
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        id:
          description: Unique identifier of this bulk operation.
          readOnly: true
          type: string
        groupId:
          description: |
            Identifies the target group on which this operation should be performed.
            >**&#9432; Info:** `groupId` and `failedParentId` are mutually exclusive. Use only one of them in your request.
          type: string
        failedParentId:
          description: |
            Identifies the failed bulk operation from which the failed operations should be rescheduled.
            >**&#9432; Info:** `groupId` and `failedParentId` are mutually exclusive. Use only one of them in your request.
          type: string
        startDate:
          description: Date and time when the operations of this bulk operation should
            be created.
          format: date-time
          type: string
        creationRamp:
          description: Delay between every operation creation in seconds.
          format: float
          type: number
        operationPrototype:
          description: Operation to be executed for every device in a group.
          type: object
        status:
          description: "The status of this bulk operation, in context of the execution\
            \ of all its single operations."
          enum:
          - ACTIVE
          - IN_PROGRESS
          - COMPLETED
          - DELETED
          readOnly: true
          type: string
        generalStatus:
          description: The general status of this bulk operation. The general status
            is visible for end users and they can filter and evaluate bulk operations
            by this status.
          enum:
          - SCHEDULED
          - EXECUTING
          - EXECUTING_WITH_ERRORS
          - SUCCESSFUL
          - FAILED
          - CANCELED
          readOnly: true
          type: string
        progress:
          $ref: '#/components/schemas/bulkOperation_progress'
      type: object
    currentUser:
      description: The current user.
      example:
        self: https://<TENANT_DOMAIN>/user/currentUser
        id: jdoe
        firstName: John
        lastName: Doe
        userName: jdoe
        phone: +1-541-754-3010
        email: johndoe@example.com
        lastPasswordChange: 2020-06-09T09:48:40.008Z
        shouldResetPassword: false
        effectiveRoles:
        - id: ROLE_ALARM_ADMIN
          name: ROLE_ALARM_ADMIN
          self: https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN
        twoFactorAuthenticationEnabled: false
        devicePermissions: {}
      properties:
        effectiveRoles:
          description: A list of user roles.
          items:
            $ref: '#/components/schemas/role'
          readOnly: true
          type: array
        email:
          description: The user's email address.
          format: email
          type: string
        firstName:
          description: The user's first name.
          type: string
        id:
          description: A unique identifier for this user.
          example: "123"
          readOnly: true
          type: string
        lastName:
          description: The user's last name.
          type: string
        lastPasswordChange:
          description: "The date and time when the user's password was last changed,\
            \ in [ISO 8601 datetime format](https://www.w3.org/TR/NOTE-datetime)."
          example: 2020-06-09T09:48:40.008Z
          format: date-time
          readOnly: true
          type: string
        password:
          description: The user's password. Only Latin1 characters are allowed.
          format: password
          maxLength: 32
          minLength: 6
          type: string
          writeOnly: true
        phone:
          description: The user's phone number.
          format: phone
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        shouldResetPassword:
          description: Indicates if the user should reset the password on the next
            login.
          readOnly: true
          type: boolean
        twoFactorAuthenticationEnabled:
          default: false
          description: Indicates if the user has to use two-factor authentication
            to log in.
          readOnly: true
          type: boolean
        userName:
          description: The user's username. It can have a maximum of 1000 characters.
          type: string
        devicePermissions:
          additionalProperties:
            items:
              type: string
            type: array
          deprecated: true
          description: An object with a list of the user's device permissions.
          example:
            "647100":
            - MANAGED_OBJECT:*:ADMIN
          title: DevicePermissions
          type: object
      type: object
    customProperties:
      additionalProperties:
        description: |
          It is possible to add an arbitrary number of custom properties as a list of key-value pairs, for example, `"property": "value"`.
        x-additionalPropertiesName: customProperties
      description: An object with a list of custom properties.
      example:
        language: en
        userOrigin: BASIC
      properties:
        language:
          description: The preferred language to be used in the platform.
          type: string
      type: object
    deviceControlApiResource:
      example:
        operations:
          self: https://<TENANT_DOMAIN>/devicecontrol/operations
          operations: null
        operationsByStatus: "https://<TENANT_DOMAIN>/devicecontrol/operations?status={status}"
        operationsByAgentId: "https://<TENANT_DOMAIN>/devicecontrol/operations?agentId={agentId}"
        operationsByAgentIdAndStatus: "https://<TENANT_DOMAIN>/devicecontrol/operations?agentId={agentId}&status={status}"
        operationsByDeviceId: "https://<TENANT_DOMAIN>/devicecontrol/operations?deviceId={deviceId}"
        operationsByDeviceIdAndStatus: "https://<TENANT_DOMAIN>/devicecontrol/operations?deviceId={deviceId}&status={status}"
        self: https://<TENANT_DOMAIN>/devicecontrol
      properties:
        operations:
          $ref: '#/components/schemas/deviceControlApiResource_operations'
        operationsByStatus:
          description: Read-only collection of all operations with a particular status.
          type: string
        operationsByAgentId:
          description: Read-only collection of all operations targeting a particular
            agent.
          type: string
        operationsByAgentIdAndStatus:
          description: Read-only collection of all operations targeting a particular
            agent and with a particular status.
          type: string
        operationsByDeviceId:
          description: Read-only collection of all operations to be executed on a
            particular device.
          type: string
        operationsByDeviceIdAndStatus:
          description: "Read-only collection of all operations with a particular status,\
            \ that should be executed on a particular device."
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    deviceCredentials:
      example:
        id: "129129"
        self: https://<TENANT_DOMAIN>/devicecontrol/deviceCredentials/129129
        tenantId: t07007007
        username: device_129129
        password: 5ecur3_p455w0rd
      properties:
        id:
          description: The external ID of the device.
          type: string
        password:
          description: Password of these device credentials.
          format: password
          readOnly: true
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        tenantId:
          description: Tenant ID for these device credentials.
          readOnly: true
          type: string
        username:
          description: Username of these device credentials.
          readOnly: true
          type: string
      type: object
    eventsApiResource:
      example:
        events:
          self: https://<TENANT_DOMAIN>/event/events
          events: null
        eventsForSource: "https://<TENANT_DOMAIN>/event/events?source={source}"
        eventsForSourceAndType: "https://<TENANT_DOMAIN>/event/events?source={source}&type={type}"
        eventsForType: "https://<TENANT_DOMAIN>/event/events?type={type}"
        eventsForFragmentType: "https://<TENANT_DOMAIN>/event/events?fragmentType={fragmentType}"
        eventsForTime: "https://<TENANT_DOMAIN>/event/events?dateFrom={dateFrom}&dateTo={dateTo}"
        eventsForSourceAndTime: "https://<TENANT_DOMAIN>/event/events?source={source}&dateFrom={dateFrom}&dateTo={dateTo}"
        self: https://<TENANT_DOMAIN>/event
      properties:
        events:
          $ref: '#/components/schemas/eventsApiResource_events'
        eventsForSource:
          description: "Read-only collection of all events for a specific source object.\
            \ The placeholder {source} must be a unique ID of an object in the inventory."
          type: string
        eventsForSourceAndType:
          description: Read-only collection of all events of a particular type and
            a specific source object.
          type: string
        eventsForType:
          description: Read-only collection of all events of a particular type.
          type: string
        eventsForFragmentType:
          description: Read-only collection of all events containing a particular
            fragment type.
          type: string
        eventsForTime:
          description: Read-only collection of all events for a particular time range.
          type: string
        eventsForSourceAndTime:
          description: Read-only collection of all events for a specific source object
            in a particular time range.
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    externalId:
      example:
        externalId: simulator_145074_1
        managedObject:
          id: "251982"
          self: https://<TENANT_DOMAIN>/inventory/managedObjects/251982
        self: https://<TENANT_DOMAIN>/identity/externalIds/c8y_Serial/simulator_145074_1
        type: c8y_Serial
      properties:
        externalId:
          description: The identifier used in the external system that Cumulocity
            IoT interfaces with.
          type: string
        managedObject:
          $ref: '#/components/schemas/externalId_managedObject'
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        type:
          description: The type of the external identifier.
          type: string
      required:
      - externalId
      - type
      type: object
    externalIds:
      example:
        externalIds:
        - externalId: simulator_145074_1
          managedObject:
            id: "251982"
            self: https://<TENANT_DOMAIN>/inventory/managedObjects/251982
          self: https://<TENANT_DOMAIN>/identity/externalIds/c8y_Serial/simulator_145074_1
          type: c8y_Serial
        self: https://<TENANT_DOMAIN>/identity/globalIds/251982/externalIds
      properties:
        externalIds:
          description: An array containing the details of all external IDs (if any).
          items:
            $ref: '#/components/schemas/externalId'
          minItems: 0
          type: array
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    event:
      additionalProperties:
        description: |
          It is possible to add an arbitrary number of additional properties as a list of key-value pairs, for example, `"property1": {}`, `"property2": "value"`. These properties are known as custom fragments and can be of any type, for example, object or string. Each custom fragment is identified by a unique name.

          Review the [Naming conventions of fragments](https://cumulocity.com/guides/concepts/domain-model/#naming-conventions-of-fragments) as there are characters that can not be used when naming custom fragments.
        x-additionalPropertiesName: customFragments
      example:
        creationTime: 2020-03-19T12:16:31.586Z
        lastUpdated: 2020-03-20T13:46:11.526Z
        id: "20200301"
        self: https://<TENANT_DOMAIN>/event/events/20200301
        source:
          id: "251982"
          self: https://<TENANT_DOMAIN>/inventory/managedObjects/251982
        text: Location update.
        time: 2020-03-19T00:00:00.000Z
        type: c8y_LocationUpdate
      properties:
        creationTime:
          description: The date and time when the event was created.
          format: date-time
          readOnly: true
          type: string
        lastUpdated:
          description: The date and time when the event was last updated.
          format: date-time
          readOnly: true
          type: string
        id:
          description: Unique identifier of the event.
          readOnly: true
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        source:
          $ref: '#/components/schemas/event_source'
        text:
          description: Description of the event.
          type: string
        time:
          description: The date and time when the event is updated.
          format: date-time
          type: string
        type:
          description: Identifies the type of this event.
          type: string
      type: object
    group:
      example:
        id: 2
        name: Global Watchers
        description: Can watch all events
        self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/2"
        roles:
          self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/roles"
          references: []
        users:
          self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/users"
          references: []
        applications: []
        customProperties: {}
        devicePermissions:
          "647100":
          - MANAGED_OBJECT:*:ADMIN
      properties:
        applications:
          description: A list of applications.
          items:
            $ref: '#/components/schemas/application'
          readOnly: true
          type: array
        customProperties:
          $ref: '#/components/schemas/customProperties'
        description:
          description: A description of the group.
          type: string
        devicePermissions:
          additionalProperties:
            items:
              type: string
            type: array
          deprecated: true
          description: An object with a list of the user's device permissions.
          example:
            "647100":
            - MANAGED_OBJECT:*:ADMIN
          title: DevicePermissions
          type: object
        id:
          description: A unique identifier for this group.
          readOnly: true
          type: integer
        name:
          description: The name of the group.
          minLength: 1
          type: string
        roles:
          $ref: '#/components/schemas/group_roles'
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        users:
          $ref: '#/components/schemas/group_users'
      required:
      - name
      type: object
    identityApiResource:
      example:
        externalId: "https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externaId}"
        externalIdsOfGlobalId: "https://<TENANT_DOMAIN>/identity/globalIds/{managedObjectId}/externalIds"
        self: https://<TENANT_DOMAIN>/identity
      properties:
        externalId:
          description: "Single external ID, represented by the type and the value\
            \ of the external ID."
          format: uri
          type: string
        externalIdsOfGlobalId:
          description: Represents a collection of external IDs for a specified global
            ID.
          format: uri
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    inventoryApiResource:
      example:
        managedObjectsForFragmentType: "https://<TENANT_DOMAIN>/inventory/managedObjects?fragmentType={fragmentType}"
        managedObjectsForType: "https://<TENANT_DOMAIN>/inventory/managedObjects?type={type}"
        managedObjectsForListOfIds: "https://<TENANT_DOMAIN>/inventory/managedObjects?ids={ids}"
        managedObjects:
          references: []
          self: https://<TENANT_DOMAIN>/inventory/managedObjects
        self: https://<TENANT_DOMAIN>/inventory
      properties:
        managedObjectsForFragmentType:
          description: "Read-only collection of all managed objects with a particular\
            \ fragment type or capability (placeholder {fragmentType})."
          type: string
        managedObjectsForType:
          description: "Read-only collection of all managed objects of a particular\
            \ type (placeholder {type})."
          type: string
        managedObjectsForListOfIds:
          description: "Read-only collection of managed objects fetched for a given\
            \ list of ids, for example, “ids=41,43,68”."
          type: string
        managedObjects:
          $ref: '#/components/schemas/inventoryApiResource_managedObjects'
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    binaryInfo:
      description: Contains information about the file.
      properties:
        name:
          description: Name of the binary object.
          example: HelloWorld
          type: string
        type:
          description: Media type of the file.
          example: text/plain
          type: string
      type: object
    eventBinary:
      example:
        name: hello.txt
        self: https://<TENANT_DOMAIN>/event/events/102522209/binaries
        source: "102522209"
        type: text/plain
      properties:
        name:
          description: "Name of the attachment. If it is not provided in the request,\
            \ it will be set as the event ID."
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        source:
          description: Unique identifier of the event.
          readOnly: true
          type: string
        type:
          description: Media type of the attachment.
          type: string
      type: object
    inventoryAssignmentReference:
      description: An inventory role reference.
      properties:
        roles:
          description: An array of roles that are assigned to the managed object for
            the user.
          items:
            $ref: '#/components/schemas/inventoryAssignmentReference_roles_inner'
          type: array
      type: object
    inventoryAssignment:
      description: An inventory assignment.
      properties:
        id:
          description: A unique identifier for this inventory assignment.
          example: 1
          readOnly: true
          type: integer
        managedObject:
          description: A unique identifier for the managed object for which the roles
            are assigned.
          example: "1105"
          type: string
        roles:
          description: An array of roles that are assigned to the managed object for
            the user.
          items:
            $ref: '#/components/schemas/inventoryRole'
          type: array
        self:
          description: A URL linking to this resource.
          example: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe/roles/inventory/1"
          format: uri
          readOnly: true
          type: string
      type: object
    inventoryRole:
      description: An inventory role.
      properties:
        description:
          description: A description for this inventory role.
          example: Can restart devices.
          type: string
        id:
          description: A unique identifier for this inventory role.
          example: 4
          readOnly: true
          type: integer
        name:
          description: The name of this inventory role.
          example: "Operations: Restart Device"
          type: string
        permissions:
          description: A set of permissions for this inventory role.
          items:
            $ref: '#/components/schemas/inventoryRolePermission'
          type: array
        self:
          description: A URL linking to this resource.
          example: https://<TENANT_DOMAIN>/user/inventoryroles/4
          format: uri
          readOnly: true
          type: string
      type: object
    inventoryRolePermission:
      description: A permission object of an inventory role.
      example:
        id: 7
        permission: ADMIN
        scope: OPERATION
        type: c8y_Restart
      properties:
        id:
          description: A unique identifier for this permission.
          readOnly: true
          type: integer
        permission:
          description: The permission level.
          enum:
          - ADMIN
          - READ
          - '*'
          type: string
        scope:
          description: The scope of this permission.
          enum:
          - ALARM
          - AUDIT
          - EVENT
          - MANAGED_OBJECT
          - MEASUREMENT
          - OPERATION
          - '*'
          type: string
        type:
          description: "The type of this permission. It can be the name of a fragment,\
            \ for example, `c8y_Restart`."
          type: string
      type: object
    binary:
      example:
        c8y_IsBinary: {}
        contentType: text/plain
        id: "123153092"
        lastUpdated: 2020-10-15T22:15:17.267Z
        length: 365
        name: HelloWorld
        owner: manga
        self: https://<TENANT_DOMAIN>/inventory/binaries/123153092
        type: text/plain
      properties:
        c8y_IsBinary:
          description: Fragment to identify this managed object as a file.
          type: object
        contentType:
          description: Media type of the file.
          type: string
        id:
          description: Unique identifier of the object.
          minLength: 1
          title: ObjectId
          type: string
        lastUpdated:
          description: Date and time of the file's last update.
          format: date-time
          readOnly: true
          type: string
        length:
          description: Size of the file in bytes.
          type: integer
        name:
          description: Name of the managed object. It is set from the `object` contained
            in the payload.
          type: string
        owner:
          description: Username of the owner of the file.
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        type:
          description: Type of the managed object. It is set from the `object` contained
            in the payload.
          type: string
      type: object
    managedObject:
      additionalProperties:
        description: |
          It is possible to add an arbitrary number of additional properties as a list of key-value pairs, for example, `"property1": {}`, `"property2": "value"`. These properties are known as custom fragments and can be of any type, for example, object or string. Each custom fragment is identified by a unique name.

          Review the [Naming conventions of fragments](https://cumulocity.com/guides/concepts/domain-model/#naming-conventions-of-fragments) as there are characters that can not be used when naming custom fragments.
        x-additionalPropertiesName: customFragments
      example:
        creationTime: 2017-12-12T22:09:06.881+01:00
        id: "51994"
        lastUpdated: 2018-07-19T12:01:50.731Z
        name: My tracking device
        owner: manga
        self: https://<TENANT_DOMAIN>/inventory/managedObjects/51994
        c8y_IsDevice: {}
        c8y_DeviceTypes:
        - deviceSubsetType
        c8y_SupportedOperations:
        - c8y_Restart
        childAdditions:
          self: https://<TENANT_DOMAIN>/inventory/managedObjects/51994/childAdditions
          references: []
        childAssets:
          self: https://<TENANT_DOMAIN>/inventory/managedObjects/51994/childAssets
          references: []
        childDevices:
          self: https://<TENANT_DOMAIN>/inventory/managedObjects/51994/childDevices
          references: []
        additionParents:
          self: https://<TENANT_DOMAIN>/inventory/managedObjects/51994/additionParents
          references: []
        assetParents:
          self: https://<TENANT_DOMAIN>/inventory/managedObjects/51994/assetParents
          references: []
        deviceParents:
          self: https://<TENANT_DOMAIN>/inventory/managedObjects/51994/deviceParents
          references: []
      properties:
        creationTime:
          description: The date and time when the object was created.
          format: date-time
          readOnly: true
          type: string
        id:
          description: Unique identifier of the object.
          readOnly: true
          type: string
        lastUpdated:
          description: The date and time when the object was updated for the last
            time.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Human-readable name that is used for representing the object
            in user interfaces.
          title: ObjectName
          type: string
        owner:
          description: Username of the device's owner.
          readOnly: true
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        type:
          description: "The fragment type can be interpreted as _device class_, this\
            \ means, devices with the same type can receive the same types of configuration,\
            \ software, firmware and operations. The type value is indexed and is\
            \ therefore used for queries."
          type: string
        childAdditions:
          $ref: '#/components/schemas/objectChildAdditions'
        childAssets:
          $ref: '#/components/schemas/objectChildAssets'
        childDevices:
          $ref: '#/components/schemas/objectChildDevices'
        additionParents:
          $ref: '#/components/schemas/objectAdditionParents'
        assetParents:
          $ref: '#/components/schemas/objectAssetParents'
        deviceParents:
          $ref: '#/components/schemas/objectDeviceParents'
        c8y_IsDevice:
          description: A fragment which identifies this managed object as a device.
          type: object
        c8y_DeviceTypes:
          description: "This fragment must be added in order to publish sample commands\
            \ for a subset of devices sharing the same device type. If the fragment\
            \ is present, the list of sample commands for a device type will be extended\
            \ with the sample commands for the `c8y_DeviceTypes`. New sample commands\
            \ created from the user interface will be created in the context of the\
            \ `c8y_DeviceTypes`."
          items:
            type: string
          type: array
        c8y_SupportedOperations:
          description: "Lists the operations that are available for a particular device,\
            \ so that applications can trigger the operations."
          items:
            type: string
          type: array
      type: object
    managedObjectReferenceTuple:
      properties:
        managedObject:
          $ref: '#/components/schemas/managedObjectReferenceTuple_managedObject'
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    measurement:
      additionalProperties:
        description: |
          It is possible to add an arbitrary number of additional properties as a list of key-value pairs, for example, `"property1": {}`, `"property2": "value"`. These properties are known as custom fragments and can be of any type, for example, object or string. Each custom fragment is identified by a unique name.

          Review the [Naming conventions of fragments](https://cumulocity.com/guides/concepts/domain-model/#naming-conventions-of-fragments) as there are characters that can not be used when naming custom fragments.
        x-additionalPropertiesName: customFragments
      example:
        id: "20200301"
        self: https://<TENANT_DOMAIN>/measurement/measurements/20200301
        source:
          id: "251982"
          self: https://<TENANT_DOMAIN>/inventory/managedObjects/251982
        time: 2020-03-19T12:03:27.845Z
        type: c8y_TemperatureMeasurement
        c8y_Steam:
          Temperature:
            unit: C
            value: 100
      properties:
        id:
          description: Unique identifier of the measurement.
          readOnly: true
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        source:
          $ref: '#/components/schemas/measurement_source'
        time:
          description: The date and time when the measurement is created.
          format: date-time
          type: string
        type:
          description: Identifies the type of this measurement.
          type: string
        c8y_Steam:
          $ref: '#/components/schemas/c8y_Steam'
      required:
      - source
      - time
      - type
      type: object
    c8y_Steam:
      description: A type of measurement fragment.
      properties:
        Temperature:
          $ref: '#/components/schemas/c8y_Steam_Temperature'
      type: object
    measurementApiResource:
      example:
        measurements:
          self: https://<TENANT_DOMAIN>/measurement/measurements
          measurements: null
        measurementsForSource: "https://<TENANT_DOMAIN>/measurement/measurements?source={source}"
        measurementsForSourceAndType: "https://<TENANT_DOMAIN>/measurement/measurements?source={source}&type={type}"
        measurementsForType: "https://<TENANT_DOMAIN>/measurement/measurements?type={type}"
        measurementsForValueFragmentType: "https://<TENANT_DOMAIN>/measurement/measurements?valueFragmentType={valueFragmentType}"
        measurementsForDate: "https://<TENANT_DOMAIN>/measurement/measurements?dateFrom={dateFrom}&dateTo={dateTo}"
        measurementsForSourceAndDate: "https://<TENANT_DOMAIN>/measurement/measurements?source={source}&dateFrom={dateFrom}&dateTo={dateTo}"
        measurementsForDateAndFragmentType: "https://<TENANT_DOMAIN>/measurement/measurements?dateFrom={dateFrom}&dateTo={dateTo}&fragmentType={fragmentType}"
        measurementsForSourceAndValueFragmentTypeAndValueFragmentSeries: "https://<TENANT_DOMAIN>/measurement/measurements?source={source}&valueFragmentType={valueFragmentType}&valueFragmentSeries={valueFragmentSeries}&type={type}"
        self: https://<TENANT_DOMAIN>/measurement
      properties:
        measurements:
          $ref: '#/components/schemas/measurementApiResource_measurements'
        measurementsForSource:
          description: "Read-only collection of all measurements for a specific source\
            \ object. The placeholder {source} must be a unique ID of an object in\
            \ the inventory."
          type: string
        measurementsForSourceAndType:
          description: Read-only collection of all measurements of a particular type
            and a specific source object.
          type: string
        measurementsForType:
          description: Read-only collection of all measurements of a particular type.
          type: string
        measurementsForValueFragmentType:
          description: Read-only collection of all measurements containing a particular
            fragment type.
          type: string
        measurementsForDate:
          description: Read-only collection of all measurements for a particular time
            range.
          type: string
        measurementsForSourceAndDate:
          description: Read-only collection of all measurements for a specific source
            object in a particular time range.
          type: string
        measurementsForDateAndFragmentType:
          description: Read-only collection of all measurements for a specific fragment
            type and a particular time range.
          type: string
        measurementsForSourceAndValueFragmentTypeAndValueFragmentSeries:
          description: "Read-only collection of all measurements for a specific source\
            \ object, particular fragment type and series, and an event type."
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    newDeviceRequest:
      example:
        id: "54545454"
        self: https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/54545454
        status: WAITING_FOR_CONNECTION
      properties:
        id:
          description: External ID of the device.
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        status:
          description: Status of this new device request.
          enum:
          - WAITING_FOR_CONNECTION
          - PENDING_ACCEPTANCE
          - ACCEPTED
          type: string
      type: object
    objectAdditionParents:
      description: A collection of references to addition parent objects.
      properties:
        references:
          description: An array with the references to addition parent objects.
          example: []
          items:
            $ref: '#/components/schemas/managedObjectReferenceTuple'
          type: array
        self:
          description: Link to this resource's addition parent objects.
          example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/additionParents"
          type: string
      readOnly: true
      type: object
    objectAssetParents:
      description: A collection of references to asset parent objects.
      properties:
        references:
          description: An array with the references to asset parent objects.
          example: []
          items:
            $ref: '#/components/schemas/managedObjectReferenceTuple'
          type: array
        self:
          description: Link to this resource's asset parent objects.
          example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/assetParents"
          type: string
      readOnly: true
      type: object
    objectDeviceParents:
      description: A collection of references to device parent objects.
      properties:
        references:
          description: An array with the references to parent objects.
          example: []
          items:
            $ref: '#/components/schemas/managedObjectReferenceTuple'
          type: array
        self:
          description: Link to this resource's parent objects.
          example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/deviceParents"
          type: string
      readOnly: true
      type: object
    objectChildAdditions:
      description: A collection of references to child additions.
      properties:
        count:
          description: The total number of child additions. Only present if the value
            is greater than 0.
          type: integer
        references:
          description: An array with the references to child devices.
          example: []
          items:
            $ref: '#/components/schemas/managedObjectReferenceTuple'
          type: array
        self:
          description: Link to this resource's child additions.
          example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions"
          type: string
      readOnly: true
      type: object
    objectChildAssets:
      description: A collection of references to child assets.
      properties:
        count:
          description: The total number of child assets. Only present if the value
            is greater than 0.
          type: integer
        references:
          description: An array with the references to child assets.
          example: []
          items:
            $ref: '#/components/schemas/managedObjectReferenceTuple'
          type: array
        self:
          description: Link to this resource's child assets.
          example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets"
          type: string
      readOnly: true
      type: object
    objectChildDevices:
      description: A collection of references to child devices.
      properties:
        count:
          description: The total number of child devices. Only present if the value
            is greater than 0.
          type: integer
        references:
          description: An array with the references to child devices.
          example: []
          items:
            $ref: '#/components/schemas/managedObjectReferenceTuple'
          type: array
        self:
          description: Link to this resource's child devices.
          example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices"
          type: string
      readOnly: true
      type: object
    operation:
      additionalProperties:
        description: |
          It is possible to add an arbitrary number of additional properties as a list of key-value pairs, for example, `"property1": {}`, `"property2": "value"`. These properties are known as custom fragments and can be of any type, for example, object or string. Each custom fragment is identified by a unique name.

          Review the [Naming conventions of fragments](https://cumulocity.com/guides/concepts/domain-model/#naming-conventions-of-fragments) as there are characters that can not be used when naming custom fragments.
        x-additionalPropertiesName: customFragments
      example:
        self: https://<TENANT_DOMAIN>/devicecontrol/operation/123
        id: "123"
        creationTime: 2019-09-06T12:03:27.927+02:0
        deviceId: "1234"
        deviceExternalIDs: {}
        bulkOperationId: "1237"
        status: FAILED
        failureReason: Could not handle the operation
        com_cumulocity_model_WebCamDevice:
          name: Take a picture
          parameters:
            duration: 5s
            quality: HD
      properties:
        bulkOperationId:
          description: Reference to a bulk operation ID if this operation was scheduled
            from a bulk operation.
          readOnly: true
          type: string
        creationTime:
          description: Date and time when the operation was created in the database.
          format: date-time
          readOnly: true
          type: string
        deviceId:
          description: Identifier of the target device where the operation should
            be performed.
          type: string
        deviceExternalIDs:
          $ref: '#/components/schemas/externalIds'
        failureReason:
          description: Reason for the failure.
          readOnly: true
          type: string
        id:
          description: Unique identifier of this operation.
          readOnly: true
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        status:
          description: The status of the operation.
          enum:
          - SUCCESSFUL
          - FAILED
          - EXECUTING
          - PENDING
          type: string
      type: object
    operationReference:
      properties:
        operation:
          $ref: '#/components/schemas/operationReference_operation'
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    pageStatistics:
      description: Information about paging statistics.
      properties:
        currentPage:
          description: The current page of the paginated results.
          example: 2
          minimum: 1
          type: integer
        pageSize:
          description: "Indicates the number of objects that the collection may contain\
            \ per page. The upper limit for one page is 2,000 objects."
          example: 5
          maximum: 2000
          minimum: 1
          type: integer
        totalElements:
          description: The total number of results (elements).
          example: 12
          minimum: 0
          type: integer
        totalPages:
          description: |
            The total number of paginated results (pages).

            > **&#9432; Info:** This property is returned by default except when an operation retrieves all records where values are between an upper and lower boundary, for example, querying ranges using `dateFrom`–`dateTo`. In such cases, the query parameter `withTotalPages=true` should be used to include the total number of pages (at the expense of slightly slower performance).
          example: 3
          minimum: 0
          type: integer
      readOnly: true
      type: object
    passwordChange:
      properties:
        currentUserPassword:
          description: The current password of the user performing the request.
          example: SecretP@@sword!_
          format: password
          type: string
          writeOnly: true
        newPassword:
          description: The new password to be set for the user performing the request.
          example: New_SecretP@@sword!_
          format: password
          type: string
          writeOnly: true
      required:
      - currentUserPassword
      - newPassword
      type: object
    retentionRule:
      example:
        dataType: ALARM
        editable: true
        fragmentType: '*'
        id: "1569"
        maximumAge: 20
        self: https://<TENANT_DOMAIN>/retention/retentions/1569
        source: '*'
        type: '*'
      properties:
        dataType:
          default: '*'
          description: The data type(s) to which the rule is applied.
          enum:
          - ALARM
          - AUDIT
          - BULK_OPERATION
          - EVENT
          - MEASUREMENT
          - OPERATION
          - '*'
          type: string
        editable:
          default: true
          description: Indicates whether the rule is editable or not. It can be updated
            only by the Management tenant.
          type: boolean
        fragmentType:
          default: '*'
          description: "The fragment type(s) to which the rule is applied. Used by\
            \ the data types EVENT, MEASUREMENT, OPERATION and BULK_OPERATION."
          type: string
        id:
          description: Unique identifier of the retention rule.
          readOnly: true
          type: string
        maximumAge:
          description: Maximum age expressed in number of days.
          type: integer
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        source:
          default: '*'
          description: The source(s) to which the rule is applied. Used by all data
            types.
          type: string
        type:
          default: '*'
          description: "The type(s) to which the rule is applied. Used by the data\
            \ types ALARM, AUDIT, EVENT and MEASUREMENT."
          type: string
      type: object
    role:
      description: A user role.
      example:
        id: ROLE_ALARM_ADMIN
        name: ROLE_ALARM_ADMIN
        self: https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN
      properties:
        id:
          description: A unique identifier for this user role.
          type: string
        name:
          description: The name of this user role.
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    userApiResource:
      example:
        self: https://<TENANT_DOMAIN>/user
        users: "https://<TENANT_DOMAIN>/user/{tenantId}/users"
        userByName: "https://<TENANT_DOMAIN>/user/{tenantId}/userByName/{username}"
        currentUser: https://<TENANT_DOMAIN>/user/currentUser
        groups: "https://<TENANT_DOMAIN>/user/{tenantId}/groups"
        groupByName: "https://<TENANT_DOMAIN>/user/{tenantId}/groupByName/{groupName}"
        roles: https://<TENANT_DOMAIN>/user/roles
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        users:
          description: Collection of all users belonging to a given tenant.
          type: string
        userByName:
          description: Reference to a resource of type user.
          type: string
        currentUser:
          description: Reference to the resource of the logged in user.
          type: string
        groups:
          description: Collection of all users belonging to a given tenant.
          type: string
        groupByName:
          description: Reference to a resource of type group.
          type: string
        roles:
          description: Collection of all roles.
          type: string
      type: object
    user:
      example:
        self: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe"
        id: jdoe
        firstName: John
        lastName: Doe
        userName: jdoe
        phone: +1-541-754-3010
        displayName: John Doe
        email: johndoe@example.com
        lastPasswordChange: 2020-06-09T09:48:40.008Z
        passwordStrength: GREEN
        shouldResetPassword: false
        twoFactorAuthenticationEnabled: false
        customProperties: {}
        effectiveRoles:
          self: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe/roles"
          references:
          - id: ROLE_ALARM_ADMIN
            name: ROLE_ALARM_ADMIN
            self: https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN
        enabled: true
        groups:
          self: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe/groups"
          references: []
        applications: []
        devicePermissions:
          "647100":
          - MANAGED_OBJECT:*:READ
      properties:
        applications:
          description: A list of applications for this user.
          items:
            $ref: '#/components/schemas/application'
          readOnly: true
          type: array
        customProperties:
          $ref: '#/components/schemas/customProperties'
        displayName:
          description: The user's display name in Cumulocity IoT.
          type: string
        email:
          description: The user's email address.
          format: email
          type: string
        enabled:
          default: true
          description: Indicates whether the user is enabled or not. Disabled users
            cannot log in or perform API requests.
          type: boolean
        firstName:
          description: The user's first name.
          type: string
        groups:
          $ref: '#/components/schemas/user_groups'
        id:
          description: A unique identifier for this user.
          readOnly: true
          type: string
        lastName:
          description: The user's last name.
          type: string
        lastPasswordChange:
          description: "The date and time when the user's password was last changed,\
            \ in [ISO 8601 datetime format](https://www.w3.org/TR/NOTE-datetime)."
          format: date-time
          readOnly: true
          type: string
        newsletter:
          description: Indicates whether the user is subscribed to the newsletter
            or not.
          type: boolean
        owner:
          description: "Identifier of the parent user. If present, indicates that\
            \ a user belongs to a user hierarchy by pointing to its direct ancestor.\
            \ Can only be set by users with role USER_MANAGEMENT_ADMIN during user\
            \ creation. Otherwise it's assigned automatically."
          readOnly: true
          type: string
        password:
          description: |
            The user's password. Only Latin1 characters are allowed.

            If you do not specify a password when creating a new user with a POST request, it must contain the property `sendPasswordResetEmail` with a value of `true`.
          format: password
          maxLength: 32
          minLength: 6
          type: string
          writeOnly: true
        passwordStrength:
          description: "Indicates the password strength. The value can be GREEN, YELLOW\
            \ or RED for decreasing password strengths."
          enum:
          - GREEN
          - YELLOW
          - RED
          readOnly: true
          type: string
        phone:
          description: The user's phone number.
          format: phone
          type: string
        roles:
          $ref: '#/components/schemas/user_roles'
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        sendPasswordResetEmail:
          description: |
            When set to `true`, this field will cause Cumulocity IoT to send a password reset email to the email address specified.

            If there is no password specified when creating a new user with a POST request, this must be specified and it must be set to `true`.
          type: boolean
          writeOnly: true
        shouldResetPassword:
          description: Indicates if the user should reset the password on the next
            login.
          readOnly: true
          type: boolean
        twoFactorAuthenticationEnabled:
          default: false
          description: Indicates if the user has to use two-factor authentication
            to log in.
          readOnly: true
          type: boolean
        userName:
          description: The user's username. It can have a maximum of 1000 characters.
          type: string
        devicePermissions:
          additionalProperties:
            items:
              type: string
            type: array
          deprecated: true
          description: An object with a list of the user's device permissions.
          example:
            "647100":
            - MANAGED_OBJECT:*:ADMIN
          title: DevicePermissions
          type: object
      type: object
    userTfaData:
      example:
        tfaEnabled: false
        tfaEnforced: false
        strategy: TOTP
        lastTfaRequestTime: 2022-08-01T20:00:00.123Z
      properties:
        lastTfaRequestTime:
          description: Latest date and time when the user has used two-factor authentication
            to log in.
          format: date-time
          readOnly: true
          type: string
        strategy:
          description: Two-factor authentication strategy.
          enum:
          - SMS
          - TOTP
          type: string
        tfaEnabled:
          description: Indicates whether the user has enabled two-factor authentication
            or not.
          type: boolean
        tfaEnforced:
          description: Indicates whether two-factor authentication is enforced by
            the tenant admin or not.
          type: boolean
      type: object
    tenantTfaData:
      example:
        enabledOnSystemLevel: false
        enabledOnTenantLevel: true
        totpEnforcedOnTenantLevel: true
        enforcedOnSystemLevel: false
        enforcedUsersGroup: admins
        strategy: TOTP
      properties:
        enabledOnSystemLevel:
          description: Indicates whether two-factor authentication is enabled on system
            level or not.
          readOnly: true
          type: boolean
        enabledOnTenantLevel:
          description: Indicates whether two-factor authentication is enabled on tenant
            level or not.
          readOnly: true
          type: boolean
        enforcedOnSystemLevel:
          description: Indicates whether two-factor authentication is enforced on
            system level or not.
          readOnly: true
          type: boolean
        enforcedUsersGroup:
          description: Two-factor authentication is enforced for the specified group.
          readOnly: true
          type: string
        strategy:
          description: Two-factor authentication strategy.
          enum:
          - SMS
          - TOTP
          readOnly: true
          type: string
        totpEnforcedOnTenantLevel:
          description: Indicates whether two-factor authentication is enforced on
            tenant level or not.
          readOnly: true
          type: boolean
      type: object
    currentUserTotpSecretActivity:
      example:
        isActive: true
      properties:
        isActive:
          description: Indicates whether the two-factor authentication secret is active.
          example: true
          type: boolean
      required:
      - isActive
      type: object
    currentUserTotpSecret:
      example:
        rawSecret: 5XLQP7HIKZBDH6ZZ
        secretQrUrl: https://chart.googleapis.com/chart?chs=200x200&chld=M%7C0&cht=qr&chl=otpauth%3A%2F%2Ftotp%2Fcumulocity.default.svc.cluster.local%3Aadmin%3Fsecret%3D5XLQP7HIKZBDH6ZZ%26issuer%3Dcumulocity.default.svc.cluster.local
      properties:
        rawSecret:
          description: Secret used by two-factor authentication applications to generate
            the TFA codes.
          readOnly: true
          type: string
        secretQrUrl:
          description: URL used to set the two-factor authentication secret for the
            TFA application.
          format: uri
          readOnly: true
          type: string
      type: object
    currentUserTotpCode:
      properties:
        code:
          description: Two-factor authentication code entered by the user to log in
            to the platform.
          example: "123456"
          type: string
      required:
      - code
      type: object
    tenantApiResource:
      example:
        self: https://<TENANT_DOMAIN>/tenant
        options:
          self: https://<TENANT_DOMAIN>/tenant/options
          options: []
        tenants:
          self: https://<TENANT_DOMAIN>/tenant/tenants
          tenants: []
        tenantApplications: "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications"
        tenantApplicationForId: "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications/{applicationId}"
        tenantForId: "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}"
        tenantOptionsForCategory: "https://<TENANT_DOMAIN>/tenant/options/{category}"
        tenantOptionForCategoryAndKey: "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}"
        tenantSystemOptions: https://<TENANT_DOMAIN>/tenant/system/options
        tenantSystemOptionsForCategoryAndKey: "https://<TENANT_DOMAIN>/tenant/system/options/{category}/{key}"
      properties:
        options:
          $ref: '#/components/schemas/tenantApiResource_options'
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        tenants:
          $ref: '#/components/schemas/tenantApiResource_tenants'
        tenantApplications:
          description: Retrieves subscribed applications.
          type: string
        tenantApplicationForId:
          description: Represents an individual application reference that can be
            viewed.
          type: string
        tenantForId:
          description: Represents an individual tenant that can be viewed.
          type: string
        tenantOptionsForCategory:
          description: Represents a category of tenant options.
          type: string
        tenantOptionForCategoryAndKey:
          description: Retrieves a key of the category of tenant options.
          type: string
        tenantSystemOptions:
          description: Retrieves the tenant system options.
          type: string
        tenantSystemOptionsForCategoryAndKey:
          description: Retrieves the tenant system options based on category and key.
          type: string
      type: object
    tenant:
      example:
        id: t07007007
        self: https://<TENANT_DOMAIN>/tenant/tenants/t07007007
        adminEmail: john@doe.com
        adminName: johndoe
        adminPass: th3m4tr1xh4syu0
        allowCreateTenants: false
        applications:
          self: https://<TENANT_DOMAIN>/tenant/tenants/t07007007/applications
          references: []
        company: ACME AG
        contactName: John Doe
        contactPhone: +52 333 567 1234
        creationTime: 2020-05-02T20:00:29.907Z
        customProperties: {}
        domain: mytenant.cumulocity.com
        ownedApplications:
          self: https://<TENANT_DOMAIN>/tenant/tenants/t07007007/applications
          references: []
        parent: t1511681
        status: ACTIVE
      properties:
        adminEmail:
          description: Email address of the tenant's administrator.
          format: email
          type: string
        adminName:
          description: |
            Username of the tenant's administrator.
            > **&#9432; Info:** When it is provided in the request body, also `adminEmail` and `adminPass` must be provided.
          maxLength: 50
          minLength: 1
          type: string
        adminPass:
          description: Password of the tenant's administrator.
          format: password
          maxLength: 32
          type: string
          writeOnly: true
        allowCreateTenants:
          default: false
          description: Indicates if this tenant can create subtenants.
          readOnly: true
          type: boolean
        applications:
          $ref: '#/components/schemas/tenant_applications'
        company:
          description: Tenant's company name.
          maxLength: 256
          minLength: 1
          type: string
        contactName:
          description: Name of the contact person.
          maxLength: 30
          minLength: 1
          type: string
        contactPhone:
          description: "Phone number of the contact person, provided in the international\
            \ format, for example, +48 123 456 7890."
          format: phone
          type: string
        creationTime:
          description: The date and time when the tenant was created.
          format: date-time
          readOnly: true
          type: string
        customProperties:
          $ref: '#/components/schemas/customProperties'
        domain:
          description: URL of the tenant's domain. The domain name permits only the
            use of alphanumeric characters separated by dots `.` and hyphens `-`.
          format: hostname
          maxLength: 256
          minLength: 1
          type: string
        id:
          description: Unique identifier of a Cumulocity IoT tenant.
          example: t07007007
          maxLength: 32
          minLength: 2
          readOnly: true
          title: TenantId
          type: string
        ownedApplications:
          $ref: '#/components/schemas/tenant_ownedApplications'
        parent:
          description: ID of the parent tenant.
          readOnly: true
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        status:
          default: ACTIVE
          description: Current status of the tenant.
          enum:
          - ACTIVE
          - SUSPENDED
          readOnly: true
          type: string
      type: object
    option:
      description: A tuple storing tenant configuration.
      example:
        category: alarm.type.mapping
        key: temp_too_high
        value: CRITICAL|temperature too high
        self: https://<TENANT_DOMAIN>/tenant/options/alarm.type.mapping/temp_too_high
      properties:
        category:
          description: Name of the option category.
          minLength: 1
          type: string
        key:
          description: A unique identifier for this option.
          minLength: 1
          type: string
        value:
          description: Value of this option.
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    authConfigAccess:
      properties:
        onlyManagementTenantAccess:
          default: false
          description: Indicates whether the configuration is only accessible to the
            management tenant.
          example: true
          type: boolean
      type: object
    authConfig:
      description: Parameters determining the authentication process.
      example:
        self: https://<TENANT_DOMAIN>/tenant/loginOptions/924997e5-863c-4532-96f9-cbe6dc5f8902
        userManagementSource: INTERNAL
        type: OAUTH2_INTERNAL
        sessionConfiguration:
          absoluteTimeoutMillis: 7200000
          renewalTimeoutMillis: 3600000
          userAgentValidationRequired: false
          maximumNumberOfParallelSessions: 3
        id: 924997e5-863c-4532-96f9-cbe6dc5f8902
        providerName: Cumulocity
        visibleOnLoginPage: true
        grantType: PASSWORD
        onlyManagementTenantAccess: true
      properties:
        accessTokenToUserDataMapping:
          $ref: '#/components/schemas/authConfig_accessTokenToUserDataMapping'
        audience:
          description: SSO specific. Token audience.
          format: uri
          type: string
        authorizationRequest:
          $ref: '#/components/schemas/authConfig_authorizationRequest'
        authenticationRestrictions:
          $ref: '#/components/schemas/BasicAuthenticationRestrictions'
        buttonName:
          description: SSO specific. Information for the UI about the name displayed
            on the external server login button.
          type: string
        clientId:
          description: SSO specific. The identifier of the Cumulocity IoT tenant on
            the external authorization server.
          type: string
        grantType:
          description: The authentication configuration grant type identifier.
          enum:
          - AUTHORIZATION_CODE
          - PASSWORD
          type: string
        id:
          description: Unique identifier of this login option.
          type: string
        issuer:
          description: SSO specific. External token issuer.
          format: uri
          type: string
        logoutRequest:
          $ref: '#/components/schemas/authConfig_logoutRequest'
        onlyManagementTenantAccess:
          description: Indicates whether the configuration is only accessible to the
            management tenant.
          type: boolean
        onNewUser:
          $ref: '#/components/schemas/authConfig_onNewUser'
        providerName:
          description: The name of the authentication provider.
          type: string
        redirectToPlatform:
          description: SSO specific. URL used for redirecting to the Cumulocity IoT
            platform.
          format: uri
          type: string
        refreshRequest:
          $ref: '#/components/schemas/authConfig_refreshRequest'
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        sessionConfiguration:
          $ref: '#/components/schemas/OAuthSessionConfiguration'
        signatureVerificationConfig:
          $ref: '#/components/schemas/authConfig_signatureVerificationConfig'
        template:
          description: SSO specific. Template name used by the UI.
          type: string
        tokenRequest:
          $ref: '#/components/schemas/authConfig_tokenRequest'
        type:
          description: The authentication configuration type. Note that the value
            is case insensitive.
          enum:
          - BASIC
          - OAUTH2
          - OAUTH2_INTERNAL
          type: string
        userIdConfig:
          $ref: '#/components/schemas/authConfig_userIdConfig'
        userManagementSource:
          description: Indicates whether user data are managed internally by the Cumulocity
            IoT platform or by an external server. Note that the value is case insensitive.
          enum:
          - INTERNAL
          - REMOTE
          type: string
        visibleOnLoginPage:
          description: Information for the UI if the respective authentication form
            should be visible for the user.
          type: boolean
      required:
      - providerName
      - type
      type: object
    loginForm:
      properties:
        code:
          description: Used in case of SSO login. A code received from the external
            authentication server is exchanged to an internal access token.
          example: MIIFezCCA2OgAwIBAgIUNU2ZnXIdu9aq+O7x2emLTgXgQEowDQYJKoZIhvc
          type: string
        grant_type:
          description: Dependent on the authentication type. PASSWORD is used for
            OAI-Secure.
          enum:
          - PASSWORD
          - AUTHORIZATION_CODE
          example: PASSWORD
          type: string
        password:
          description: Used in cases of basic or OAI-Secure authentication.
          example: Str0ngPassw0rd!2
          type: string
        tfa_code:
          description: "Current TFA code, sent by the user, if a TFA code is required\
            \ to log in."
          example: "123433"
          type: string
        username:
          description: Used in cases of basic or OAI-Secure authentication.
          example: Admin
          type: string
      type: object
    JSONPredicateRepresentation:
      description: Represents a predicate for verification. It acts as a condition
        which is necessary to assign a user to the given groups and permit access
        to the specified applications.
      properties:
        childPredicates:
          description: Nested predicates.
          example: []
          items:
            $ref: '#/components/schemas/JSONPredicateRepresentation'
          type: array
        operator:
          description: Operator executed on the parameter from the JWT access token
            claim pointed by `parameterPath` and the provided parameter `value`.
          enum:
          - EQ
          - NEQ
          - GT
          - LT
          - GTE
          - LTE
          - IN
          - AND
          - OR
          example: AND
          type: string
        parameterPath:
          description: Path to the claim from the JWT access token from the external
            authorization server.
          example: group
          type: string
        value:
          description: Given value used for parameter verification.
          example: "2"
          type: string
      type: object
    RequestRepresentation:
      properties:
        body:
          description: Body of the request.
          type: string
        headers:
          additionalProperties:
            description: |
              It is possible to add an arbitrary number of headers as a list of key-value string pairs, for example, `"header": "value"`.
            type: string
            x-additionalPropertiesName: requestHeaders
          description: Headers of the request.
          type: object
        method:
          description: HTTP request method.
          enum:
          - GET
          - POST
          type: string
        operation:
          description: Requested operation.
          enum:
          - EXECUTE
          - REDIRECT
          type: string
        requestParams:
          additionalProperties:
            description: |
              It is possible to add an arbitrary number of parameters as a list of key-value string pairs, for example, `"parameter": "value"`.
            type: string
            x-additionalPropertiesName: requestParameters
          description: Parameters of the request.
          type: object
        url:
          description: Target of the request described as a URL.
          format: uri
          type: string
      type: object
    childOperationsAddOne:
      properties:
        managedObject:
          $ref: '#/components/schemas/childOperationsAddOne_managedObject'
      required:
      - managedObject
      type: object
    childOperationsAddMultiple:
      properties:
        references:
          description: An array containing the IDs of the managed objects (children).
          example:
          - managedObject:
              id: "128"
          - managedObject:
              id: "129"
          items:
            $ref: '#/components/schemas/childOperationsAddMultiple_references_inner'
          nullable: false
          type: array
      required:
      - references
      type: object
    ApplicationReferenceCollection:
      example:
        prev: https://<TENANT_DOMAIN>/tenant/tenants/t07007007/applications?pageSize=5&currentPage=1
        self: https://<TENANT_DOMAIN>/tenant/tenants/t07007007/applications?pageSize=5&currentPage=2
        next: https://<TENANT_DOMAIN>/tenant/tenants/t07007007/applications?pageSize=5&currentPage=3
        statistics:
          totalPages: 3
          currentPage: 2
          pageSize: 5
          totalElements: 10
        references:
        - availability: PRIVATE
          contextPath: myapplication
          id: "20200301"
          key: my-application-key
          name: my-application
          owner:
            self: https://<TENANT_DOMAIN>/tenant/tenants/t07007007
            tenant:
              id: t07007007
          self: https://<TENANT_DOMAIN>/application/applications/20200301
          type: HOSTED
      properties:
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        references:
          description: An array containing all subscribed applications.
          items:
            $ref: '#/components/schemas/application'
          type: array
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    UserRoleCollection:
      example:
        prev: https://<TENANT_DOMAIN>/user/roles?pageSize=1&currentPage=1
        self: https://<TENANT_DOMAIN>/user/roles?pageSize=1&currentPage=2
        next: https://<TENANT_DOMAIN>/user/roles?pageSize=1&currentPage=3
        roles:
        - id: ROLE_ALARM_ADMIN
          name: ROLE_ALARM_ADMIN
          self: https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN
        statistics:
          totalPages: 3
          currentPage: 2
          pageSize: 1
      properties:
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        roles:
          description: An array of user roles.
          items:
            $ref: '#/components/schemas/role'
          type: array
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    roleReference:
      example:
        self: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe/roles/ROLE_ALARM_ADMIN"
        role:
          id: ROLE_ALARM_ADMIN
          name: ROLE_ALARM_ADMIN
          self: https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN
      properties:
        role:
          $ref: '#/components/schemas/role'
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    groupReference:
      properties:
        group:
          $ref: '#/components/schemas/group'
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    RoleReferenceCollection:
      example:
        prev: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/roles?pageSize=5&currentPage=1"
        self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/roles?pageSize=5&currentPage=2"
        next: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/roles?pageSize=5&currentPage=3"
        references:
        - self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/roles/ROLE_ALARM_ADMIN"
          role:
            id: ROLE_ALARM_ADMIN
            name: ROLE_ALARM_ADMIN
            self: https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN
        statistics:
          total: 3
          currentPage: 2
          pageSize: 5
      properties:
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        references:
          $ref: '#/components/schemas/roleReference'
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    InventoryRoleCollection:
      example:
        prev: https://<TENANT_DOMAIN>/user/inventoryroles?pageSize=1&currentPage=1
        self: https://<TENANT_DOMAIN>/user/inventoryroles?pageSize=1&currentPage=2
        next: https://<TENANT_DOMAIN>/user/inventoryroles?pageSize=1&currentPage=3
        roles:
        - description: Can restart devices.
          id: 4
          name: "Operations: Restart Device"
          permissions:
          - id: 7
            permission: ADMIN
            scope: OPERATION
            type: c8y_Restart
          self: https://<TENANT_DOMAIN>/user/inventoryroles/4
        statistics:
          totalPages: 3
          currentPage: 2
          pageSize: 1
      properties:
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        roles:
          description: An array of inventory roles.
          items:
            $ref: '#/components/schemas/inventoryRole'
          type: array
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    InventoryAssignmentCollection:
      properties:
        self:
          allOf:
          - $ref: '#/components/schemas/desc_self'
          - example: "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory"
        inventoryAssignments:
          description: An array of inventory assignments.
          items:
            $ref: '#/components/schemas/inventoryAssignment'
          type: array
      type: object
    NewDeviceRequestCollection:
      example:
        prev: https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests?pageSize=1&currentPage=1
        self: https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests?pageSize=1&currentPage=2
        next: https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests?pageSize=1&currentPage=3
        newDeviceRequests:
        - id: "54545454"
          self: https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/54545454
          status: WAITING_FOR_CONNECTION
        statistics:
          total: 3
          currentPage: 2
          pageSize: 1
      properties:
        newDeviceRequests:
          description: An array of new device requests.
          items:
            $ref: '#/components/schemas/newDeviceRequest'
          type: array
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    TenantCollection:
      example:
        self: https://<TENANT_DOMAIN>/tenant/tenants?pageSize=1
        tenants: []
        statistics:
          currentPage: 1
          pageSize: 1
          totalElements: 0
      properties:
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
        tenants:
          description: An array containing the results (subtenants) of the request.
          items:
            $ref: '#/components/schemas/tenant'
          type: array
      type: object
    CurrentTenant:
      example:
        allowCreateTenants: false
        customProperties: {}
        domainName: mytenant.cumulocity.com
        name: t07007007
        self: https://<TENANT_DOMAIN>/currentTenant
        applications:
          references: []
      properties:
        allowCreateTenants:
          default: false
          description: Indicates if this tenant can create subtenants.
          type: boolean
        applications:
          $ref: '#/components/schemas/CurrentTenant_applications'
        customProperties:
          $ref: '#/components/schemas/customProperties'
        domainName:
          description: "URL of the tenant's domain. The domain name permits only the\
            \ use of alphanumeric characters separated by dots `.`, hyphens `-` and\
            \ underscores `_`."
          format: hostname
          maxLength: 256
          minLength: 1
          type: string
        name:
          description: Unique identifier of a Cumulocity IoT tenant.
          example: t07007007
          maxLength: 32
          minLength: 2
          readOnly: true
          title: TenantId
          type: string
        parent:
          description: ID of the parent tenant.
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    UserCollection:
      example:
        self: "https://<TENANT_DOMAIN>/user/{tenantId}/users?pageSize=5&currentPage=1"
        users:
        - self: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe"
          firstName: John
          lastName: Doe
          userName: jdoe
          id: jdoe
          displayName: John Doe
          phone: +1-541-754-3010
          email: johndoe@example.com
          lastPasswordChange: 2020-06-09T09:48:40.008Z
          shouldResetPassword: false
          passwordStrength: GREEN
          enabled: true
        statistics:
          totalPages: 1
          pageSize: 5
          currentPage: 1
      properties:
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
        users:
          description: An array of users.
          items:
            $ref: '#/components/schemas/user'
          type: array
      type: object
    UserReferenceCollection:
      example:
        self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users?pageSize=5&currentPage=1"
        references:
        - self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users/jdoe"
          user:
            self: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe"
            firstName: John
            lastName: Doe
            userName: jdoe
            id: jdoe
            displayName: John Doe
            phone: +1-541-754-3010
            email: johndoe@example.com
            newsletter: true
            lastPasswordChange: 2020-06-09T09:48:40.008Z
            shouldResetPassword: false
            passwordStrength: GREEN
            enabled: true
        statistics:
          totalPages: 1
          pageSize: 5
          currentPage: 1
      properties:
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        references:
          description: An array of user references.
          items:
            $ref: '#/components/schemas/userReference'
          type: array
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    userReference:
      example:
        self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users/jdoe"
        user:
          self: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe"
          firstName: John
          lastName: Doe
          userName: jdoe
          id: jdoe
          displayName: John Doe
          phone: +1-541-754-3010
          email: johndoe@example.com
          newsletter: true
          lastPasswordChange: 2020-06-09T09:48:40.008Z
          shouldResetPassword: false
          passwordStrength: GREEN
          enabled: true
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        user:
          $ref: '#/components/schemas/user'
      type: object
    BulkOperationCollection:
      example:
        self: https://<TENANT_DOMAIN>/devicecontrol/bulkoperations?pageSize=5&currentPage=1
        bulkOperations:
        - self: https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/1237
          id: "1237"
          groupId: "12359"
          startDate: 2022-05-01T22:21:22
          creationRamp: 15
          operationPrototype:
            description: Restart device
            c8y_Restart: {}
          status: IN_PROGRESS
        statistics:
          totalPages: 1
          pageSize: 5
          currentPage: 1
      properties:
        bulkOperations:
          description: An array of bulk operations.
          items:
            $ref: '#/components/schemas/bulkOperation'
          type: array
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    PlatformApiResource:
      properties:
        self:
          allOf:
          - $ref: '#/components/schemas/desc_self'
          - example: https://<TENANT_DOMAIN>/platform
        alarm:
          $ref: '#/components/schemas/alarmsApiResource'
        audit:
          $ref: '#/components/schemas/auditApiResource'
        deviceControl:
          $ref: '#/components/schemas/deviceControlApiResource'
        event:
          $ref: '#/components/schemas/eventsApiResource'
        identity:
          $ref: '#/components/schemas/identityApiResource'
        inventory:
          $ref: '#/components/schemas/inventoryApiResource'
        measurement:
          $ref: '#/components/schemas/measurementApiResource'
        tenant:
          $ref: '#/components/schemas/tenantApiResource'
        user:
          $ref: '#/components/schemas/userApiResource'
      type: object
    EventCollection:
      example:
        self: https://<TENANT_DOMAIN>/event/events?pageSize=5&currentPage=1
        events:
        - creationTime: 2020-03-19T12:16:31.586Z
          lastUpdated: 2020-03-20T13:46:11.526Z
          id: "20200301"
          self: https://<TENANT_DOMAIN>/event/events/20200301
          source:
            id: "251982"
            self: https://<TENANT_DOMAIN>/inventory/managedObjects/251982
          text: Location update.
          time: 2020-03-19T00:00:00.000Z
          type: c8y_LocationUpdate
        statistics:
          totalPages: 1
          pageSize: 5
          currentPage: 1
      properties:
        events:
          description: An array containing the results (events) of the request.
          items:
            $ref: '#/components/schemas/event'
          type: array
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    UserGroupCollection:
      properties:
        self:
          allOf:
          - $ref: '#/components/schemas/desc_self'
          - example: "https://<TENANT_DOMAIN>/user/{tenantId}/groups?pageSize=5&currentPage=2"
        groups:
          description: An array of user groups.
          items:
            $ref: '#/components/schemas/group'
          type: array
        prev:
          allOf:
          - $ref: '#/components/schemas/desc_prevPage'
          - example: "https://<TENANT_DOMAIN>/user/{tenantId}/groups?pageSize=5&currentPage=1"
        next:
          allOf:
          - $ref: '#/components/schemas/desc_nextPage'
          - example: "https://<TENANT_DOMAIN>/user/{tenantId}/groups?pageSize=5&currentPage=3"
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    GroupReferenceCollection:
      properties:
        self:
          allOf:
          - $ref: '#/components/schemas/desc_self'
          - example: "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/groups?pageSize=5&currentPage=2"
        references:
          description: An array of group references.
          items:
            $ref: '#/components/schemas/groupReference'
          type: array
        prev:
          allOf:
          - $ref: '#/components/schemas/desc_prevPage'
          - example: "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/groups?pageSize=5&currentPage=1"
        next:
          allOf:
          - $ref: '#/components/schemas/desc_nextPage'
          - example: "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/groups?pageSize=5&currentPage=3"
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    RetentionRuleCollection:
      example:
        prev: https://<TENANT_DOMAIN>/retention/retentions?pageSize=1&currentPage=1
        self: https://<TENANT_DOMAIN>/retention/retentions?pageSize=1&currentPage=2
        next: https://<TENANT_DOMAIN>/retention/retentions?pageSize=1&currentPage=3
        retentionRules:
        - dataType: ALARM
          editable: true
          fragmentType: '*'
          id: "1569"
          maximumAge: 20
          self: https://<TENANT_DOMAIN>/retention/retentions/1569
          source: '*'
          type: '*'
        statistics:
          totalPages: 3
          pageSize: 1
          currentPage: 2
      properties:
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        retentionRules:
          description: An array containing the results (retention rules) of the request.
          items:
            $ref: '#/components/schemas/retentionRule'
          type: array
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    BinaryCollection:
      example:
        self: https://<TENANT_DOMAIN>/inventory/binaries?pageSize=5&currentPage=1
        managedObjects:
        - c8y_IsBinary: {}
          contentType: text/plain
          id: "123153092"
          lastUpdated: 2020-10-15T22:15:17.267Z
          length: 365
          name: HelloWorld
          owner: manga
          self: https://<TENANT_DOMAIN>/inventory/binaries/123153092
          type: text/plain
        statistics:
          totalPages: 1
          pageSize: 5
          currentPage: 1
      properties:
        managedObjects:
          description: An array containing the results (managed objects) of the request.
          items:
            $ref: '#/components/schemas/binary'
          type: array
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    ManagedObjectCollection:
      example:
        self: https://<TENANT_DOMAIN>/inventory/managedObjects?pageSize=5&currentPage=1
        managedObjects:
        - creationTime: 2017-12-12T22:09:06.881+01:00
          id: "51994"
          lastUpdated: 2018-07-19T12:01:50.731Z
          name: My tracking device
          owner: manga
          self: https://<TENANT_DOMAIN>/inventory/managedObjects/51994
          c8y_IsDevice: {}
        statistics:
          totalPages: 1
          pageSize: 5
          currentPage: 1
      properties:
        managedObjects:
          description: An array containing the results (managed objects) of the request.
          items:
            $ref: '#/components/schemas/managedObject'
          type: array
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    ManagedObjectReferenceCollection:
      properties:
        prev:
          allOf:
          - $ref: '#/components/schemas/desc_prevPage'
          - example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions?pageSize=5&currentPage=1"
        self:
          allOf:
          - $ref: '#/components/schemas/desc_self'
          - example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions?pageSize=5&currentPage=2"
        next:
          allOf:
          - $ref: '#/components/schemas/desc_nextPage'
          - example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions?pageSize=5&currentPage=3"
        references:
          description: An array containing the details of all children (if any).
          items:
            $ref: '#/components/schemas/ManagedObjectReferenceCollection_references_inner'
          minItems: 0
          type: array
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    ManagedObjectReference:
      properties:
        managedObject:
          $ref: '#/components/schemas/managedObject'
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    OperationCollection:
      example:
        self: https://<TENANT_DOMAIN>/devicecontrol/operations?pageSize=5&currentPage=1
        operations:
        - self: https://<TENANT_DOMAIN>/devicecontrol/operation/1234
          id: "1234"
          creationTime: 2021-09-06T12:03:27.927+02:0
          deviceId: "4398"
          deviceExternalIDs: {}
          status: FAILED
          failureReason: Could not handle the operation
        statistics:
          totalPages: 1
          pageSize: 5
          currentPage: 1
      properties:
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        operations:
          description: An array of operations.
          items:
            $ref: '#/components/schemas/operation'
          type: array
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    ApplicationCollection:
      example:
        prev: https://<TENANT_DOMAIN>/application/applications?pageSize=1&currentPage=1
        self: https://<TENANT_DOMAIN>/application/applications?pageSize=1&currentPage=2
        next: https://<TENANT_DOMAIN>/application/applications?pageSize=1&currentPage=3
        applications:
        - availability: PRIVATE
          contextPath: myapplication
          id: "20200301"
          key: my-application-key
          name: my-application
          owner:
            self: https://<TENANT_DOMAIN>/tenant/tenants/t07007007
            tenant:
              id: t07007007
          self: https://<TENANT_DOMAIN>/application/applications/20200301
          type: HOSTED
        statistics:
          totalPages: 10
          pageSize: 1
          currentPage: 2
      properties:
        applications:
          description: An array of applications.
          items:
            $ref: '#/components/schemas/application'
          type: array
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    ApplicationVersionCollection:
      example:
        versions:
        - version: "1.0"
          binaryId: "8276135"
          tag:
          - tag-1
          - latest
      properties:
        versions:
          description: An array of application versions.
          items:
            $ref: '#/components/schemas/ApplicationVersion'
          type: array
      type: object
    ApplicationVersion:
      example:
        version: "1.0"
        binaryId: "315165"
        tag:
        - tag-1
        - latest
      properties:
        version:
          description: Unique identifier of the version.
          type: string
        binaryId:
          description: Unique identifier of the binary file assigned to the version.
          type: string
        tag:
          description: Tag assigned to the version. Version tags must be unique across
            all versions and version fields of application versions.
          items:
            type: string
          type: array
      type: object
    ApplicationVersionTag:
      example:
        tag:
        - tag-1
        - latest
      properties:
        tag:
          description: Tag assigned to the version. Version tags must be unique across
            all versions and version fields of application versions.
          example:
          - tag-1
          - latest
          items:
            type: string
          type: array
      required:
      - tag
      type: object
    SupportedMeasurements:
      example:
        c8y_SupportedMeasurements:
        - c8y_MemoryMeasurement
        - c8y_CPUMeasurement
      properties:
        c8y_SupportedMeasurements:
          description: An array containing all supported measurements of the specified
            managed object.
          example:
          - c8y_MemoryMeasurement
          - c8y_CPUMeasurement
          items:
            type: string
          type: array
      type: object
    SupportedSeries:
      example:
        c8y_SupportedSeries:
        - c8y_MemoryMeasurement.Total
        - c8y_CPUMeasurement.Workload
        - c8y_MemoryMeasurement.Used
      properties:
        c8y_SupportedSeries:
          description: An array containing all supported measurement series of the
            specified device.
          example:
          - c8y_MemoryMeasurement.Total
          - c8y_CPUMeasurement.Workload
          - c8y_MemoryMeasurement.Used
          items:
            type: string
          type: array
      type: object
    ManagedObjectUser:
      example:
        self: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user"
        userName: manga
        enabled: true
      properties:
        enabled:
          description: Specifies if the device's owner is enabled or not.
          type: boolean
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        userName:
          description: The username of the device's owner.
          minLength: 1
          readOnly: true
          type: string
      type: object
    MeasurementSeries:
      example:
        series:
        - unit: m/s2
          name: acceleration
          type: c8y_AccelerationMeasurement
        values:
          "2020-12-04T17:33:01.538+01:00":
          - min: 13.37
            max: 13.37
        truncated: false
      properties:
        values:
          description: "Each property contained here is a date taken from the measurement\
            \ and it contains an array of objects specifying `min` and `max` pair\
            \ of values. Each pair corresponds to a single series object in the `series`\
            \ array. If there is no aggregation used, `min` is equal to `max` in every\
            \ pair."
          example:
            "2020-12-04T17:33:01.538+01:00":
            - min: 13.37
              max: 13.37
          type: object
        series:
          description: An array containing the type of series and units.
          example:
          - unit: m/s2
            name: acceleration
            type: c8y_AccelerationMeasurement
          items:
            $ref: '#/components/schemas/measurementFragmentSeries'
          type: array
        truncated:
          description: "If there were more than 5000 values, the final result was\
            \ truncated."
          example: false
          type: boolean
      type: object
    measurementFragmentSeries:
      properties:
        unit:
          description: The unit of the measurement.
          type: string
        name:
          description: The name of the measurement.
          type: string
        type:
          description: The type of measurement.
          type: string
      type: object
    AlarmCollection:
      example:
        prev: https://<TENANT_DOMAIN>/alarm/alarms?pageSize=1&currentPage=1
        self: https://<TENANT_DOMAIN>/alarm/alarms?pageSize=1&currentPage=2
        next: https://<TENANT_DOMAIN>/alarm/alarms?pageSize=1&currentPage=3
        alarms:
        - count: 1
          creationTime: 2020-03-19T12:16:31.586Z
          lastUpdated: 2020-03-20T13:41:39.678Z
          id: "20200301"
          self: https://<TENANT_DOMAIN>/alarm/alarms/20200301
          severity: MAJOR
          source:
            id: "251982"
            name: My tracking device
            self: https://<TENANT_DOMAIN>/inventory/managedObjects/251982
          status: ACTIVE
          text: No data received from the device within the required interval.
          time: 2020-03-19T00:00:00.000Z
          type: c8y_UnavailabilityAlarm
        statistics:
          totalPages: 10
          pageSize: 1
          currentPage: 2
      properties:
        alarms:
          description: An array containing the results (alarms) of the request.
          items:
            $ref: '#/components/schemas/alarm'
          type: array
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    ApplicationApiResource:
      example:
        applications: https://<TENANT_DOMAIN>/application/applications
        applicationById: "https://<TENANT_DOMAIN>/application/applications/{id}"
        applicationsByName: "https://<TENANT_DOMAIN>/application/applicationsByName/{name}"
        applicationsByTenant: "https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}"
        applicationsByOwner: "https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}"
        applicationsByUser: "https://<TENANT_DOMAIN>/application/applicationsByUser/{username}"
        self: https://<TENANT_DOMAIN>/application
      properties:
        applications:
          description: Collection of all applications..
          type: string
        applicationById:
          description: A reference to a resource of type Application.
          type: string
        applicationsByName:
          description: Read-only collection of all applications with a particular
            name.
          type: string
        applicationsByTenant:
          description: Read-only collection of all applications subscribed by a particular
            tenant.
          type: string
        applicationsByOwner:
          description: Read-only collection of all applications owned by a particular
            tenant.
          type: string
        applicationsByUser:
          description: Read-only collection of all applications owned by a particular
            user.
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    ApplicationBinaries:
      properties:
        attachments:
          description: An array of attachments.
          items:
            $ref: '#/components/schemas/ApplicationBinaries_attachments_inner'
          type: array
      type: object
    ApplicationUserCollection:
      properties:
        users:
          description: A list of users who are subscribed to the current application.
          items:
            $ref: '#/components/schemas/ApplicationUserCollection_users_inner'
          type: array
      type: object
    MeasurementCollection:
      example:
        prev: https://<TENANT_DOMAIN>/measurement/measurements?pageSize=1&currentPage=1
        self: https://<TENANT_DOMAIN>/measurement/measurements?pageSize=1&currentPage=2
        next: https://<TENANT_DOMAIN>/measurement/measurements?pageSize=1&currentPage=3
        measurements:
        - id: "20200301"
          self: https://<TENANT_DOMAIN>/measurement/measurements/20200301
          source:
            id: "251982"
            self: https://<TENANT_DOMAIN>/inventory/managedObjects/251982
          time: 2020-03-19T12:03:27.845Z
          type: c8y_TemperatureMeasurement
          c8y_Steam:
            Temperature:
              unit: C
              value: 100
        statistics:
          totalPages: 10
          pageSize: 1
          currentPage: 2
      properties:
        measurements:
          description: An array containing the measurements of the request.
          items:
            $ref: '#/components/schemas/measurement'
          type: array
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/MeasurementCollection_statistics'
      required:
      - measurements
      type: object
    BootstrapUser:
      properties:
        name:
          description: The bootstrap user tenant username.
          example: servicebootstrap_thermo-micro
          type: string
        password:
          description: The bootstrap user tenant password.
          example: 9IK31Y4zqnmgQqEC1JmMI1E95Cc7yi6j
          format: password
          type: string
        tenant:
          description: The bootstrap user tenant ID.
          example: t07007007
          type: string
      type: object
    SubscribedApplicationReference:
      properties:
        application:
          $ref: '#/components/schemas/SubscribedApplicationReference_application'
      required:
      - application
      type: object
    ApplicationReference:
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        application:
          $ref: '#/components/schemas/application'
      type: object
    SubscribedRole:
      properties:
        role:
          $ref: '#/components/schemas/SubscribedRole_role'
      type: object
    SubscribedUser:
      properties:
        user:
          $ref: '#/components/schemas/SubscribedUser_user'
      type: object
    TenantUsageStatisticsCollection:
      example:
        prev: https://<TENANT_DOMAIN>/tenant/statistics?pageSize=1&currentPage=1
        self: https://<TENANT_DOMAIN>/tenant/statistics?pageSize=1&currentPage=2
        next: https://<TENANT_DOMAIN>/tenant/statistics?pageSize=1&currentPage=3
        usageStatistics:
        - alarmsCreatedCount: 0
          alarmsUpdatedCount: 0
          day: 2020-01-21T00:00:00.000Z
          deviceCount: 1
          deviceEndpointCount: 1
          deviceRequestCount: 1
          deviceWithChildrenCount: 1
          eventsCreatedCount: 0
          eventsUpdatedCount: 0
          inventoriesCreatedCount: 2
          inventoriesUpdatedCount: 0
          measurementsCreatedCount: 0
          requestCount: 127
          resources:
            cpu: 0
            memory: 0
            usedBy: []
          self: http://<TENANT_DOMAIN>/tenant/statistics/5563820_20210121
          storageSize: 39339
          subscribedApplications:
          - report-agent
          - devicemanagement
          - administration
          - device-simulator
          totalResourceCreateAndUpdateCount: 2
        statistics:
          totalPages: 10
          pageSize: 1
          currentPage: 2
      properties:
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
        usageStatistics:
          description: An array containing the tenant usage statistics.
          items:
            $ref: '#/components/schemas/DailyUsageStatistics'
          type: array
      type: object
    DailyUsageStatistics:
      description: Daily usage statistics.
      example:
        alarmsCreatedCount: 0
        alarmsUpdatedCount: 0
        day: 2020-01-21T00:00:00.000Z
        deviceCount: 1
        deviceEndpointCount: 1
        deviceRequestCount: 1
        deviceWithChildrenCount: 1
        eventsCreatedCount: 0
        eventsUpdatedCount: 0
        inventoriesCreatedCount: 2
        inventoriesUpdatedCount: 0
        measurementsCreatedCount: 0
        requestCount: 127
        resources:
          cpu: 0
          memory: 0
          usedBy: []
        self: http://<TENANT_DOMAIN>/tenant/statistics/5563820_20210121
        storageSize: 39339
        subscribedApplications:
        - report-agent
        - devicemanagement
        - administration
        - device-simulator
        totalResourceCreateAndUpdateCount: 2
      properties:
        alarmsCreatedCount:
          description: Number of created alarms.
          minimum: 0
          type: integer
        alarmsUpdatedCount:
          description: Number of updates made to the alarms.
          minimum: 0
          type: integer
        day:
          description: Date of this usage statistics object.
          format: date-time
          type: string
        deviceCount:
          description: "Number of devices in the tenant identified by the fragment\
            \ `c8y_IsDevice`. Updated only three times a day starting at 8:57, 16:57\
            \ and 23:57."
          minimum: 0
          type: integer
        deviceEndpointCount:
          description: "Number of devices which do not have child devices. Updated\
            \ only three times a day starting at 8:57, 16:57 and 23:57."
          minimum: 0
          type: integer
        deviceRequestCount:
          description: |
            Number of requests that were issued only by devices against the tenant. Updated every 5 minutes. The following requests are not included:

            * Requests made to <kbd>/user</kbd>, <kbd>/tenant</kbd> and <kbd>/application</kbd> APIs
            * Application related requests (with `X-Cumulocity-Application-Key` header)
          minimum: 0
          type: integer
        deviceWithChildrenCount:
          description: "Number of devices with children. Updated only three times\
            \ a day starting at 8:57, 16:57 and 23:57."
          minimum: 0
          type: integer
        eventsCreatedCount:
          description: Number of created events.
          minimum: 0
          type: integer
        eventsUpdatedCount:
          description: Number of updates made to the events.
          minimum: 0
          type: integer
        inventoriesCreatedCount:
          description: Number of created managed objects.
          minimum: 0
          type: integer
        inventoriesUpdatedCount:
          description: Number of updates made to the managed objects.
          minimum: 0
          type: integer
        measurementsCreatedCount:
          description: |
            Number of created measurements.

            > **&#9432; Info:** Bulk creation of measurements is handled in a way that each measurement is counted individually.
          minimum: 0
          type: integer
        requestCount:
          description: |
            Number of requests that were made against the tenant. Updated every 5 minutes. The following requests are not included:

            *  Internal SmartREST requests used to resolve templates
            *  Internal SLA monitoring requests
            *  Calls to any <kbd>/health</kbd> endpoint
            *  Device bootstrap process requests related to configuring and retrieving device credentials
            *  Microservice SDK internal calls for applications and subscriptions
          minimum: 0
          type: integer
        resources:
          $ref: '#/components/schemas/UsageStatisticsResources'
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        storageSize:
          description: "Database storage in use, specified in bytes. It is affected\
            \ by your retention rules and by the regularly running database optimization\
            \ functions in Cumulocity IoT. If the size decreases, it does not necessarily\
            \ mean that data was deleted. Updated only three times a day starting\
            \ at 8:57, 16:57 and 23:57."
          minimum: 0
          type: integer
        subscribedApplications:
          description: "Names of the tenant subscribed applications. Updated only\
            \ three times a day starting at 8:57, 16:57 and 23:57."
          items:
            type: string
          type: array
        totalResourceCreateAndUpdateCount:
          description: Sum of all inbound transfers.
          minimum: 0
          type: integer
      type: object
    SummaryTenantUsageStatistics:
      description: Summary of the usage statistics.
      properties:
        alarmsCreatedCount:
          description: Number of created alarms.
          example: 0
          minimum: 0
          type: integer
        alarmsUpdatedCount:
          description: Number of updates made to the alarms.
          example: 0
          minimum: 0
          type: integer
        day:
          description: Date of this usage statistics summary.
          example: 2021-09-09T00:00:00Z
          format: date-time
          type: string
        deviceCount:
          description: "Number of devices in the tenant identified by the fragment\
            \ `c8y_IsDevice`. Updated only three times a day starting at 8:57, 16:57\
            \ and 23:57."
          example: 5
          minimum: 0
          type: integer
        deviceEndpointCount:
          description: "Number of devices which do not have child devices. Updated\
            \ only three times a day starting at 8:57, 16:57 and 23:57."
          example: 4
          minimum: 0
          type: integer
        deviceRequestCount:
          description: |
            Number of requests that were issued only by devices against the tenant. Updated every 5 minutes. The following requests are not included:

            * Requests made to <kbd>/user</kbd>, <kbd>/tenant</kbd> and <kbd>/application</kbd> APIs
            * Application related requests (with `X-Cumulocity-Application-Key` header)
          example: 546
          minimum: 0
          type: integer
        deviceWithChildrenCount:
          description: "Number of devices with children. Updated only three times\
            \ a day starting at 8:57, 16:57 and 23:57."
          example: 5
          minimum: 0
          type: integer
        eventsCreatedCount:
          description: Number of created events.
          example: 0
          minimum: 0
          type: integer
        eventsUpdatedCount:
          description: Number of updates made to the events.
          example: 0
          minimum: 0
          type: integer
        inventoriesCreatedCount:
          description: Number of created managed objects.
          example: 6
          minimum: 0
          type: integer
        inventoriesUpdatedCount:
          description: Number of updates made to the managed objects.
          example: 4
          minimum: 0
          type: integer
        measurementsCreatedCount:
          description: |
            Number of created measurements.

            > **&#9432; Info:** Bulk creation of measurements is handled in a way that each measurement is counted individually.
          example: 1
          minimum: 0
          type: integer
        requestCount:
          description: |
            Number of requests that were made against the tenant. Updated every 5 minutes. The following requests are not included:

            *  Internal SmartREST requests used to resolve templates
            *  Internal SLA monitoring requests
            *  Calls to any <kbd>/health</kbd> endpoint
            *  Device bootstrap process requests related to configuring and retrieving device credentials
            *  Microservice SDK internal calls for applications and subscriptions
          example: 2355
          minimum: 0
          type: integer
        resources:
          $ref: '#/components/schemas/UsageStatisticsResources'
        storageSize:
          description: "Database storage in use, specified in bytes. It is affected\
            \ by your retention rules and by the regularly running database optimization\
            \ functions in Cumulocity IoT. If the size decreases, it does not necessarily\
            \ mean that data was deleted. Updated only three times a day starting\
            \ at 8:57, 16:57 and 23:57."
          example: 34231
          minimum: 0
          type: integer
        subscribedApplications:
          description: "Names of the tenant subscribed applications. Updated only\
            \ three times a day starting at 8:57, 16:57 and 23:57."
          example:
          - report-agent
          - devicemanagement
          - administration
          - device-simulator
          items:
            type: string
          type: array
        totalResourceCreateAndUpdateCount:
          description: Sum of all inbound transfers.
          example: 11
          minimum: 0
          type: integer
      type: object
    SummaryAllTenantsUsageStatisticsCollection:
      description: Collection of all tenants usage statistics summaries.
      items:
        $ref: '#/components/schemas/SummaryAllTenantsUsageStatistics'
      type: array
    SummaryAllTenantsUsageStatistics:
      example:
        creationTime: 2020-11-26T12:38:51.443Z
        deviceEndpointCount: 4
        peakStorageSize: 43084
        deviceWithChildrenCount: 5
        inventoriesUpdatedCount: 4
        eventsUpdatedCount: 0
        requestCount: 2355
        parentTenantId: management
        tenantCustomProperties:
          language: en
          userOrigin: BASIC
        deviceCount: 5
        peakDeviceWithChildrenCount: 5
        deviceRequestCount: 546
        resources:
          cpu: 0
          memory: 0
          usedBy: []
        tenantDomain: mytenant.cumulocity.com
        eventsCreatedCount: 0
        tenantCompany: ACME AG
        subscribedApplications:
        - report-agent
        - devicemanagement
        - administration
        - device-simulator
        alarmsCreatedCount: 0
        externalReference: ""
        peakDeviceCount: 5
        alarmsUpdatedCount: 0
        inventoriesCreatedCount: 6
        measurementsCreatedCount: 1
        storageSize: 34231
        tenantId: t07007007
        totalResourceCreateAndUpdateCount: 11
      properties:
        alarmsCreatedCount:
          description: Number of created alarms.
          example: 0
          minimum: 0
          type: integer
        alarmsUpdatedCount:
          description: Number of updates made to the alarms.
          example: 0
          minimum: 0
          type: integer
        creationTime:
          description: Date and time of the tenant's creation.
          example: 2020-11-26T12:38:51.443Z
          format: date-time
          type: string
        deviceCount:
          description: "Number of devices in the tenant identified by the fragment\
            \ `c8y_IsDevice`. Updated only three times a day starting at 8:57, 16:57\
            \ and 23:57."
          example: 5
          minimum: 0
          type: integer
        deviceEndpointCount:
          description: "Number of devices which do not have child devices. Updated\
            \ only three times a day starting at 8:57, 16:57 and 23:57."
          example: 4
          minimum: 0
          type: integer
        deviceRequestCount:
          description: |
            Number of requests that were issued only by devices against the tenant. Updated every 5 minutes. The following requests are not included:

            * Requests made to <kbd>/user</kbd>, <kbd>/tenant</kbd> and <kbd>/application</kbd> APIs
            * Application related requests (with `X-Cumulocity-Application-Key` header)
          example: 546
          minimum: 0
          type: integer
        deviceWithChildrenCount:
          description: "Number of devices with children. Updated only three times\
            \ a day starting at 8:57, 16:57 and 23:57."
          example: 5
          minimum: 0
          type: integer
        externalReference:
          description: Tenant external reference.
          example: ""
          type: string
        eventsCreatedCount:
          description: Number of created events.
          example: 0
          minimum: 0
          type: integer
        eventsUpdatedCount:
          description: Number of updates made to the events.
          example: 0
          minimum: 0
          type: integer
        inventoriesCreatedCount:
          description: Number of created managed objects.
          example: 6
          minimum: 0
          type: integer
        inventoriesUpdatedCount:
          description: Number of updates made to the managed objects.
          example: 4
          minimum: 0
          type: integer
        measurementsCreatedCount:
          description: |
            Number of created measurements.

            > **&#9432; Info:** Bulk creation of measurements is handled in a way that each measurement is counted individually.
          example: 1
          minimum: 0
          type: integer
        parentTenantId:
          description: ID of the parent tenant.
          example: management
          readOnly: true
          type: string
        peakDeviceCount:
          description: Peak value of `deviceCount` calculated for the requested time
            period of the summary.
          example: 5
          type: integer
        peakDeviceWithChildrenCount:
          description: Peak value of `deviceWithChildrenCount` calculated for the
            requested time period of the summary.
          example: 5
          type: integer
        peakStorageSize:
          description: "Peak value of used storage size in bytes, calculated for the\
            \ requested time period of the summary."
          example: 43084
          type: integer
        requestCount:
          description: |
            Number of requests that were made against the tenant. Updated every 5 minutes. The following requests are not included:

            *  Internal SmartREST requests used to resolve templates
            *  Internal SLA monitoring requests
            *  Calls to any <kbd>/health</kbd> endpoint
            *  Device bootstrap process requests related to configuring and retrieving device credentials
            *  Microservice SDK internal calls for applications and subscriptions
          example: 2355
          minimum: 0
          type: integer
        resources:
          $ref: '#/components/schemas/UsageStatisticsResources'
        storageSize:
          description: "Database storage in use, specified in bytes. It is affected\
            \ by your retention rules and by the regularly running database optimization\
            \ functions in Cumulocity IoT. If the size decreases, it does not necessarily\
            \ mean that data was deleted. Updated only three times a day starting\
            \ at 8:57, 16:57 and 23:57."
          example: 34231
          minimum: 0
          type: integer
        subscribedApplications:
          description: "Names of the tenant subscribed applications. Updated only\
            \ three times a day starting at 8:57, 16:57 and 23:57."
          example:
          - report-agent
          - devicemanagement
          - administration
          - device-simulator
          items:
            type: string
          type: array
        tenantCompany:
          description: The tenant's company name.
          example: ACME AG
          maxLength: 256
          minLength: 1
          type: string
        tenantCustomProperties:
          $ref: '#/components/schemas/customProperties'
        tenantDomain:
          description: "URL of the tenant's domain. The domain name permits only the\
            \ use of alphanumeric characters separated by dots `.`, hyphens `-` and\
            \ underscores `_`."
          example: mytenant.cumulocity.com
          format: hostname
          maxLength: 256
          minLength: 1
          type: string
        tenantId:
          description: Unique identifier of a Cumulocity IoT tenant.
          example: t07007007
          maxLength: 32
          minLength: 2
          readOnly: true
          title: TenantId
          type: string
        totalResourceCreateAndUpdateCount:
          description: Sum of all inbound transfers.
          example: 11
          minimum: 0
          type: integer
      type: object
    UsageStatisticsResources:
      description: Resources usage for each subscribed microservice application.
      example:
        cpu: 0
        memory: 0
        usedBy: []
      properties:
        cpu:
          description: "Total number of CPU usage for tenant microservices, specified\
            \ in CPU milliseconds (1000m = 1 CPU)."
          minimum: 0
          type: integer
        memory:
          description: "Total number of memory usage for tenant microservices, specified\
            \ in MB."
          minimum: 0
          type: integer
        usedBy:
          description: Collection of resources usage for each microservice.
          items:
            $ref: '#/components/schemas/UsageStatisticsResourcesUsedBy'
          type: array
      type: object
    UsageStatisticsResourcesUsedBy:
      properties:
        cause:
          description: Reason for calculating statistics of the specified microservice.
          minLength: 1
          type: string
        cpu:
          description: Number of CPU usage for a single microservice.
          minimum: 0
          type: integer
        memory:
          description: Number of memory usage for a single microservice.
          minimum: 0
          type: integer
        name:
          description: Name of the microservice.
          minLength: 1
          type: string
      type: object
    DeviceStatistics:
      description: Statistics of a specific device (identified by an ID).
      example:
        deviceType: deviceType
        count: 0
        deviceParents:
        - deviceParents
        - deviceParents
        deviceId: deviceId
      properties:
        count:
          description: "Sum of measurements, events and alarms created and updated\
            \ for the specified device."
          minimum: 0
          type: integer
        deviceId:
          description: Unique identifier of the device.
          minLength: 1
          type: string
        deviceParents:
          description: List of unique identifiers of parents for the corresponding
            device. Available only with monthly data.
          items:
            description: Unique identifier of a parent.
            type: string
          nullable: true
          type: array
        deviceType:
          description: Value of the `type` field from the corresponding device. Available
            only with monthly data.
          type: string
      type: object
    DeviceStatisticsCollection:
      description: Statistics of the tenant devices.
      example:
        next: next
        prev: prev
        self: https://openapi-generator.tech
        statistics:
        - deviceType: deviceType
          count: 0
          deviceParents:
          - deviceParents
          - deviceParents
          deviceId: deviceId
        - deviceType: deviceType
          count: 0
          deviceParents:
          - deviceParents
          - deviceParents
          deviceId: deviceId
      properties:
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          description: An array containing the tenant device statistics.
          items:
            $ref: '#/components/schemas/DeviceStatistics'
          type: array
      type: object
    TenantUsageStatisticsFileCollection:
      description: Statistics files metadata.
      example:
        prev: https://<TENANT_DOMAIN>/tenant/statistics/files?pageSize=1&currentPage=1
        self: https://<TENANT_DOMAIN>/tenant/statistics/files?pageSize=1&currentPage=2
        next: https://<TENANT_DOMAIN>/tenant/statistics/files?pageSize=1&currentPage=3
        statistics:
          pageSize: 1
          currentPage: 2
          totalPages: 3
        statisticsFiles:
        - id: "62"
          instanceName: cumulocity.default.svc.cluster.local
          generationDate: 2021-10-14T11:43:27.203Z
          dateFrom: 2020-03-01T00:00:00.000Z
          dateTo: 2020-03-20T00:00:00.000Z
          type: REAL
      properties:
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
        statisticsFiles:
          description: An array containing the usage statistics files metadata.
          items:
            $ref: '#/components/schemas/StatisticsFile'
          type: array
      type: object
    StatisticsFile:
      description: Statistics file metadata.
      example:
        id: "62"
        instanceName: cumulocity.default.svc.cluster.local
        generationDate: 2021-10-14T11:43:27.203Z
        dateFrom: 2020-03-01T00:00:00.000Z
        dateTo: 2020-03-20T00:00:00.000Z
        type: REAL
      properties:
        id:
          description: Unique identifier of the file.
          type: string
        instanceName:
          description: Domain name where the statistics file come from.
          type: string
        generationDate:
          description: File generation date.
          format: date-time
          type: string
        dateFrom:
          description: Start date or date and time of the statistics attached in the
            file.
          format: date-time
          type: string
        dateTo:
          description: End date or date and time of the statistics attached in the
            file.
          format: date-time
          type: string
        type:
          description: |
            The type of statistics:
            * REAL - generated by the system on the first day of the month and including statistics from the previous month.
            * TEST - generated by the user with a time range specified in the query parameters (`dateFrom`, `dateTo`).
          enum:
          - REAL
          - TEST
          type: string
      type: object
    rangeStatisticsFile:
      properties:
        dateFrom:
          description: Statistics generation start date.
          example: 2020-03-01T00:00:00Z
          format: date-time
          type: string
        dateTo:
          description: Statistics generation end date.
          example: 2020-03-19T00:00:00Z
          format: date-time
          type: string
      required:
      - dateFrom
      - dateTo
      type: object
    LoginOptionCollection:
      description: All available login options of the tenant.
      properties:
        loginOptions:
          description: An array containing the available login options.
          items:
            $ref: '#/components/schemas/LoginOption'
          type: array
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    OptionCollection:
      description: All available options of the tenant.
      example:
        self: https://<TENANT_DOMAIN>/tenant/options?pageSize=5&currentPage=2
        options:
        - self: https://<TENANT_DOMAIN>/tenant/options/password/limit.validity
          category: password
          key: limit.validity
          value": "0"
        - self: https://<TENANT_DOMAIN>/tenant/options/password/strength.validity
          category: password
          key: strength.validity
          value": "false"
        statistics:
          totalPages: 1
          currentPage: 1
          pageSize: 5
      properties:
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
        options:
          description: An array containing the available options.
          items:
            $ref: '#/components/schemas/option'
          type: array
      type: object
    CategoryOptions:
      additionalProperties:
        description: "It is possible to specify an arbitrary number of existing options\
          \ as a list of key-value pairs, for example, `\"key1\": \"value1\"`, `\"\
          key2\": \"value2\"`."
        x-additionalPropertiesName: keyValuePairs
      example:
        temp_too_high: "120"
        temp_too_low": "0"
      type: object
    CategoryKeyOption:
      example:
        value: CRITICAL|temperature too high
      properties:
        value:
          description: The value of this option.
          example: CRITICAL|temperature too high
          type: string
      type: object
    LoginOption:
      description: Login option properties.
      properties:
        authenticationRestrictions:
          $ref: '#/components/schemas/BasicAuthenticationRestrictions'
        enforceStrength:
          description: Indicates if password strength is enforced.
          type: boolean
        grantType:
          description: The grant type of the OAuth configuration.
          enum:
          - PASSWORD
          - AUTHORIZATION_CODE
          type: string
        greenMinLength:
          description: Minimum length for the password when the strength validation
            is enforced.
          type: integer
        id:
          description: Unique identifier of this login option.
          type: string
        initRequest:
          description: A URL linking to the token generating endpoint.
          type: string
        loginRedirectDomain:
          description: The tenant domain.
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        sessionConfiguration:
          $ref: '#/components/schemas/OAuthSessionConfiguration'
        strengthValidity:
          description: Enforce password strength validation on subtenant level. `enforceStrength`
            enforces it on all tenants in the platform.
          type: boolean
        tfaStrategy:
          description: "Two-factor authentication being used by this login option.\
            \ TFA supported: SMS and TOTP."
          type: string
        type:
          description: "The type of authentication. See [Authentication](#section/Authentication)\
            \ for more details."
          type: string
        userManagementSource:
          description: Specifies if the users are managed internally by Cumulocity
            IoT (`INTERNAL`) or if the users data are managed by a external system
            (`REMOTE`).
          type: string
        visibleOnLoginPage:
          description: Indicates if this login option is available in the login page
            (only for SSO).
          type: boolean
        _type:
          deprecated: true
          description: The type of authentication.
          type: string
      type: object
    OAuthSessionConfiguration:
      description: "The session configuration properties are only available for OAuth\
        \ internal. See [Changing settings > OAuth internal](https://cumulocity.com/guides/users-guide/administration/#oauth-internal)\
        \ for more details."
      properties:
        absoluteTimeoutMillis:
          description: Maximum session duration (in milliseconds) during which a user
            does not have to login again.
          type: integer
        maximumNumberOfParallelSessions:
          description: Maximum number of parallel sessions for one user.
          type: integer
        renewalTimeoutMillis:
          description: Amount of time before a token expires (in milliseconds) during
            which the token may be renewed.
          type: integer
        userAgentValidationRequired:
          description: Switch to turn additional user agent verification on or off
            during the session.
          type: boolean
      type: object
    BasicAuthenticationRestrictions:
      description: For basic authentication case only.
      properties:
        forbiddenClients:
          description: List of types of clients which are not allowed to use basic
            authentication. Currently the only supported option is WEB_BROWSERS.
          items:
            type: string
          type: array
        forbiddenUserAgents:
          description: "List of user agents, passed in `User-Agent` HTTP header, which\
            \ are blocked if basic authentication is used."
          items:
            type: string
          type: array
        trustedUserAgents:
          description: "List of user agents, passed in `User-Agent` HTTP header, which\
            \ are allowed to use basic authentication."
          items:
            type: string
          type: array
      type: object
    accessToken:
      description: OAI-Secure access token.
      example:
        access_token: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJhZGY0ODI3Yi00ZjZjLTRiMTktYTJmYy0x...S-04HPk3G5OezjCP8oQUAIG87wd-fHyJ2oKSuetWFWpUSBPzJzl_73_3yauIlplHorlSoQ
      properties:
        access_token:
          description: Access token generated by the Cumulocity IoT platform.
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJhZGY0ODI3Yi00ZjZjLTRiMTktYTJmYy0x...S-04HPk3G5OezjCP8oQUAIG87wd-fHyJ2oKSuetWFWpUSBPzJzl_73_3yauIlplHorlSoQ
          type: string
      type: object
    SystemOptionCollection:
      description: All available system options of the tenant.
      properties:
        options:
          description: An array containing the predefined system options.
          items:
            $ref: '#/components/schemas/systemOption'
          type: array
      type: object
    systemOption:
      description: A tuple storing tenant configuration.
      properties:
        category:
          description: Name of the system option category.
          example: password
          type: string
        key:
          description: A unique identifier for this system option.
          example: enforce.strength
          type: string
        value:
          description: Value of this system option.
          example: "false"
          type: string
      type: object
    realtimeNotification:
      example:
      - channel: /meta/handshake
        clientId: 69wzith4teyensmz6zyk516um4yum0mvp
        minimumVersion: "1.0"
        successful: true
        supportedConnectionTypes:
        - long-polling
        - smartrest-long-polling
        - websocket
        version: "1.0"
      properties:
        advice:
          $ref: '#/components/schemas/realtimeNotification_advice'
        channel:
          description: The channel name as a URI.
          enum:
          - /meta/handshake
          - /meta/subscribe
          - /meta/unsubscribe
          - /meta/connect
          - /meta/disconnect
          type: string
        clientId:
          description: Unique client ID generated by the server during handshake.
            Required for all other operations.
          readOnly: true
          type: string
        connectionType:
          description: Selected connection type.
          type: string
        data:
          description: List of notifications from the channel.
          nullable: true
          readOnly: true
          type: object
        error:
          description: Operation failure reason (only present if the operation was
            not successful).
          readOnly: true
          type: string
        ext:
          $ref: '#/components/schemas/realtimeNotification_ext'
        id:
          description: ID of the message passed in a request. Required to match the
            response message.
          type: string
        minimumVersion:
          description: Minimum server-side Bayeux protocol version required by the
            client (in a request) or minimum client-side Bayeux protocol version required
            by the server (in a response).
          type: string
        subscription:
          description: "Name of the channel to subscribe to. Subscription channels\
            \ are available for [Alarms](#tag/Alarm-notification-API), [Device control](#tag/Device-control-notification-API),\
            \ [Events](#tag/Event-notification-API), [Inventory](#tag/Inventory-notification-API)\
            \ and [Measurements](#tag/Measurement-notification-API)."
          type: string
        successful:
          description: Indicates if the operation was successful.
          readOnly: true
          type: boolean
        supportedConnectionTypes:
          description: "Connection types supported by both client and server, that\
            \ is, intersection between client and server options."
          items:
            type: string
          type: array
        version:
          description: |
            [Bayeux protocol](https://docs.cometd.org/current/reference/#_concepts_bayeux_protocol) version used by the client (in a request) or server (in a response).
          type: string
      required:
      - channel
      type: object
    NotificationApiResource:
      example:
        notificationSubscriptions:
          self: https://<TENANT_DOMAIN>/notification2/subscriptions
          subscriptions: null
        notificationSubscriptionsBySource: "https://<TENANT_DOMAIN>/notification2/subscriptions?source={source}"
        notificationSubscriptionsBySourceAndContext: "https://<TENANT_DOMAIN>/notification2/subscriptions?source={source}&context={context}"
        notificationSubscriptionsByContext: "https://<TENANT_DOMAIN>/notification2/subscriptions?context={context}"
        self: https://<TENANT_DOMAIN>/notification2
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        notificationSubscriptions:
          $ref: '#/components/schemas/NotificationApiResource_notificationSubscriptions'
        notificationSubscriptionsBySource:
          description: "Read-only collection of all notification subscriptions for\
            \ a specific source object. The placeholder {source} must be a unique\
            \ ID of an object in the inventory."
          type: string
        notificationSubscriptionsBySourceAndContext:
          description: Read-only collection of all notification subscriptions of a
            particular context and a specific source object.
          type: string
        notificationSubscriptionsByContext:
          description: Read-only collection of all notification subscriptions of a
            particular context.
          type: string
      type: object
    NotificationTokenClaims:
      example:
        expiresInMinutes: 0
        subscriber: subscriber
        subscription: subscription
      properties:
        expiresInMinutes:
          default: 1440
          description: The token expiration duration.
          type: integer
        subscriber:
          description: The subscriber name which the client wishes to be identified
            with.
          type: string
        subscription:
          description: The subscription name. This value must match the same that
            was used when the subscription was created.
          type: string
      required:
      - subscriber
      - subscription
      type: object
    NotificationToken:
      example:
        token: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ0ZXN0U3Vic2NyaWJlciIsInRvcGljIjoibWFuYWdlbWVudC9yZWxub3RpZi90ZXN0U3Vic2NyaXB0aW9uIiwianRpIjoiZGRiNDRhNjQtMDQzMC00ODUxLWJmMGYtYjI4YWViN2JhNDYwIiwiaWF0IjoxNjMwNDA0NTk3LCJleHAiOjE2MzA0MDk5OTd9.Q56PSRp1HYWw2CjutzV1X9Qhtck0VLLy1GKVqN7kRqYoSpLuDJ0-6Kk_XvvT4NI-xRvu8ZwkWePK-hXLgZmpfs10n54rzLiF195dYnME3r2NuEopkCIIaiqKn6--gxxs0USKgRZ6rmeAKGbdc0bJVBQy_RURyrxPYSG2hYJKflwIKzVkyUsrTPbHRH5Sr_Ip35m7wb9YrYjLTWIYuYSwHqYnX3siBfjY6XSwrIgWJRT-YmYfRJ9LyaMyVdLAuwMQbz5fsytkrzIH7TEyWHK3B0nNIpNOawbjB9d1wFauGhtQ2GcDjiz3lXPLtSnt5pLBA_MzEQGSHXR6mz6ObaYpQQ
      properties:
        token:
          description: JWT (JSON Web Token) access token.
          example: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ0ZXN0U3Vic2NyaWJlciIsInRvcGljIjoibWFuYWdlbWVudC9yZWxub3RpZi90ZXN0U3Vic2NyaXB0aW9uIiwianRpIjoiZGRiNDRhNjQtMDQzMC00ODUxLWJmMGYtYjI4YWViN2JhNDYwIiwiaWF0IjoxNjMwNDA0NTk3LCJleHAiOjE2MzA0MDk5OTd9.Q56PSRp1HYWw2CjutzV1X9Qhtck0VLLy1GKVqN7kRqYoSpLuDJ0-6Kk_XvvT4NI-xRvu8ZwkWePK-hXLgZmpfs10n54rzLiF195dYnME3r2NuEopkCIIaiqKn6--gxxs0USKgRZ6rmeAKGbdc0bJVBQy_RURyrxPYSG2hYJKflwIKzVkyUsrTPbHRH5Sr_Ip35m7wb9YrYjLTWIYuYSwHqYnX3siBfjY6XSwrIgWJRT-YmYfRJ9LyaMyVdLAuwMQbz5fsytkrzIH7TEyWHK3B0nNIpNOawbjB9d1wFauGhtQ2GcDjiz3lXPLtSnt5pLBA_MzEQGSHXR6mz6ObaYpQQ
          type: string
      type: object
    NotificationSubscription:
      example:
        id: "102700509"
        self: http://<TENANT_DOMAIN>/notification2/subscriptions/102700509
        source:
          name: Test Device
          self: http://<TENANT_DOMAIN>/inventory/managedObjects/251982
          id: "251982"
        context: mo
        subscription: testSubscription
        subscriptionFilter:
          apis:
          - measurements
          - events
          typeFilter: c8y_Speed
        fragmentsToCopy:
        - c8y_MaxSpeedMeasurement
      properties:
        context:
          description: |
            The context within which the subscription is to be processed.
            > **&#9432; Info:** If the value is `mo`, then `source` must also be provided in the request body.
          enum:
          - mo
          - tenant
          minLength: 1
          type: string
        fragmentsToCopy:
          description: "Transforms the data to *only* include specified custom fragments.\
            \ Each custom fragment is identified by a unique name. If nothing is specified\
            \ here, the data is forwarded as-is."
          items:
            type: string
          type: array
        id:
          description: Unique identifier of the subscription.
          readOnly: true
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        source:
          $ref: '#/components/schemas/NotificationSubscription_source'
        subscription:
          description: The subscription name. Each subscription is identified by a
            unique name within a specific context.
          minLength: 1
          pattern: "^[a-zA-Z0-9]+$"
          type: string
        subscriptionFilter:
          $ref: '#/components/schemas/NotificationSubscription_subscriptionFilter'
      required:
      - context
      - subscription
      type: object
    NotificationSubscriptionCollection:
      example:
        self: https://<TENANT_DOMAIN>/notification2/subscriptions?pageSize=5&currentPage=1
        subscriptions:
        - id: "102700509"
          self: http://<TENANT_DOMAIN>/notification2/subscriptions/102700509
          source:
            name: Test Device
            self: http://<TENANT_DOMAIN>/inventory/managedObjects/251982
            id: "251982"
          context: mo
          subscription: testSubscription
          subscriptionFilter:
            apis:
            - measurements
            - events
            typeFilter: c8y_Speed
          fragmentsToCopy:
          - c8y_MaxSpeedMeasurement
        statistics:
          totalPages: 1
          currentPage: 1
          pageSize: 5
      properties:
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
        subscriptions:
          description: An array containing the subscriptions of the request.
          items:
            $ref: '#/components/schemas/NotificationSubscription'
          type: array
      type: object
    TrustedCertificate:
      example:
        algorithmName: SHA256withRSA
        version: 3
        autoRegistrationEnabled: true
        issuer: "CN=CertificateName, OU=Dusseldorf, O=SoftwareAG, C=DE"
        name: My Certificate
        fingerprint: df9c19e0433c6861fak899078b76fe56a3e7dd14
        notAfter: 2041-08-29T07:42:00.000Z
        notBefore: 2021-09-03T07:42:00.000Z
        serialNumber: "304307049989715896618044547121406628655049752690"
        subject: "CN=CertificateName, OU=Dusseldorf, O=SoftwareAG, C=DE"
        self: https://<TENANT_DOMAIN>/tenant/tenants/t07007007/trusted-certificates/df9c19e0433c6861fak899078b76fe56a3e7dd14
        status: ENABLED
        certInPemFormat: |
          MIIFezCCA2OgAwIBAgIUNU2ZnXIdu9aq+O7x2emLTgXgQEowDQYJKoZIhvcNAQEL
          BQAwRTELMAkGA1UEBhMCUEwxDzANBgNVBAoMBmluZXR1bTEPMA0GA1UECwwGbHVi
          bGluMRQwEgYDVQQDDAtiYXNpY0NvbW1vbjAeFw0yMTA5MDMwNzQyMDBaFw00MTA4
          MjkwNzQyMDBaMEUxCzAJBgNVBAYTAlBMMQ8wDQYDVQQKDAZpbmV0dW0xDzANBgNV
          BAsMBmx1YmxpbjEUMBIGA1UEAwwLYmFzaWNDb21tb24wggIiMA0GCSqGSIb3DQEB
          AQUAA4ICDwAwggIKAoICAQDEc1NevRvKaIDs5CsGbIc/ETm3gHmG3OP9Z8ULQv1y
          W1VzdjSKfgoVWVEsbhuhaRaWyIuaFh6dsWpWEcXpHkq+DiRuQGifBmUNFURZQ8Aw
          UOrQ4F10UuzulEYauYh218rGSynLnIXCO3UHXGjWX+iiXPjbesFcnLPaarmLmQU9
          AAh9MpBb3ztMzh5wRGcyVpuDxZ7e0HDBlI7hNMEqCFO/brJsILtv5q0j4JoShyWX
          NVV8tX8P+biMlyMcVoZJazBfYuYErxmxdXtORxOkfge815ltGoMI9V4YSSex3/Fv
          /PBavpF4iueqcrWQF3dhctAViPEzpMoefTu+cFtB/40wx/NHiBF5x5rjcT2s/+6W
          b9OGLxLLf84XpYlHWtucfFLzznPMiXNegfkJpU0dMuMh1GT5WNTfmcPV3LiasbI0
          GNq6mWKLgcRHX95pw16vw0CqzPnFTASztnI12mIYm6D0oQ+tHjLoPrW3fiZEeF67
          fVA8LNWJwCkzHlnnNl5HP15K+GoscyzyMKj7ViAqN+XZaCRpRqYNZGkGXB9mSVQn
          0oK6eRX8oQ4NQQW49VNoho9I8DhcCdMglMj9bhciIy2LrSwB8Sx9nB1C9wiHDbCA
          fTy1nxEJS9gUGg7LNmRxlpQFBuQ0ndq87UEUdjchvbmJD7T5ZYM0LgDopJypBsqF
          gQIDAQABo2MwYTAdBgNVHQ4EFgQUUS08257ro38KOB1a8pqYL3P2NvAwHwYDVR0j
          BBgwFoAUUS08257ro38KOB1a8pqYL3P2NvAwEgYDVR0TAQH/BAgwBgEB/wIBCjAL
          BgNVHQ8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIBAGtYjON+CFzVGRkajHK1RKZS
          J4kAfQlrXq1vG2b4jWYSLgrNw4o93xx0yLK0HVHO12juFhUrmlfhCB/iGI9iL2IO
          h7v+PQ4L5wQJWfxZNWDZpqbF3S7UyDGAFx1J3MwjIhkoPpaIB0km+sQCJxn5Vt36
          OPCKmORm4tplBHNauP9PpS418HAC9uyrew/h/0BLLaPF9BwFWk4HmSwfSFTHOvyh
          hC1G4cEzHuiadLGCPXwerCe5As9F4InvIYmQ4UxAOtnlQcnQYOowFSrMobkArGR9
          HcG1b0vWQJdzVrDU7zcRzD90ehwsXJIczOQoa/Hmb3Njlop8LyTFPjeXeoJf6PJE
          MHy08IOLvaX4UsRiKLKJ28JEhVVemBrPspHeADqmlbeBotQ6OToWFeki9qQSz5Lw
          lks/4qfRn6Xl3rmRSH8FdbK3VdIYInT7PTz5W2EBE8Ql5vneSPb9aank+9H67mB5
          GQ8uYpxcs6Qjyy62pkfejlHHHh5oqEq0b6w7YyUuMAEW0JB0WevoCS8iVl8hKbyK
          94u/PqW6lH+agw4kaMzaeMwBmppAy4JsiEKKavvP3jO6NDMc1bHt5q2+XTRPdlQY
          DVZJfXybnOvsTQv41A4zyHSaNZsH1AyhJPfFKAMPXhajm7dBCi87bamMj4NyZt8f
          PPBUaE6x9fMfuGJbcsAR
      properties:
        algorithmName:
          description: Algorithm used to decode/encode the certificate.
          readOnly: true
          type: string
        autoRegistrationEnabled:
          default: false
          description: Indicates whether the automatic device registration is enabled
            or not.
          type: boolean
        certInPemFormat:
          description: Trusted certificate in PEM format.
          type: string
        fingerprint:
          description: Unique identifier of the trusted certificate.
          readOnly: true
          type: string
        issuer:
          description: The name of the organization which signed the certificate.
          readOnly: true
          type: string
        name:
          description: Name of the certificate.
          type: string
        notAfter:
          description: The end date and time of the certificate's validity.
          format: date-time
          readOnly: true
          type: string
        notBefore:
          description: The start date and time of the certificate's validity.
          format: date-time
          readOnly: true
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        serialNumber:
          description: The certificate's serial number.
          readOnly: true
          type: string
        status:
          description: Indicates if the certificate is active and can be used by the
            device to establish a connection to the Cumulocity IoT platform.
          enum:
          - ENABLED
          - DISABLED
          example: ENABLED
          type: string
        subject:
          description: Name of the organization to which the certificate belongs.
          readOnly: true
          type: string
        version:
          description: Version of the X.509 certificate standard.
          readOnly: true
          type: integer
      type: object
    TrustedCertificateCollection:
      description: A collection of trusted certificates.
      example:
        certificates:
        - algorithmName: SHA256withRSA
          version: 3
          autoRegistrationEnabled: true
          issuer: "CN=CertificateName, OU=Dusseldorf, O=SoftwareAG, C=DE"
          name: My Certificate
          fingerprint: df9c19e0433c6861fak899078b76fe56a3e7dd14
          notAfter: 2041-08-29T07:42:00.000Z
          notBefore: 2021-09-03T07:42:00.000Z
          serialNumber: "304307049989715896618044547121406628655049752690"
          subject: "CN=CertificateName, OU=Dusseldorf, O=SoftwareAG, C=DE"
          self: https://<TENANT_DOMAIN>/tenant/tenants/t07007007/trusted-certificates/df9c19e0433c6861fak899078b76fe56a3e7dd14
          status: ENABLED
          certInPemFormat: |
            MIIFezCCA2OgAwIBAgIUNU2ZnXIdu9aq+O7x2emLTgXgQEowDQYJKoZIhvcNAQEL
            BQAwRTELMAkGA1UEBhMCUEwxDzANBgNVBAoMBmluZXR1bTEPMA0GA1UECwwGbHVi
            bGluMRQwEgYDVQQDDAtiYXNpY0NvbW1vbjAeFw0yMTA5MDMwNzQyMDBaFw00MTA4
            MjkwNzQyMDBaMEUxCzAJBgNVBAYTAlBMMQ8wDQYDVQQKDAZpbmV0dW0xDzANBgNV
            BAsMBmx1YmxpbjEUMBIGA1UEAwwLYmFzaWNDb21tb24wggIiMA0GCSqGSIb3DQEB
            AQUAA4ICDwAwggIKAoICAQDEc1NevRvKaIDs5CsGbIc/ETm3gHmG3OP9Z8ULQv1y
            W1VzdjSKfgoVWVEsbhuhaRaWyIuaFh6dsWpWEcXpHkq+DiRuQGifBmUNFURZQ8Aw
            UOrQ4F10UuzulEYauYh218rGSynLnIXCO3UHXGjWX+iiXPjbesFcnLPaarmLmQU9
            AAh9MpBb3ztMzh5wRGcyVpuDxZ7e0HDBlI7hNMEqCFO/brJsILtv5q0j4JoShyWX
            NVV8tX8P+biMlyMcVoZJazBfYuYErxmxdXtORxOkfge815ltGoMI9V4YSSex3/Fv
            /PBavpF4iueqcrWQF3dhctAViPEzpMoefTu+cFtB/40wx/NHiBF5x5rjcT2s/+6W
            b9OGLxLLf84XpYlHWtucfFLzznPMiXNegfkJpU0dMuMh1GT5WNTfmcPV3LiasbI0
            GNq6mWKLgcRHX95pw16vw0CqzPnFTASztnI12mIYm6D0oQ+tHjLoPrW3fiZEeF67
            fVA8LNWJwCkzHlnnNl5HP15K+GoscyzyMKj7ViAqN+XZaCRpRqYNZGkGXB9mSVQn
            0oK6eRX8oQ4NQQW49VNoho9I8DhcCdMglMj9bhciIy2LrSwB8Sx9nB1C9wiHDbCA
            fTy1nxEJS9gUGg7LNmRxlpQFBuQ0ndq87UEUdjchvbmJD7T5ZYM0LgDopJypBsqF
            gQIDAQABo2MwYTAdBgNVHQ4EFgQUUS08257ro38KOB1a8pqYL3P2NvAwHwYDVR0j
            BBgwFoAUUS08257ro38KOB1a8pqYL3P2NvAwEgYDVR0TAQH/BAgwBgEB/wIBCjAL
            BgNVHQ8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIBAGtYjON+CFzVGRkajHK1RKZS
            J4kAfQlrXq1vG2b4jWYSLgrNw4o93xx0yLK0HVHO12juFhUrmlfhCB/iGI9iL2IO
            h7v+PQ4L5wQJWfxZNWDZpqbF3S7UyDGAFx1J3MwjIhkoPpaIB0km+sQCJxn5Vt36
            OPCKmORm4tplBHNauP9PpS418HAC9uyrew/h/0BLLaPF9BwFWk4HmSwfSFTHOvyh
            hC1G4cEzHuiadLGCPXwerCe5As9F4InvIYmQ4UxAOtnlQcnQYOowFSrMobkArGR9
            HcG1b0vWQJdzVrDU7zcRzD90ehwsXJIczOQoa/Hmb3Njlop8LyTFPjeXeoJf6PJE
            MHy08IOLvaX4UsRiKLKJ28JEhVVemBrPspHeADqmlbeBotQ6OToWFeki9qQSz5Lw
            lks/4qfRn6Xl3rmRSH8FdbK3VdIYInT7PTz5W2EBE8Ql5vneSPb9aank+9H67mB5
            GQ8uYpxcs6Qjyy62pkfejlHHHh5oqEq0b6w7YyUuMAEW0JB0WevoCS8iVl8hKbyK
            94u/PqW6lH+agw4kaMzaeMwBmppAy4JsiEKKavvP3jO6NDMc1bHt5q2+XTRPdlQY
            DVZJfXybnOvsTQv41A4zyHSaNZsH1AyhJPfFKAMPXhajm7dBCi87bamMj4NyZt8f
            PPBUaE6x9fMfuGJbcsAR
        next: https://<TENANT_DOMAIN>/tenant/tenants/t07007007/trusted-certificates?pageSize=1&currentPage=3
        prev: https://<TENANT_DOMAIN>/tenant/tenants/t07007007/trusted-certificates?pageSize=1&currentPage=1
        self: https://<TENANT_DOMAIN>/tenant/tenants/t07007007/trusted-certificates?pageSize=1&currentPage=2
        statistics:
          currentPage: 2
          pageSize: 1
      properties:
        certificates:
          description: An array containing trusted certificates.
          items:
            $ref: '#/components/schemas/TrustedCertificate'
          type: array
        next:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential next page of managed objects."
          readOnly: true
          title: NextPageURL
          type: string
        prev:
          description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
            \ to a potential previous page of managed objects."
          readOnly: true
          title: PreviousPageURL
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      type: object
    UploadedTrustedCertSignedVerificationCode:
      description: The signed verification code to prove the user's possession of
        the certificate.
      example:
        proofOfPossessionSignedVerificationCode: 6qgyIiqnYAx+1pkSSgy1o8tNHBVFkWoQ/2oRt5Czyy2ViobYaG8GVjz3pEcJ/Vz8e2PjjBYFYCvlGF08pZRJMjbTUHpe6p4wBFlK2
      properties:
        proofOfPossessionSignedVerificationCode:
          description: A signed verification code that proves the right to use the
            certificate.
          example: 6qgyIiqnYAx+1pkSSgy1o8tNHBVFkWoQ/2oRt5Czyy2ViobYaG8GVjz3pEcJ/Vz8e2PjjBYFYCvlGF08pZRJMjbTUHpe6p4wBFlK2
          type: string
      type: object
    NotificationSubscriptionResult:
      example:
        result: DONE
      properties:
        result:
          description: The status of the notification subscription deletion.
          enum:
          - DONE
          - SCHEDULED
          type: string
      type: object
    desc_objectId:
      description: Unique identifier of the object.
      minLength: 1
      title: ObjectId
      type: string
    desc_objectName:
      description: Human-readable name that is used for representing the object in
        user interfaces.
      title: ObjectName
      type: string
    desc_self:
      description: A URL linking to this resource.
      format: uri
      readOnly: true
      title: SelfURL
      type: string
    desc_prevPage:
      description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
        \ to a potential previous page of managed objects."
      readOnly: true
      title: PreviousPageURL
      type: string
    desc_nextPage:
      description: "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]\
        \ to a potential next page of managed objects."
      readOnly: true
      title: NextPageURL
      type: string
    desc_user_devicepermissions:
      additionalProperties:
        items:
          type: string
        type: array
      deprecated: true
      description: An object with a list of the user's device permissions.
      example:
        "647100":
        - MANAGED_OBJECT:*:ADMIN
      title: DevicePermissions
      type: object
    desc_tenant_id:
      description: Unique identifier of a Cumulocity IoT tenant.
      example: t07007007
      maxLength: 32
      minLength: 2
      readOnly: true
      title: TenantId
      type: string
    c8y_Hardware:
      description: "Contains basic hardware information for a device, such as make\
        \ and serial number. Often, the hardware serial number is printed on the board\
        \ of the device or on an asset tag on the device to uniquely identify the\
        \ device within all devices of the same make."
      properties:
        model:
          description: A text identifier of the device's hardware model.
          example: BCM2708
          type: string
        revision:
          description: A text identifier of the hardware revision.
          example: 000e
          type: string
        serialNumber:
          description: The hardware serial number of the device.
          example: 00000000e2f5ad4d
          type: string
      type: object
    c8y_Firmware:
      description: "Contains information on a device's firmware. In the inventory,\
        \ `c8y_Firmware` represents the currently installed firmware on the device.\
        \ As part of an operation, `c8y_Firmware` requests the device to install the\
        \ indicated firmware. To enable firmware installation through the user interface,\
        \ add `c8y_Firmware` to the list of supported operations."
      properties:
        name:
          description: Name of the firmware.
          example: raspberrypi-bootloader
          type: string
        version:
          description: A version identifier of the firmware.
          example: 1.20140107-1
          type: string
        url:
          description: A URI linking to the location to download the firmware from.
          example: https://example.com/support/firmware-download
          format: uri
          type: string
      type: object
    c8y_Mobile:
      additionalProperties:
        description: |
          Other possible values are: `c8y_Mobile.imsi`, `c8y_Mobile.currentOperator`, `c8y_Mobile.currentBand`, `c8y_Mobile.connType`, `c8y_Mobile.rssi`, `c8y_Mobile.ecn0`, `c8y_Mobile.rcsp`, `c8y_Mobile.mnc`, `c8y_Mobile.lac` and `c8y_Mobile.msisdn`.
        type: string
        x-additionalPropertiesName: customFragments
      description: "Holds basic connectivity-related information, such as the equipment\
        \ identifier of the modem (IMEI) in the device. This identifier is globally\
        \ unique and often used to identify a mobile device."
      example:
        imei: "358901048995390"
        cellId: 15DFAC
        iccid: "89430301901300001342"
      properties:
        imei:
          description: The equipment identifier (IMEI) of the modem in the device.
          type: string
        cellId:
          description: The identifier of the cell in the mobile network that the device
            is currently connected with.
          type: string
        iccid:
          description: The identifier of the SIM card that is currently in the device
            (often printed on the card).
          type: string
      required:
      - cellId
      - iccid
      - imei
      type: object
    c8y_CellInfo:
      description: "Provides detailed information about the closest mobile cell towers.\
        \ When the functionality is activated, the location of the device is determined\
        \ based on this fragment, in order to track the device whereabouts when GPS\
        \ tracking is not available."
      example:
        radioType: gsm
        cellTowers:
        - mobileCountryCode: 240
          mobileNetworkCode: 1
          locationAreaCode: 3012
          cellId: 11950
      properties:
        radioType:
          description: The radio type of this cell tower.
          type: string
        cellTowers:
          description: Detailed information about the neighboring cell towers.
          items:
            $ref: '#/components/schemas/c8y_CellTower'
          type: array
      required:
      - cellTowers
      type: object
    c8y_CellTower:
      description: Detailed information about a neighbouring cell tower.
      properties:
        radioType:
          description: The radio type of this cell tower. Can also be put directly
            in root JSON element if all cellTowers have same radioType.
          type: string
        mobileCountryCode:
          description: The Mobile Country Code (MCC).
          type: number
        mobileNetworkCode:
          description: "The Mobile Network Code (MNC) for GSM, WCDMA and LTE. The\
            \ SystemID (sid) for CDMA."
          type: number
        locationAreaCode:
          description: "The Location Area Code (LAC) for GSM, WCDMA and LTE. The Network\
            \ ID for CDMA."
          type: number
        cellId:
          description: "The Cell ID (CID) for GSM, WCDMA and LTE. The base station\
            \ ID for CDMA."
          type: number
        timingAdvance:
          description: The timing advance value for this cell tower when available.
          type: number
        signalStrength:
          description: The signal strength for this cell tower in dBm.
          type: number
        primaryScramblingCode:
          description: The primary scrambling code for WCDMA and physical CellId for
            LTE.
          type: number
        serving:
          description: "Specify with 0/1 if the cell is serving or not. If not specified,\
            \ the first cell is assumed to be serving."
          type: number
      required:
      - cellId
      - locationAreaCode
      - mobileCountryCode
      - mobileNetworkCode
      type: object
    c8y_Configuration:
      description: |
        Text configuration fragment that allows you to configure parameters and initial settings of your device.

        In the inventory, `c8y_Configuration` represents the currently active configuration on the device. As part of an operation, `c8y_Configuration` requests the device to switch the transmitted configuration to the currently active one. To enable configuration through the user interface, add `c8y_Configuration` to the list of supported operations.
      properties:
        config:
          description: "A text in a device-specific format, representing the configuration\
            \ of the device."
          type: string
      type: object
    c8y_RequiredAvailability:
      description: |
        Devices can be monitored for availability by adding a `c8y_RequiredAvailability` fragment to the device.

        Devices that have not sent any message in the response interval are considered disconnected. The response interval can have a value between `-32768` and `32767` and any values out of range will be shrunk to the range borders. Such devices are marked as unavailable and an unavailability alarm is raised.
      properties:
        responseInterval:
          type: integer
      type: object
    c8y_Availability:
      description: The availability information computed by Cumulocity IoT is stored
        in fragments `c8y_Availability` and `c8y_Connection` of the device.
      properties:
        status:
          $ref: '#/components/schemas/c8y_AvailabilityStatus'
        lastMessage:
          description: The time when the device sent the last message to Cumulocity
            IoT.
          format: date-time
          type: string
      type: object
    c8y_Connection:
      description: The availability information computed by Cumulocity IoT is stored
        in fragments `c8y_Availability` and `c8y_Connection` of the device.
      properties:
        status:
          $ref: '#/components/schemas/c8y_AvailabilityStatus'
      type: object
    c8y_AvailabilityStatus:
      description: "The current status, one of `AVAILABLE`, `CONNECTED`, `MAINTENANCE`,\
        \ `DISCONNECTED`."
      enum:
      - AVAILABLE
      - CONNECTED
      - MAINTENANCE
      - DISCONNECTED
      type: string
    c8y_ActiveAlarmsStatus:
      description: The number of currently active and acknowledged alarms is stored
        in this fragment.
      properties:
        critical:
          example: 1
          type: integer
        major:
          example: 1
          type: integer
        minor:
          example: 1
          type: integer
        warning:
          example: 1
          type: integer
      type: object
    c8y_CommunicationMode:
      description: "In order to send commands as text messages to devices, the devices\
        \ must be put into SMS mode. To indicate that it supports SMS mode, a device\
        \ needs to add the fragment `c8y_CommunicationMode` with a mode property of\
        \ `SMS`."
      properties:
        mode:
          example: SMS
          type: string
      type: object
    c8y_Command:
      description: "To carry out interactive sessions with a device, use the `c8y_Command`\
        \ fragment. If this fragment is in the list of supported operations for a\
        \ device, a tab `Shell` will be shown. Using the `Shell` tab, the user can\
        \ send commands in an arbitrary, device-specific syntax to the device. The\
        \ command is sent to the device in a property `text`."
      properties:
        type:
          description: The command sent to the device.
          example: get uboot.sn
          type: string
        result:
          description: "To communicate the results of a particular command, the device\
            \ adds a property `result`."
          example: "165711141901401"
          type: string
      type: object
    c8y_TemperatureSensor:
      description: "A temperature sensor reports the temperature in degrees Celsius\
        \ (C). In a managed object, a temperature sensor is modeled as a simple empty\
        \ fragment."
      example: {}
      type: object
    c8y_TemperatureMeasurement:
      description: Measurement of the temperature.
      example:
        T:
          value: 23
          unit: C
      properties:
        T:
          $ref: '#/components/schemas/c8y_TemperatureMeasurement_T'
      type: object
    c8y_MotionSensor:
      description: "A motion sensor detects motion. Simple motion sensors may just\
        \ detect if there is motion or not, based on some predefined threshold. More\
        \ complicated motion sensors (such as police speed radars) can measure the\
        \ actual speed of the motion. It is assumed in the model that only the speed\
        \ towards or away from the sensor is measured. The unit for this sensor type\
        \ are kilometres per hour (km/h). In a managed object, a motion sensor is\
        \ modeled as a simple empty fragment."
      example: {}
      type: object
    c8y_MotionMeasurement:
      description: Measurement of the motion sensor.
      example:
        motionDetected:
          value: 1
          type: BOOLEAN
        speed:
          value: -63.2
          unit: km/h
      properties:
        motionDetected:
          $ref: '#/components/schemas/c8y_MotionMeasurement_motionDetected'
        speed:
          $ref: '#/components/schemas/c8y_MotionMeasurement_speed'
      type: object
    c8y_AccelerationSensor:
      description: "An acceleration sensor, or accelerometer, is a device that measures\
        \ acceleration along an axis. This sensor model does not define the direction\
        \ of that axis. The units for this sensor type are metres per second per second\
        \ (m/s2). In a managed object, an acceleration sensor is modeled as a simple\
        \ empty fragment."
      example: {}
      type: object
    c8y_AccelerationMeasurement:
      description: Measurement of the acceleration sensor.
      example:
        acceleration:
          value: 8.36
          unit: m/s2
      properties:
        acceleration:
          $ref: '#/components/schemas/c8y_AccelerationMeasurement_acceleration'
      type: object
    c8y_LightSensor:
      description: "A light sensor measures the intensity of light. In a managed object,\
        \ a light sensor is modeled as a simple empty fragment."
      example: {}
      type: object
    c8y_LightMeasurement:
      description: |
        Light is measured with two main alternative sets of units.

        Radiometry consists of measurements of light power at all wavelengths, while photometry measures light with wavelength weighted with respect to a standardized model of human brightness perception. Photometry is useful, for example, to quantify illumination (lighting) intended for human use.
      example:
        e:
          value: 8.36
          unit: lux
      properties:
        e:
          $ref: '#/components/schemas/c8y_LightMeasurement_e'
      type: object
    c8y_HumiditySensor:
      description: "A humidity sensor measures the amount of water vapour in the air.\
        \ In a managed object, a humidity sensor is modeled as a simple empty fragment."
      example: {}
      type: object
    c8y_HumidityMeasurement:
      description: |
        There are three main measurements of humidity; absolute, relative and specific.

        Absolute humidity is the water content of air. Relative humidity, expressed as a percentage, measures the current absolute humidity relative to the maximum for that temperature. Specific humidity is a ratio of the water vapour content of the mixture to the total air content on a mass basis.
      example:
        h:
          value: 13.37
          unit: '%RH'
      properties:
        h:
          $ref: '#/components/schemas/c8y_HumidityMeasurement_h'
      type: object
    c8y_MoistureSensor:
      description: "A moisture sensor measures the water content of a substance. In\
        \ a managed object, a moisture sensor is modeled as a simple empty fragment."
      example: {}
      type: object
    c8y_MoistureMeasurement:
      description: |
        There are three main measurements of moisture; absolute, relative and specific.

        Absolute moisture is the absolute water content of a substance. Relative moisture, expressed as a percentage, measures the current absolute moisture relative to the maximum for that temperature. Specific humidity is a ratio of the water vapour content of the mixture to the total substance content on a mass basis.
      example:
        moisture:
          value: 13.37
          unit: '%'
      properties:
        moisture:
          $ref: '#/components/schemas/c8y_MoistureMeasurement_moisture'
      type: object
    c8y_DistanceSensor:
      description: "A distance sensor measures the distance between itself and the\
        \ closest object in a certain direction. In a managed object, a distance sensor\
        \ is modeled as a simple empty fragment."
      example: {}
      type: object
    c8y_DistanceMeasurement:
      description: Measurement of the distance.
      example:
        distance:
          value: 13.37
          unit: mm
      properties:
        distance:
          $ref: '#/components/schemas/c8y_DistanceMeasurement_distance'
      type: object
    c8y_SinglePhaseElectricitySensor:
      description: "In a managed object, a single phase electricity meter is modeled\
        \ as a simple empty fragment."
      example: {}
      type: object
    c8y_SinglePhaseEnergyMeasurement:
      additionalProperties:
        $ref: '#/components/schemas/c8y_MeasurementValue'
      description: Measurement of the single phase energy meter.
      example:
        A+:
          value: 123
          unit: kWh
        A-:
          value: 2
          unit: kWh
        P+:
          value: 56
          unit: W
        P-:
          value: 0
          unit: W
      type: object
    c8y_ThreePhaseElectricitySensor:
      description: "In a managed object, a three phase electricity meter is modeled\
        \ as a simple empty fragment."
      example: {}
      type: object
    c8y_ThreePhaseEnergyMeasurement:
      additionalProperties:
        $ref: '#/components/schemas/c8y_MeasurementValue'
      description: Measurement of the three phase energy meter.
      example:
        A+:
          value: 435
          unit: kWh
        A-:
          value: 23
          unit: kWh
        P+:
          value: 657
          unit: W
        P-:
          value: 0
          unit: W
        A+:1:
          value: 123
          unit: kWh
        A-:1:
          value: 2
          unit: kWh
        P+:1:
          value: 56
          unit: W
        P-:1:
          value: 0
          unit: W
        A+:2:
          value: 231
          unit: kWh
        A-:2:
          value: 23
          unit: kWh
        P+:2:
          value: 516
          unit: W
        P-:2:
          value: 2
          unit: W
        A+:3:
          value: 1423
          unit: kWh
        A-:3:
          value: 422
          unit: kWh
        P+:3:
          value: 16
          unit: W
        P-:3:
          value: 9
          unit: W
        Ri+:
          value: 231
          unit: kVArh
        Ri-:
          value: 23
          unit: kVArh
        Rc+:
          value: 342
          unit: kVArh
        Rc-:
          value: 43
          unit: kVArh
        Qi+:
          value: 234
          unit: kVAr
        Qi-:
          value: 645
          unit: kVAr
        Qc+:
          value: 76
          unit: kVAr
        Qc-:
          value: 34
          unit: kVAr
      type: object
    c8y_CurrentSensor:
      description: "A current sensor measures the current flowing through it. In a\
        \ managed object, a current sensor is modeled as a simple empty fragment."
      example: {}
      type: object
    c8y_CurrentMeasurement:
      description: Current measurement.
      example:
        current:
          value: 13.37
          unit: A
      properties:
        current:
          $ref: '#/components/schemas/c8y_CurrentMeasurement_current'
      type: object
    c8y_VoltageMeasurement:
      description: A voltage sensor measures the voltage difference between two points
        in an electric circuit.
      example:
        voltage:
          value: 13.37
          unit: V
      properties:
        voltage:
          $ref: '#/components/schemas/c8y_VoltageMeasurement_voltage'
      type: object
    c8y_MeasurementValue:
      description: A measurement is a value with a unit.
      properties:
        value:
          type: number
        unit:
          type: string
      type: object
    c8y_Position:
      description: |
        Reports the geographical location of an asset in terms of latitude, longitude and altitude.

        Altitude is given in meters. To report the current location of an asset or a device, `c8y_Position` is added to the managed object representing the asset or device. To trace the position of an asset or a device, `c8y_Position` is sent as part of an event of type `c8y_LocationUpdate`.
      example:
        alt: 67
        lng: 6.15173
        lat: 51.211977
        trackingProtocol: TELIC
        reportReason: Time Event
      properties:
        alt:
          description: In meters.
          type: number
        lng:
          type: number
        lat:
          type: number
        trackingProtocol:
          description: Describes in which protocol the tracking context of a positioning
            report was sent.
          type: string
        reportReason:
          description: Describes why the tracking context of a positioning report
            was sent.
          type: string
      type: object
    c8y_Agent:
      description: The term "agent" refers to the piece of software that connects
        a device with Cumulocity IoT.
      properties:
        name:
          description: The name of the agent.
          type: string
        version:
          description: The version of the agent.
          type: string
        url:
          description: "The URL of the agent, for example, its code repository."
          format: uri
          type: string
      required:
      - name
      - version
      type: object
    com_cumulocity_model_Agent:
      description: "An empty fragment stored in the device managed object using the\
        \ inventory API endpoints. It declares that the device is able to receive\
        \ operations extended capabilities. This fragment is optional. If not present,\
        \ the extended capabilities will not be certified."
      example: {}
      type: object
    c8y_SupportedChildDeviceTypes:
      description: Cumulocity IoT uses the concept of child device types to distinguish
        the capabilities of child devices behind a gateway device.
      example:
      - Analog
      - Canbus
      - OPCUA
      - Sigfox
      items:
        description: Child device types can be freely named.
        type: string
      type: array
    c8y_LogfileRequest:
      description: Request a device to send a log file and view it in Cumulocity IoT's
        log viewer.
      example:
        logFile: syslog
        dateFrom: 2022-01-01T00:00:00.000Z
        dateTo: 2022-01-30T23:59:59.999Z
        searchText: sms
        maximumLines: 1000
        file: https://<TENANT_DOMAIN>/inventory/binaries/30761423
      properties:
        logFile:
          description: Indicates the log file to select.
          type: string
        dateFrom:
          description: Start date and time of log entries in the log file to be sent.
          format: date-time
          type: string
        dateTo:
          description: End date and time of log entries in the log file to be sent.
          format: date-time
          type: string
        searchText:
          description: Provide a text that needs to be present in the log entry.
          type: string
        maximumLines:
          description: Upper limit of the number of lines that should be sent to Cumulocity
            IoT after filtering.
          type: integer
        file:
          description: A link to the log file request.
          format: uri
          readOnly: true
          type: string
      type: object
    c8y_SupportedLogs:
      description: Specify which logs are available on the device.
      example:
      - syslog
      - dmesg
      items:
        description: Type of log.
        type: string
      type: array
    c8y_SoftwareList:
      description: Currently installed software on the device in the managed object
        accessible via the inventory API endpoints.
      items:
        $ref: '#/components/schemas/c8y_SoftwareList_inner'
      type: array
    c8y_Profile:
      description: "Device capability to manage device profiles. Device profiles represent\
        \ a combination of a firmware version, one or multiple software packages and\
        \ one or multiple configuration files which can be deployed on a device."
      example:
        profileName: Device_Profile_1
        profileId: "1694"
        profileExecuted: true
      properties:
        profileName:
          description: The name of the profile.
          type: string
        profileId:
          description: The ID of the profile.
          type: string
        profileExecuted:
          description: Indicates whether the profile has been executed.
          type: boolean
      type: object
    c8y_Network:
      description: "Device capability to either display or display and manage the\
        \ WAN, LAN, and DHCP settings."
      properties:
        c8y_LAN:
          $ref: '#/components/schemas/c8y_Network_c8y_LAN'
        c8y_WAN:
          $ref: '#/components/schemas/c8y_Network_c8y_WAN'
        c8y_DHCP:
          $ref: '#/components/schemas/c8y_Network_c8y_DHCP'
      type: object
    DevicePermissionOwners:
      description: A list of device permissions.
      example:
        groups:
        - id: 2
          name: Global Watchers
          description: Can watch all events
          self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/2"
          roles:
            self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/roles"
            references: []
          users:
            self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/users"
            references: []
          applications: []
          customProperties: {}
          devicePermissions:
            "647100":
            - MANAGED_OBJECT:*:ADMIN
        - id: 2
          name: Global Watchers
          description: Can watch all events
          self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/2"
          roles:
            self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/roles"
            references: []
          users:
            self: "https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/users"
            references: []
          applications: []
          customProperties: {}
          devicePermissions:
            "647100":
            - MANAGED_OBJECT:*:ADMIN
        users:
        - self: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe"
          id: jdoe
          firstName: John
          lastName: Doe
          userName: jdoe
          phone: +1-541-754-3010
          displayName: John Doe
          email: johndoe@example.com
          lastPasswordChange: 2020-06-09T09:48:40.008Z
          passwordStrength: GREEN
          shouldResetPassword: false
          twoFactorAuthenticationEnabled: false
          customProperties: {}
          effectiveRoles:
            self: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe/roles"
            references:
            - id: ROLE_ALARM_ADMIN
              name: ROLE_ALARM_ADMIN
              self: https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN
          enabled: true
          groups:
            self: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe/groups"
            references: []
          applications: []
          devicePermissions:
            "647100":
            - MANAGED_OBJECT:*:READ
        - self: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe"
          id: jdoe
          firstName: John
          lastName: Doe
          userName: jdoe
          phone: +1-541-754-3010
          displayName: John Doe
          email: johndoe@example.com
          lastPasswordChange: 2020-06-09T09:48:40.008Z
          passwordStrength: GREEN
          shouldResetPassword: false
          twoFactorAuthenticationEnabled: false
          customProperties: {}
          effectiveRoles:
            self: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe/roles"
            references:
            - id: ROLE_ALARM_ADMIN
              name: ROLE_ALARM_ADMIN
              self: https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN
          enabled: true
          groups:
            self: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe/groups"
            references: []
          applications: []
          devicePermissions:
            "647100":
            - MANAGED_OBJECT:*:READ
      properties:
        users:
          items:
            $ref: '#/components/schemas/user'
          type: array
        groups:
          items:
            $ref: '#/components/schemas/group'
          type: array
      type: object
    UpdatedDevicePermissions:
      description: A list of device permissions.
      example:
        groups:
        - id: "1"
          devicePermissions:
            "647100":
            - MANAGED_OBJECT:*:ADMIN
        - id: "1"
          devicePermissions:
            "647100":
            - MANAGED_OBJECT:*:ADMIN
        users:
        - userName: some-username
          devicePermissions:
            "647100":
            - MANAGED_OBJECT:*:ADMIN
        - userName: some-username
          devicePermissions:
            "647100":
            - MANAGED_OBJECT:*:ADMIN
      properties:
        users:
          items:
            $ref: '#/components/schemas/UpdatedDevicePermissions_users_inner'
          type: array
        groups:
          items:
            $ref: '#/components/schemas/UpdatedDevicePermissions_groups_inner'
          type: array
      type: object
    putAlarmCollectionResource_request:
      allOf:
      - $ref: '#/components/schemas/alarm'
      - properties:
          severity:
            readOnly: true
          source:
            readOnly: true
          text:
            readOnly: true
          time:
            readOnly: true
          type:
            readOnly: true
    postAlarmCollectionResource_request_allOf_source:
      properties:
        name:
          readOnly: true
      required:
      - id
    postAlarmCollectionResource_request:
      allOf:
      - $ref: '#/components/schemas/alarm'
      - properties:
          source:
            $ref: '#/components/schemas/postAlarmCollectionResource_request_allOf_source'
        required:
        - severity
        - source
        - text
        - time
        - type
    putAlarmResource_request:
      allOf:
      - $ref: '#/components/schemas/alarm'
      - properties:
          source:
            readOnly: true
          time:
            readOnly: true
          type:
            readOnly: true
    postOperationCollectionResource_request:
      allOf:
      - $ref: '#/components/schemas/operation'
      - properties:
          status:
            readOnly: true
        required:
        - deviceId
    putOperationResource_request:
      allOf:
      - $ref: '#/components/schemas/operation'
      - properties:
          deviceId:
            readOnly: true
        required:
        - status
    postNewDeviceRequestCollectionResource_request:
      allOf:
      - $ref: '#/components/schemas/newDeviceRequest'
      - properties:
          status:
            readOnly: true
        required:
        - id
    putNewDeviceRequestResource_request:
      allOf:
      - $ref: '#/components/schemas/newDeviceRequest'
      - properties:
          id:
            readOnly: true
        required:
        - status
    postDeviceCredentialsCollectionResource_request:
      allOf:
      - $ref: '#/components/schemas/deviceCredentials'
      - required:
        - id
    postBulkNewDeviceRequestCollectionResource_request:
      properties:
        file:
          description: The CSV file to be uploaded.
          format: binary
          type: string
      required:
      - file
      type: object
    postApplicationCollectionResource_request:
      allOf:
      - required:
        - key
        - name
        - type
      - $ref: '#/components/schemas/application'
    putApplicationResource_request:
      allOf:
      - $ref: '#/components/schemas/application'
      - properties:
          type:
            readOnly: true
    postBinaryApplicationContentResource_request:
      properties:
        file:
          description: The ZIP file to be uploaded.
          format: binary
          type: string
      required:
      - file
      type: object
    postApplicationVersionResource_request:
      properties:
        applicationBinary:
          description: The ZIP file to be uploaded.
          format: binary
          type: string
        applicationVersion:
          description: The JSON file with version information.
          type: string
      required:
      - applicationBinary
      - applicationVersion
      type: object
    getApplicationsByNameCollectionResource_200_response:
      allOf:
      - $ref: '#/components/schemas/ApplicationCollection'
      - properties:
          self:
            $ref: '#/components/schemas/getApplicationsByNameCollectionResource_200_response_allOf_self'
          prev:
            $ref: '#/components/schemas/getApplicationsByNameCollectionResource_200_response_allOf_prev'
          next:
            $ref: '#/components/schemas/getApplicationsByNameCollectionResource_200_response_allOf_next'
    getApplicationsByTenantCollectionResource_200_response:
      allOf:
      - $ref: '#/components/schemas/ApplicationCollection'
      - properties:
          self:
            $ref: '#/components/schemas/getApplicationsByTenantCollectionResource_200_response_allOf_self'
          prev:
            $ref: '#/components/schemas/getApplicationsByTenantCollectionResource_200_response_allOf_prev'
          next:
            $ref: '#/components/schemas/getApplicationsByTenantCollectionResource_200_response_allOf_next'
    getApplicationsByOwnerCollectionResource_200_response:
      allOf:
      - $ref: '#/components/schemas/ApplicationCollection'
      - properties:
          self:
            $ref: '#/components/schemas/getApplicationsByOwnerCollectionResource_200_response_allOf_self'
          prev:
            $ref: '#/components/schemas/getApplicationsByOwnerCollectionResource_200_response_allOf_prev'
          next:
            $ref: '#/components/schemas/getApplicationsByOwnerCollectionResource_200_response_allOf_next'
    getApplicationsByUserCollectionResource_200_response:
      allOf:
      - $ref: '#/components/schemas/ApplicationCollection'
      - properties:
          self:
            $ref: '#/components/schemas/getApplicationsByUserCollectionResource_200_response_allOf_self'
          prev:
            $ref: '#/components/schemas/getApplicationsByUserCollectionResource_200_response_allOf_prev'
          next:
            $ref: '#/components/schemas/getApplicationsByUserCollectionResource_200_response_allOf_next'
    postEventCollectionResource_request:
      allOf:
      - $ref: '#/components/schemas/event'
      - properties:
          source:
            required:
            - id
        required:
        - source
        - text
        - time
        - type
    putEventResource_request:
      allOf:
      - $ref: '#/components/schemas/event'
      - properties:
          source:
            readOnly: true
          time:
            readOnly: true
          type:
            readOnly: true
    postEventBinaryResource_request:
      properties:
        object:
          $ref: '#/components/schemas/binaryInfo'
        file:
          description: Path of the file to be uploaded.
          example: !!binary |-
            aGVsbG8udHh0
          format: binary
          type: string
      required:
      - file
      - object
      type: object
    getManagedObjectChildAdditionResource_200_response:
      allOf:
      - $ref: '#/components/schemas/ManagedObjectReference'
      - properties:
          self:
            example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}"
    getManagedObjectChildAssetsResource_200_response:
      allOf:
      - $ref: '#/components/schemas/ManagedObjectReferenceCollection'
      - properties:
          prev:
            example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets?pageSize=5&currentPage=1"
          self:
            example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets?pageSize=5&currentPage=2"
          next:
            example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets?pageSize=5&currentPage=3"
    getManagedObjectChildAssetResource_200_response:
      allOf:
      - $ref: '#/components/schemas/ManagedObjectReference'
      - properties:
          self:
            example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}"
    getManagedObjectChildDevicesResource_200_response:
      allOf:
      - $ref: '#/components/schemas/ManagedObjectReferenceCollection'
      - properties:
          prev:
            example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices?pageSize=5&currentPage=1"
          self:
            example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices?pageSize=5&currentPage=2"
          next:
            example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices?pageSize=5&currentPage=3"
    getManagedObjectChildDeviceResource_200_response:
      allOf:
      - $ref: '#/components/schemas/ManagedObjectReference'
      - properties:
          self:
            example: "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}"
    postInventoryRoleResource_request:
      allOf:
      - $ref: '#/components/schemas/inventoryRole'
      - required:
        - description
        - name
        - permissions
    postUserCollectionResource_request:
      allOf:
      - $ref: '#/components/schemas/user'
      - properties:
          devicePermissions:
            readOnly: true
      - required:
        - email
        - userName
    putUserResource_request:
      allOf:
      - $ref: '#/components/schemas/user'
      - properties:
          userName:
            readOnly: true
          devicePermissions:
            readOnly: true
    postGroupCollectionResource_request:
      allOf:
      - $ref: '#/components/schemas/group'
      - properties:
          devicePermissions:
            readOnly: true
    postInventoryAssignmentResource_request_allOf_roles_inner:
      properties:
        description:
          readOnly: true
        permissions:
          readOnly: true
      required:
      - name
    postInventoryAssignmentResource_request:
      allOf:
      - $ref: '#/components/schemas/inventoryAssignment'
      - properties:
          roles:
            items:
              $ref: '#/components/schemas/postInventoryAssignmentResource_request_allOf_roles_inner'
            type: array
        required:
        - managedObject
        - roles
    postRetentionRuleCollectionResource_request:
      allOf:
      - $ref: '#/components/schemas/retentionRule'
      - required:
        - maximumAge
    postTenantCollectionResource_request:
      allOf:
      - $ref: '#/components/schemas/tenant'
      - required:
        - adminName
        - company
        - domain
    putTenantResource_request:
      allOf:
      - $ref: '#/components/schemas/tenant'
      - properties:
          adminName:
            readOnly: true
    putTrustedCertificateResource_request:
      allOf:
      - $ref: '#/components/schemas/TrustedCertificate'
      - properties:
          certInPemFormat:
            readOnly: true
    postOptionCollectionResource_request:
      allOf:
      - $ref: '#/components/schemas/option'
      - required:
        - category
        - key
    alarm_source:
      description: The managed object to which the alarm is associated.
      properties:
        id:
          description: Unique identifier of the object.
          minLength: 1
          title: ObjectId
          type: string
        name:
          description: Human-readable name that is used for representing the object
            in user interfaces.
          title: ObjectName
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    auditApiResource_auditRecords:
      description: Collection of audit records
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        auditRecords:
          items:
            $ref: '#/components/schemas/auditRecord'
          nullable: true
          type: array
      type: object
    auditRecord_c8y_Metadata:
      description: Metadata of the audit record.
      properties:
        action:
          description: The action that was carried out.
          enum:
          - SUBSCRIBE
          - DEPLOY
          - SCALE
          - DELETE
          type: string
      readOnly: true
      type: object
    auditRecord_changes_inner_newValue_oneOf:
      properties:
        cpu:
          description: Number of CPUs or CPU time limit.
          type: string
        memory:
          description: Memory usage limit.
          type: string
      type: object
    auditRecord_changes_inner_newValue:
      description: The new value of the object.
      nullable: true
      oneOf:
      - type: string
      - $ref: '#/components/schemas/auditRecord_changes_inner_newValue_oneOf'
    auditRecord_changes_inner_previousValue:
      description: The previous value of the object.
      nullable: true
      oneOf:
      - type: string
      - $ref: '#/components/schemas/auditRecord_changes_inner_newValue_oneOf'
    auditRecord_changes_inner:
      properties:
        attribute:
          description: The attribute that was changed.
          type: string
        changeType:
          description: The type of change that was carried out.
          enum:
          - ADDED
          - REPLACED
          type: string
        newValue:
          $ref: '#/components/schemas/auditRecord_changes_inner_newValue'
        previousValue:
          $ref: '#/components/schemas/auditRecord_changes_inner_previousValue'
        type:
          description: The type of the object.
          nullable: true
          type: string
      type: object
    auditRecord_source:
      description: The managed object to which the audit is associated.
      properties:
        id:
          description: Unique identifier of the object.
          minLength: 1
          title: ObjectId
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      required:
      - id
      type: object
    alarmsApiResource_alarms:
      description: Collection of all alarms
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        alarms:
          items:
            $ref: '#/components/schemas/alarm'
          nullable: true
          type: array
      type: object
    application_manifest:
      oneOf:
      - $ref: '#/components/schemas/microservice_application_manifest'
      - $ref: '#/components/schemas/web_application_manifest'
    application_owner_tenant:
      properties:
        id:
          description: The tenant ID.
          type: string
      type: object
    microservice_application_manifest_extensions_inner:
      properties:
        path:
          description: The relative path in Cumulocity IoT for this microservice application.
          example: /cep/myapplication
          type: string
        type:
          description: The type of this extension.
          example: myapplication.io
          type: string
      type: object
    microservice_application_manifest_livenessProbe:
      allOf:
      - description: Defines the strategy used to verify if a microservice is alive
          or requires a restart.
      - $ref: '#/components/schemas/application_manifest_probe'
    microservice_application_manifest_provider:
      description: |
        Application provider information.
        Simple name allowed for predefined providers, for example, c8y.
        Detailed object for external provider.
      properties:
        name:
          description: The name of the application provider.
          example: Cumulocity GmbH
          type: string
      type: object
    microservice_application_manifest_readinessProbe:
      allOf:
      - description: Defines the strategy used to verify if a microservice is ready
          to accept traffic.
      - $ref: '#/components/schemas/application_manifest_probe'
    microservice_application_manifest_requestResources:
      description: The minimum required resources for the microservice application.
      properties:
        cpu:
          description: The required CPU resource for this microservice application.
          example: 250m
          type: string
        memory:
          description: The required memory resource for this microservice application.
          example: 256Mi
          type: string
      type: object
    microservice_application_manifest_resources:
      description: The recommended resources for this microservice application.
      properties:
        cpu:
          description: The required CPU resource for this microservice application.
          example: 6000m
          type: string
        memory:
          description: The required memory resource for this microservice application.
          example: 28Gi
          type: string
      type: object
    application_manifest_probe_httpGet:
      description: The probe's HTTP GET method information.
      properties:
        path:
          description: The HTTP path.
          type: string
        port:
          description: The HTTP port.
          type: integer
      type: object
    application_settings_inner_valueSchema:
      description: The value schema determines the values that the microservice can
        process.
      properties:
        type:
          description: The value schema type.
          example: boolean
          type: string
      type: object
    application_settings_inner:
      properties:
        key:
          description: The name of the setting.
          example: hostkey-autosave
          type: string
        valueSchema:
          $ref: '#/components/schemas/application_settings_inner_valueSchema'
        defaultValue:
          description: The default value.
          example: "true"
          type: string
        editable:
          description: Indicates if the value is editable.
          example: true
          type: boolean
        inheritFromOwner:
          description: Indicated wether this setting is inherited.
          example: true
          type: boolean
      type: object
    bulkNewDeviceRequest_credentialUpdatedList_inner:
      properties:
        bulkNewDeviceStatus:
          description: The device credentials creation status.
          enum:
          - CREATED
          - FAILED
          - CREDENTIAL_UPDATED
          example: CREDENTIAL_UPDATED
          title: NewDeviceStatus
          type: string
        deviceId:
          description: Unique identifier of the device.
          example: id04
          type: string
      type: object
    bulkNewDeviceRequest_failedCreationList_inner:
      properties:
        bulkNewDeviceStatus:
          description: The device credentials creation status.
          enum:
          - CREATED
          - FAILED
          - CREDENTIAL_UPDATED
          example: FAILED
          title: NewDeviceStatus
          type: string
        deviceId:
          description: Unique identifier of the device.
          example: id5
          type: string
        failureReason:
          description: Reason for the failure.
          example: Could not update the device
          type: string
        line:
          description: Line where the failure occurred.
          example: "DeviceInfo{id='id5', credentials='credentials3', tenant='t00000003'}"
          type: string
      type: object
    bulkOperation_progress:
      description: Contains information about the number of processed operations.
      properties:
        pending:
          description: Number of pending operations.
          type: integer
        failed:
          description: Number of failed operations.
          type: integer
        executing:
          description: Number of operations being executed.
          type: integer
        successful:
          description: Number of operations successfully processed.
          type: integer
        all:
          description: Total number of processed operations.
          type: integer
      readOnly: true
      type: object
    deviceControlApiResource_operations:
      description: Collection of all operations.
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        operations:
          description: An array containing the registered operations.
          items:
            $ref: '#/components/schemas/operationReference'
          nullable: true
          type: array
      type: object
    eventsApiResource_events:
      description: Collection of all events
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        events:
          items:
            $ref: '#/components/schemas/event'
          nullable: true
          type: array
      type: object
    externalId_managedObject:
      description: The managed object linked to the external ID.
      properties:
        id:
          description: Unique identifier of the object.
          minLength: 1
          title: ObjectId
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      readOnly: true
      type: object
    event_source:
      description: The managed object to which the event is associated.
      properties:
        id:
          description: Unique identifier of the object.
          minLength: 1
          title: ObjectId
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    group_roles:
      description: An object containing user roles for this group.
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        references:
          description: A list of user role references.
          items:
            $ref: '#/components/schemas/roleReference'
          type: array
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      readOnly: true
      type: object
    group_users:
      description: The list of users in this group.
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        references:
          description: The list of users in this group.
          items:
            $ref: '#/components/schemas/user'
          type: array
      readOnly: true
      type: object
    inventoryApiResource_managedObjects:
      description: Collection of all managed objects
      properties:
        references:
          description: An array containing the referenced managed objects.
          items:
            $ref: '#/components/schemas/managedObject'
          minItems: 0
          type: array
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    inventoryAssignmentReference_roles_inner:
      properties:
        id:
          description: A unique identifier for this inventory role.
          example: 4
          type: integer
      type: object
    managedObjectReferenceTuple_managedObject:
      description: Details of the referenced managed object.
      properties:
        id:
          description: Unique identifier of the object.
          minLength: 1
          title: ObjectId
          type: string
        name:
          description: Human-readable name that is used for representing the object
            in user interfaces.
          title: ObjectName
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    measurement_source:
      description: The managed object to which the measurement is associated.
      properties:
        id:
          description: Unique identifier of the object.
          minLength: 1
          title: ObjectId
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      required:
      - id
      type: object
    c8y_Steam_Temperature:
      properties:
        unit:
          description: The unit of the measurement.
          example: C
          minLength: 1
          type: string
        value:
          description: The value of the individual measurement.
          example: 100
          type: number
      required:
      - value
      type: object
    measurementApiResource_measurements:
      description: Collection of all measurements
      properties:
        measurements:
          items:
            $ref: '#/components/schemas/measurement'
          nullable: true
          type: array
          example: null
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    operationReference_operation:
      description: The referenced operation.
      properties:
        id:
          description: Unique identifier of this operation.
          readOnly: true
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    user_groups:
      description: An object with a list of user groups.
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        references:
          description: A list of user group references.
          example: []
          items:
            $ref: '#/components/schemas/groupReference'
          type: array
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      readOnly: true
      type: object
    user_roles:
      description: An object with a list of user roles.
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        references:
          description: A list of user role references.
          items:
            $ref: '#/components/schemas/roleReference'
          type: array
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      readOnly: true
      type: object
    tenantApiResource_options:
      description: Collection of tenant options
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        options:
          items:
            $ref: '#/components/schemas/option'
          nullable: true
          type: array
      type: object
    tenantApiResource_tenants:
      description: Collection of subtenants
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        tenants:
          items:
            $ref: '#/components/schemas/tenant'
          nullable: true
          type: array
      type: object
    tenant_applications:
      description: Collection of the subscribed applications.
      properties:
        references:
          description: An array containing all subscribed applications.
          items:
            $ref: '#/components/schemas/application'
          type: array
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      readOnly: true
      type: object
    tenant_ownedApplications:
      description: Collection of the owned applications.
      properties:
        references:
          description: An array containing all owned applications (only applications
            with availability MARKET).
          items:
            $ref: '#/components/schemas/application'
          type: array
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      readOnly: true
      type: object
    authConfig_accessTokenToUserDataMapping:
      description: SSO specific. Describes the fields in the access token from the
        external server containing user information.
      properties:
        emailClaimName:
          description: The name of the field containing the user's email.
          format: email
          type: string
        firstNameClaimName:
          description: The name of the field containing the user's first name.
          type: string
        lastNameClaimName:
          description: The name of the field containing the user's last name.
          type: string
        phoneNumberClaimName:
          description: The name of the field containing the user's phone number.
          format: phone
          type: string
      type: object
    authConfig_authorizationRequest:
      allOf:
      - $ref: '#/components/schemas/RequestRepresentation'
      - description: SSO specific. Request to the external authorization server used
          by the Cumulocity IoT platform to obtain an authorization code.
    authConfig_logoutRequest:
      allOf:
      - $ref: '#/components/schemas/RequestRepresentation'
      - description: SSO specific. Request to the external authorization server used
          by the Cumulocity IoT platform to logout the user.
    authConfig_onNewUser_dynamicMapping_configuration:
      description: Configuration of the mapping.
      properties:
        mapRolesOnlyForNewUser:
          description: Indicates whether the mapping should be evaluated always or
            only during the first external login when the internal user is created.
          type: boolean
      type: object
    authConfig_onNewUser_dynamicMapping_mappings_inner:
      description: Represents information of mapping access to groups and applications.
      properties:
        when:
          $ref: '#/components/schemas/JSONPredicateRepresentation'
        thenApplications:
          description: List of the applications' identifiers.
          items:
            type: integer
          type: array
        thenGroups:
          description: List of the groups' identifiers.
          items:
            type: integer
          type: array
      type: object
    authConfig_onNewUser_dynamicMapping:
      description: Modern version of configuration of default groups and applications.
        This ensures backward compatibility.
      properties:
        configuration:
          $ref: '#/components/schemas/authConfig_onNewUser_dynamicMapping_configuration'
        mappings:
          description: Represents rules used to assign groups and applications.
          items:
            $ref: '#/components/schemas/authConfig_onNewUser_dynamicMapping_mappings_inner'
          type: array
      type: object
    authConfig_onNewUser:
      description: SSO specific. Describes the process of internal user creation during
        login with the external authorization server.
      properties:
        dynamicMapping:
          $ref: '#/components/schemas/authConfig_onNewUser_dynamicMapping'
      type: object
    authConfig_refreshRequest:
      allOf:
      - $ref: '#/components/schemas/RequestRepresentation'
      - description: SSO specific. Request to the external authorization server used
          by the Cumulocity IoT platform to obtain a refresh token.
    authConfig_signatureVerificationConfig_aad:
      description: AAD signature verification configuration.
      properties:
        publicKeyDiscoveryUrl:
          description: URL used to retrieve the public key used for signature verification.
          format: uri
          type: string
      type: object
    authConfig_signatureVerificationConfig_adfsManifest:
      description: ADFS manifest signature verification configuration.
      properties:
        manifestUrl:
          description: The URI to the manifest resource.
          format: uri
          type: string
      type: object
    authConfig_signatureVerificationConfig_jwks:
      description: The address of the endpoint which is used to retrieve the public
        key used to verify the JWT access token signature.
      properties:
        jwksUrl:
          description: The URI to the public key resource.
          format: uri
          type: string
      type: object
    authConfig_signatureVerificationConfig_manual_certificates:
      description: Details of the certificates.
      properties:
        alg:
          description: The signing algorithm of the JWT access token.
          enum:
          - RSA
          - PCKS
          type: string
        publicKey:
          description: The public key certificate.
          type: string
        validFrom:
          description: The validity start date of the certificate.
          format: date-time
          type: string
        validTill:
          description: The expiry date of the certificate.
          format: date-time
          type: string
      type: object
    authConfig_signatureVerificationConfig_manual:
      description: Describes the process of verification of JWT access token with
        the public keys embedded in the provided X.509 certificates.
      properties:
        certIdField:
          description: The name of the field in the JWT access token containing the
            certificate identifier.
          type: string
        certIdFromField:
          description: Indicates whether the certificate identifier should be read
            from the JWT access token.
          type: boolean
        certificates:
          $ref: '#/components/schemas/authConfig_signatureVerificationConfig_manual_certificates'
      type: object
    authConfig_signatureVerificationConfig:
      description: SSO specific and authorization server dependent. Describes the
        method of access token signature verification on the Cumulocity IoT platform.
      properties:
        aad:
          $ref: '#/components/schemas/authConfig_signatureVerificationConfig_aad'
        adfsManifest:
          $ref: '#/components/schemas/authConfig_signatureVerificationConfig_adfsManifest'
        jwks:
          $ref: '#/components/schemas/authConfig_signatureVerificationConfig_jwks'
        manual:
          $ref: '#/components/schemas/authConfig_signatureVerificationConfig_manual'
      type: object
    authConfig_tokenRequest:
      allOf:
      - $ref: '#/components/schemas/RequestRepresentation'
      - description: SSO specific. Request to the external authorization server used
          by the Cumulocity IoT platform to obtain an access token.
    authConfig_userIdConfig:
      description: SSO specific. Points to the field in the obtained JWT access token
        that should be used as the username in the Cumulocity IoT platform.
      properties:
        constantValue:
          description: Used only when `useConstantValue` is set to `true`.
          type: string
        jwtField:
          description: The name of the field containing the JWT.
          type: string
        useConstantValue:
          description: "Not recommended. If set to `true`, all SSO users will share\
            \ one account in the Cumulocity IoT platform."
          type: boolean
      type: object
    childOperationsAddOne_managedObject:
      properties:
        id:
          description: Unique identifier of the object.
          example: <childId>
          type: string
      required:
      - id
      type: object
    childOperationsAddMultiple_references_inner_managedObject:
      properties:
        id:
          description: Unique identifier of the object.
          minLength: 1
          title: ObjectId
          type: string
      required:
      - id
      type: object
    childOperationsAddMultiple_references_inner:
      properties:
        managedObject:
          $ref: '#/components/schemas/childOperationsAddMultiple_references_inner_managedObject'
      type: object
    CurrentTenant_applications:
      description: Collection of the subscribed applications.
      properties:
        references:
          description: An array containing all subscribed applications.
          items:
            $ref: '#/components/schemas/application'
          type: array
      type: object
    ManagedObjectReferenceCollection_references_inner:
      properties:
        managedObject:
          $ref: '#/components/schemas/managedObject'
      type: object
    ApplicationBinaries_attachments_inner:
      properties:
        contextPath:
          description: The application context path.
          example: tracking
          type: string
        created:
          description: The date and time when the attachment was created.
          example: 2020-09-09T13:23:57.744Z
          format: date-time
          type: string
        description:
          description: A description for the attachment.
          example: Sample description
          type: string
        downloadUrl:
          description: A download URL for the attachment.
          example: http://example.com
          type: string
        id:
          description: The ID of the attachment.
          example: "30874797"
          type: string
        length:
          description: "The length of the attachment, in bytes."
          example: 5262152
          type: integer
        name:
          description: The name of the attachment.
          example: tracking.zip
          type: string
      type: object
    ApplicationUserCollection_users_inner:
      description: A user who is subscribed to the current application.
      properties:
        name:
          description: The username.
          example: service_hello_world
          type: string
        password:
          description: The user password.
          example: s3cr3tp4ssw0rd
          format: password
          type: string
        tenant:
          description: The user tenant.
          example: t0700700777777
          type: string
      type: object
    MeasurementCollection_statistics:
      allOf:
      - readOnly: true
      - $ref: '#/components/schemas/pageStatistics'
    SubscribedApplicationReference_application:
      description: The application to be subscribed to.
      properties:
        self:
          description: A URL linking to this resource.
          example: https://<TENANT_DOMAIN>/application/applications/20200301
          type: string
      required:
      - self
      type: object
    SubscribedRole_role:
      description: An object with a role reference URL.
      properties:
        self:
          description: A URL linking to this resource.
          example: https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN
          type: string
      type: object
    SubscribedUser_user:
      description: An object with a user reference URL.
      properties:
        self:
          description: A URL linking to this resource.
          example: "https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe"
          type: string
      type: object
    realtimeNotification_advice:
      description: Configuration parameters for the current connect message.
      properties:
        interval:
          description: "Period (milliseconds) after which the server will close the\
            \ session, if it doesn't received the next connect message from the client.\
            \ Overrides server default settings for current request-response conversation."
          minimum: 0
          type: integer
        timeout:
          description: Interval (milliseconds) between the sending of the connect
            message and the response from the server. Overrides server default settings
            for the current request-response conversation.
          minimum: 0
          type: integer
      type: object
    realtimeNotification_ext_com_cumulocity_authn:
      properties:
        token:
          description: Base64 encoded credentials.
          format: Base64
          type: string
        tfa:
          description: Optional two factor authentication token.
          type: string
        xsrfToken:
          description: Required for OAuth authentication.
          type: string
      type: object
    realtimeNotification_ext:
      description: Authentication object passed to handshake (only over WebSockets).
      properties:
        com.cumulocity.authn:
          $ref: '#/components/schemas/realtimeNotification_ext_com_cumulocity_authn'
        systemOfUnits:
          description: The system of units to use.
          enum:
          - imperial
          - metric
          type: string
      type: object
    NotificationApiResource_notificationSubscriptions:
      description: Collection of all notification subscriptions.
      properties:
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
        subscriptions:
          items:
            $ref: '#/components/schemas/NotificationSubscription'
          nullable: true
          type: array
      type: object
    NotificationSubscription_source:
      description: The managed object to which the subscription is associated.
      properties:
        id:
          description: Unique identifier of the object.
          minLength: 1
          title: ObjectId
          type: string
        name:
          description: Human-readable name that is used for representing the object
            in user interfaces.
          title: ObjectName
          type: string
        self:
          description: A URL linking to this resource.
          format: uri
          readOnly: true
          title: SelfURL
          type: string
      type: object
    NotificationSubscription_subscriptionFilter:
      description: Applicable filters to the subscription.
      properties:
        apis:
          description: |
            The Notifications are available for Alarms, Alarms with children, Device control, Events, Events with children, Inventory and Measurements for the `mo` context and for Alarms and Inventory for the `tenant` context. Alternatively, the wildcard `*` can be used to match all the permissible APIs within the bound context.

            > **&#9432; Info:** the wildcard `*` cannot be used in conjunction with other values.
          items:
            enum:
            - alarms
            - alarmsWithChildren
            - events
            - eventsWithChildren
            - managedobjects
            - measurements
            - operations
            - '*'
            type: string
          type: array
        typeFilter:
          description: The data needs to have the specified value in its `type` property
            to meet the filter criteria.
          type: string
      type: object
    c8y_TemperatureMeasurement_T:
      allOf:
      - $ref: '#/components/schemas/c8y_MeasurementValue'
      - description: Measured temperature in degrees Celsius (C).
    c8y_MotionMeasurement_motionDetected:
      description: Boolean value indicating if motion has been detected (non-zero
        value) or not (zero value).
      properties:
        value:
          type: number
        type:
          type: string
      type: object
    c8y_MotionMeasurement_speed:
      allOf:
      - $ref: '#/components/schemas/c8y_MeasurementValue'
      - description: Measured speed towards (+ve) or away (-ve) from the sensor.
    c8y_AccelerationMeasurement_acceleration:
      allOf:
      - $ref: '#/components/schemas/c8y_MeasurementValue'
      - description: Measured acceleration along the sensor axis (direction of the
          sensor axis is not defined in this measurement).
    c8y_LightMeasurement_e:
      allOf:
      - $ref: '#/components/schemas/c8y_MeasurementValue'
      - description: Photometrical light measurement.
    c8y_HumidityMeasurement_h:
      allOf:
      - $ref: '#/components/schemas/c8y_MeasurementValue'
      - description: Relative humidity measurement.
    c8y_MoistureMeasurement_moisture:
      allOf:
      - $ref: '#/components/schemas/c8y_MeasurementValue'
      - description: Relative moisture measurement.
    c8y_DistanceMeasurement_distance:
      allOf:
      - $ref: '#/components/schemas/c8y_MeasurementValue'
      - description: Distance measurement.
    c8y_CurrentMeasurement_current:
      allOf:
      - $ref: '#/components/schemas/c8y_MeasurementValue'
      - description: Current measurement.
    c8y_VoltageMeasurement_voltage:
      allOf:
      - $ref: '#/components/schemas/c8y_MeasurementValue'
      - description: Voltage measurement.
    c8y_SoftwareList_inner:
      description: Details of the installed software.
      properties:
        name:
          description: The name of the software.
          type: string
        version:
          description: The version of the software.
          type: string
        url:
          description: "The URL of the software, for example, its code repository."
          format: uri
          type: string
      type: object
    c8y_Network_c8y_LAN:
      description: Local network information.
      properties:
        netmask:
          description: Subnet mask configured for the network interface.
          type: string
        ip:
          description: IP address configured for the network interface.
          type: string
        name:
          description: Identifier for the network interface.
          type: string
        enabled:
          description: Indicator showing if the interface is enabled.
          type: integer
        mac:
          description: MAC address of the network interface.
          type: string
      type: object
    c8y_Network_c8y_WAN:
      description: Mobile internet connectivity interface status.
      properties:
        password:
          description: SIM connectivity password.
          type: string
        simStatus:
          description: SIM connection status.
          type: string
        authType:
          description: Authentication type used by the SIM connectivity.
          type: string
        apn:
          description: APN used for internet access.
          type: string
        username:
          description: SIM connectivity username.
          type: string
      type: object
    c8y_Network_c8y_DHCP_addressRange:
      description: IP address range.
      properties:
        start:
          description: Start of address range assigned to DHCP clients.
          type: string
        end:
          description: End of address range assigned to DHCP clients.
          type: string
      type: object
    c8y_Network_c8y_DHCP:
      description: Information for DHCP server status.
      properties:
        dns1:
          description: First configured DNS server.
          type: string
        dns2:
          description: Second configured DNS server.
          type: string
        domainName:
          description: Domain name configured for the device.
          type: string
        addressRange:
          $ref: '#/components/schemas/c8y_Network_c8y_DHCP_addressRange'
        enabled:
          description: Indicator showing if the DHCP server is enabled.
          type: integer
      type: object
    UpdatedDevicePermissions_users_inner:
      example:
        userName: some-username
        devicePermissions:
          "647100":
          - MANAGED_OBJECT:*:ADMIN
      properties:
        userName:
          example: some-username
          type: string
        devicePermissions:
          additionalProperties:
            items:
              type: string
            type: array
          deprecated: true
          description: An object with a list of the user's device permissions.
          example:
            "647100":
            - MANAGED_OBJECT:*:ADMIN
          title: DevicePermissions
          type: object
      type: object
    UpdatedDevicePermissions_groups_inner:
      example:
        id: "1"
        devicePermissions:
          "647100":
          - MANAGED_OBJECT:*:ADMIN
      properties:
        id:
          example: "1"
          type: string
        devicePermissions:
          additionalProperties:
            items:
              type: string
            type: array
          deprecated: true
          description: An object with a list of the user's device permissions.
          example:
            "647100":
            - MANAGED_OBJECT:*:ADMIN
          title: DevicePermissions
          type: object
      type: object
    getApplicationsByNameCollectionResource_200_response_allOf_self:
      allOf:
      - $ref: '#/components/schemas/desc_self'
      - example: https://<TENANT_DOMAIN>/application/applicationsByName?pageSize=5&currentPage=2
    getApplicationsByNameCollectionResource_200_response_allOf_prev:
      allOf:
      - $ref: '#/components/schemas/desc_prevPage'
      - example: "https://<TENANT_DOMAIN>/application/applicationsByName/{name}?pageSize=5&currentPage=1"
    getApplicationsByNameCollectionResource_200_response_allOf_next:
      allOf:
      - $ref: '#/components/schemas/desc_nextPage'
      - example: "https://<TENANT_DOMAIN>/application/applicationsByName/{name}?pageSize=5&currentPage=3"
    getApplicationsByTenantCollectionResource_200_response_allOf_self:
      allOf:
      - $ref: '#/components/schemas/desc_self'
      - example: https://<TENANT_DOMAIN>/application/applicationsByTenant?pageSize=5&currentPage=2
    getApplicationsByTenantCollectionResource_200_response_allOf_prev:
      allOf:
      - $ref: '#/components/schemas/desc_prevPage'
      - example: "https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}?pageSize=5&currentPage=1"
    getApplicationsByTenantCollectionResource_200_response_allOf_next:
      allOf:
      - $ref: '#/components/schemas/desc_nextPage'
      - example: "https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}?pageSize=5&currentPage=3"
    getApplicationsByOwnerCollectionResource_200_response_allOf_self:
      allOf:
      - $ref: '#/components/schemas/desc_self'
      - example: https://<TENANT_DOMAIN>/application/applicationsByOwner?pageSize=5&currentPage=2
    getApplicationsByOwnerCollectionResource_200_response_allOf_prev:
      allOf:
      - $ref: '#/components/schemas/desc_prevPage'
      - example: "https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}?pageSize=5&currentPage=1"
    getApplicationsByOwnerCollectionResource_200_response_allOf_next:
      allOf:
      - $ref: '#/components/schemas/desc_nextPage'
      - example: "https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}?pageSize=5&currentPage=3"
    getApplicationsByUserCollectionResource_200_response_allOf_self:
      allOf:
      - $ref: '#/components/schemas/desc_self'
      - example: https://<TENANT_DOMAIN>/application/applicationsByUser?pageSize=5&currentPage=2
    getApplicationsByUserCollectionResource_200_response_allOf_prev:
      allOf:
      - $ref: '#/components/schemas/desc_prevPage'
      - example: "https://<TENANT_DOMAIN>/application/applicationsByUser/{username}?pageSize=5&currentPage=1"
    getApplicationsByUserCollectionResource_200_response_allOf_next:
      allOf:
      - $ref: '#/components/schemas/desc_nextPage'
      - example: "https://<TENANT_DOMAIN>/application/applicationsByUser/{username}?pageSize=5&currentPage=3"
  securitySchemes:
    Basic:
      description: |
        The authorization header is formed as `Basic <Base64(<tenantID>/<c8yuser>:<password>)>`. For instance, if your tenantID, username and password are **t0071234**, **testuser** and **secret123** respectively, you can generate the Base64 string with the following command:

        ```shell
        $ echo -n t0071234/testuser:secret123 | base64
        ```

        and your authorization header would look like this:

        ```
        "Authorization": "Basic dDAwNzEyMzQvdGVzdHVzZXI6c2VjcmV0MTIz"
        ```
      scheme: basic
      type: http
    OAI-Secure:
      description: |
        This is the recommended authorization method because it provides high security using authorization tokens to prove the identity of the user, and it is the default login mode on creating new tenants. This mode is an enhancement of the previous OAuth Internal authentication (available prior to 10.13.0).

        For more details about OAI-Secure authentication, see [Administration > Login settings](https://cumulocity.com/guides/users-guide/administration/#login-settings) in the Cumulocity IoT User guide.
      scheme: bearer
      type: http
    SSO:
      description: |
        The login with SSO requires a correct configuration on the [Cumulocity IoT side](https://cumulocity.com/guides/users-guide/administration/#single-sign-on). With the configuration, an additional button is available on the Login page. After clicking the button, the user is redirected to authenticate with the configured authorization server. On successful login, the user is redirected to Cumulocity IoT.

        Authentication details are exchanged using cookies. There are two parts to it, the first is the authentication cookie that is handled automatically by the Cumulocity IoT platform. The second is the XSRF-TOKEN cookie. When a client receives the cookie, it should take the value and put it in the X-XSRF-TOKEN request header in all subsequent requests.

        The flow of authenticating with authentication code grant is as follows:

        ![Authentication flow](images/oauth-simple-flow.png)

        The first request executed by the browser is:

        ```http
        POST /tenant/loginOptions
        Host: https://<TENANT_DOMAIN>
        Content-Type: application/vnd.com.nsn.cumulocity.loginoptioncollection+json
        Accept: application/vnd.com.nsn.cumulocity.loginoptioncollection+json
        ```

        Response sample:

        ```json
        {
            "loginOptions": [
                {
                    "buttonName": "Login with oauth",
                    "grantType": "<AUTHORIZATION_CODE>",
                    "initRequest": "https://<TENANT_DOMAIN>/tenant/oauth?response_type=code&tenant_id=<TENANT_ID>",
                    "self": "https://<TENANT_DOMAIN>/tenant/loginOptions/oauth2",
                    "type": "oauth2"
                },
                ...
            ],
            "self": "http://<TENANT_DOMAIN>/tenant/loginOptions/"
        }
        ```

        The browser must invoke the request provided in the initRequest parameter.

        The initRequest initiates the redirect, in which the user is prompted for credentials. After successful login, the user is redirected back to the browser, where it must capture the code request parameter. Then the request to exchange the code for the token is as follows:

        ```http
        POST /tenant/oauth?grant_type=authorization_code&code=<CODE>
        Host: https://<TENANT_DOMAIN>
        ```

        A successful response will have no body but the following response headers:

        ```
        Set-Cookie: authorization=<TOKEN>;
        Set-Cookie: XSRF-TOKEN=<XSRF-TOKEN>;
        ```

        The authorization cookie is valid for two weeks.
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: /tenant/oauth?grant_type=authorization_code&code=<CODE>
      type: oauth2
    JWT:
      bearerFormat: JWT
      description: |
        Cumulocity IoT supports JSON Web Token (JWT) authentication.

        > **&#9432; Info:** The JWT authentication is deprecated but will continue to be supported until further notice. We recommend you to use the OAuth authentication code grant instead.

        The HTTP header must include:

        ```
        "Authorization": "Bearer <JWT token>"
        ```

        The JWT token must be signed using RSA signature with SHA-256 (RS256).

        The minimal RSA key size is 512 bit.

        You must upload your public key to the tenant options on the “token.publicKey” category.
      scheme: bearer
      type: http
x-tagGroups:
- name: Platform
  tags:
  - Platform API
- name: Alarms
  tags:
  - Alarm API
  - Alarm notification API
  - Alarms
- name: Applications
  tags:
  - Application API
  - Applications
  - Application versions
  - Application binaries
  - Bootstrap user
  - Current application
- name: Audits
  tags:
  - Audit API
  - Audits
- name: Device control
  tags:
  - Device control API
  - Device control notification API
  - Operations
  - Bulk operations
  - Device credentials
  - New device requests
  - Device control via SMS
- name: Events
  tags:
  - Event API
  - Event notification API
  - Events
  - Attachments
- name: Identity
  tags:
  - Identity API
  - External IDs
- name: Inventory
  tags:
  - Inventory API
  - Inventory notification API
  - Managed objects
  - Binaries
  - Child operations
  - Query language
- name: Measurements
  tags:
  - Measurement API
  - Measurement notification API
  - Measurements
  - Measurements specifics
- name: Notifications 2.0
  tags:
  - Notification 2.0 API
  - Subscriptions
  - Tokens
- name: Real-time notifications
  tags:
  - Real-time notification API
- name: Retentions
  tags:
  - Retention rules
- name: Tenants
  tags:
  - Tenant API
  - Tenants
  - Tenant applications
  - Trusted certificates
  - Device statistics
  - Usage statistics
  - Options
  - Login options
  - Login tokens
  - System options
- name: Users
  tags:
  - User API
  - Current User
  - Users
  - Groups
  - Roles
  - Inventory Roles
  - Device Permissions

